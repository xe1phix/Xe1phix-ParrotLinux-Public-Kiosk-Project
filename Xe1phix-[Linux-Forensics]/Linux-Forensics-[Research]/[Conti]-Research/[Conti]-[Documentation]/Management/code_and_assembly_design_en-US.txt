CODE REQUIREMENTS

1. The use of Visual C++ Runtime should be minimized. Functions malloc, memcpy, str* should be avoided.
WinAPI already has everything you need - instead of malloc - HeapAlloc, instead of memcpy - CopyMemory, instead of strstr - StrStr (shlwapi.h/.lib).
CRT adds quite a lot of unnecessary code to the binary.
1.1. STL in general should be avoided.
1.2. Some STL features give extra prologue to the code. For std::mutex it weighs 200k. You can't see it in your code, but it is there, and it will behave strangely in the execution context!
2. The linking of the maintime and third-party libraries to the module should be static (the /MT flag).
3. Lines should be obfuscated with Andrivet library (attached, see _STR() macro)
4. System calls should be obfuscated with library GetApi.h. Be careful, obfuscation of system calls may cause crashes.


MODULE DESIGN

1. There must be a Microsoft Visual Studio project, version at least 2015.
2. The Visual Studio project must be configured as follows:
* For ALL build profiles:
- General / Output directory: $(SolutionDir)Bin\$(PlatformTarget)\$(Configuration)\
- General / Intermediate directory: $(SolutionDir)\obj\$(Platform)\$(Configuration)\$(ProjectName)\
- General / Windows SDK version: <inherit from parent or default project values
- C/C++ / General / Multi-Processor Compilation: yes
- C/C++ / Code Creation / Runtime Library: Multi-threaded or Multi-threaded Debugging (Release/Debug respectively)
- C/C++ / Code Creation / Create Image with Upgrade: No
- C/C++ / Code creation / Enable C/C++ exceptions: No
* Release Profile:
- Debug information format (C/C++ General ): no
- Create debugging information (linker / debugger): no
In the advanced options add
/DEBUG:NONE /EMITPOGOPHASEINFO
https://stackoverflow.com/questions/45538668/remove-image-debug-directory-from-rdata-section
- C/C++ / Code Creation / Enable Security Check: no
- C/C++ / Code Creation / Main Run-Time Checks: default
- C/C++ / Optimization / omit frame pointers: yes
* When building LLVM-Obfuscator:
Clang adds a line with the path to the .pdb character file, even if this is disabled by the build options.
Suppress like this (Visual Studio):
- Composer -> Command Line, specify /pdbaltpath:<string>, instead of the pdb path will be this string.
5. The module should have two versions - x32- and x64-bit.
6. The module must be statically linked and be a single .exe/.dll file.
For .dll modules it is allowed to attach a _test_ launcher as an .exe.
7. In the battle assembly must be obfuscated to the maximum lines, disabled all debugging output.
8. The module must have a debug version. Debugging output should be output to modulename.log (the path to the log is configured in the macro).
Each log entry must contain a timestamp accurate to a second.
9. The project must have a file config.h (the name does not matter, the important point - here all the global settings - paths, macros-switches conditional compilation, etc.).
10. The module must work on all modern versions of Windows.
   The minimum supported version of Windows - Windows XP (if impossible - Windows Vista).
11. The notelemetry.obj file must be added to the layout (https://stackoverflow.com/questions/37761768/how-to-prevent-visual-studio-2015-update-2-to-add-telemetry-main-invoke-trigger).
12. entry point for Cobalt Strike:
#define DLL_API __declspec(dllexport)
extern "C" DLL_API void CALLBACK StartDLL(HWND hwnd, HINSTANCE hinst, LPSTR lpszCmdLine, int nCmdShow)
Called as follows:

TStr DllCmdLine;
for(int i = 1; i < argc; i++)
    DllCmdLine += TStr(argv[i]) + (i < argc - 1 ? " : "")
char *OutputData;
int OutputSize;
int *p = &OutputSize;
pStartDLL(HWND(&OutputData), HINSTANCE(&OutputSize), &DllCmdLine[0], SW_MAX + 1);
Entry point blocking: the calling context can be blocked for as long as necessary to complete the function.

ASSEMBLY DESIGN

The assembly must have a directory structure:

 modulename/Release_logged/x86
 modulename/Release_logged/x64
 modulename/Release_nologs/x86
 modulename/Release_nologs/x64

In Release_logged there is a version with logging and without obfuscation (but it's still a Release!
i.e. all optimizations should be enabled there, debug symbols disabled, etc.).
In release_nologs - version without logs, with full obfuscation.
The name of the build directory should contain the module name and date (e.g. cookies.22.04.2019).
If for specified date there are several builds of one module, unique suffix should be added (e.g. cookies.22.04.2019.2)

This is necessary for normal operation of the module - for testers and administrators to distinguish build versions,
to be able to rollback or upgrade, as well as to provide the needed build by its date.
An example of a script to automate the publication of builds is attached at the end of the document.

The assembly must be accompanied by two files in Russian:

* README.txt - a brief description of the purpose and use of the program.
It should contain non-obvious nuances, a quick start, all the subtleties that the developer knows about
and no outsider knows.
The main requirement for the document: accuracy. If something is stated in the document, it must work without question within the specified limits.

Sample document structure:
- Purpose of the program
- Short description
- Syntax
- Format of configs and settings (if any)
- Limitations, known bugs and problems, supported operating systems and third-party software, system requirements

* RELEASE_NOTES.txt in the following format:

11.02.2010
version 1.1
- new features such and such
- such bugs were fixed
- such bugs are known and were not fixed, but are planned to be fixed
- such nuances of using the version

01.02.2010
Fixed program crash due to this and that

01.01.2010
First version of the program


ASSEMBLY VALIDATION

Before issuing the assembly, the developer must:
- perform a smoke test themselves
- check for unobfuscated strings in Release_nologs binaries.
This can be done either by simply viewing the file body in Far,
or using IDA Pro (after you finish parsing the file, open Open Subview -> Strings),
or with third-party utilities.
- Especially make sure that there are no nicknames and paths in the binary
(like d:\work\Vasya Ivanov\project\project.pdb).
- check if there is no reference to debugging information in Release_nologs
(IDA Pro gives you a window suggesting to include the debug symbols when you start parsing the file)
- check the file on dyncheck.com for static analysis. DO NOT run dynamic analysis!
Allowed detects:
* x86 - up to 6 detects
* x64 - up to 3 detects.
!!! It is FORBIDDEN to check detects on virustotal.com!!!


EXECUTION OF THE SAVINGS

Assemblies are given as an encrypted .rar archive with a password length of at least 16 characters.
Password must be strong (different character cases, alpha and numbers, punctuation marks, etc.).
THE NAMES OF THE FILES IN THE ARCHIVE MUST BE ENCRYPTED.
The name of the archive must not speak.
modulename.22.09.2010.rar - bad name
c.rar - good name


GIT POLICY

IN GIT TO COMMIT WHENEVER THERE IS ANYTHING.

IT'S A GUARANTEE THAT THE WORK WON'T BE LOST.

IT'S A GUARANTEE THAT THE WORK WON'T BE LOST.

IT'S A GUARANTEE THAT THE WORK WON'T BE LOST.

If you write code every day, you commit every day.
You should commit even idle code - just do it in a separate branch and merge it into the main branch after stabilization.

PROHIBITED TO COMMIT:
- archives
- Files with usernames, passwords, URLs, IPs, names, addresses, phone numbers of anyone you know, and their hashes
(this does not apply to cases when the file is taken from a public list, some demo, URL leads to a public list, etc.)
- binary stuff (.obj, .suo, .sdf files, and other intermediate files in Visual Studio and other IDEs)
- build results - output files of the project (.exe, etc.)

Why version control systems (and git in particular) are needed
- as a means of backup (to insure against losing a day's work)
- centralized storage and code portability (access from anywhere, on any machine)
- memory and history (the answer to the question: WHY THIS SHIT STORY was written)

Believe me - in six months at most you won't remember why you wrote that fucking line.
If you have inherited the project after someone else, it is mission impossible.
To solve this problem, almost all modern version control tools have a blame function.
For example

git blame src/file.cpp

will show the author, date and commit number of each line of the specified file. And all this is integrated into Visual Studio
(right-click on the file in Solution Explorer -> Blame (notes))
To see something meaningful there instead of "some update" you should
- write understandable comments for commits;
- commit a couple lines at a time, instead of committing a bunch of files at the end of the week with the comment ";
- commit only those files that were affected by the patch (instead of committing the entire directory with the comment "commit", what is the big deal,
whatever old forgotten shit is lying in the project for God knows how long)
- use the diff tool (or rather its visual analog, such as the merge tool built into Visual Studio) when creating a commit

This means that you should commit often:
- fix a bug - immediately commit only files concerning it with the comment "bug so-and-so is fixed on stack overflow in function so-and-so and so-and-so".
- write a feature - immediately commit only files concerning him with the comment "implementation of non-interactive HTTP-client".

And then, when you look up the history of changes in the file, you will see the reason for writing that line, as well as the relationship of that line to other parts of the code.

You can, of course, not do all this, because you're too lazy to learn and that's it.
But then who are you?


APPENDIX 1. AUTOMATIC PUBLISHING SCRIPT

The following is an example of a .bat script to publish the build.


@echo off
rem usage: publish_build.bat

SetLocal EnableDelayedExpansion
set outdir=f:\temp
set srcdir=f:\Projects\project\Bin

for /f %%x in ('wmic path win32_localtime get /format:list ^| findstr "="') do set %%x
set today=%Day%.%Month%.%Year%
set outdir=%outdir%\g%today%
echo %outdir%
if not exist %outdir% goto :startcopy
set /a x=2
:while
if %x% lss 100 (
  echo %x%
  set /a x+=1
  if not exist %outdir%.%x% (
     set outdir=%outdir%.%x%
     goto :startcopy
  )
  goto :while
)
)

:startcopy
mkdir %outdir%
mkdir %outdir%\logged
mkdir %outdir%\logged\Release.x86
mkdir %outdir%\logged\Release.x64
xcopy /Y %srcdir%\x86\Release_logged\module.dll %outdir%\logged\Release.x86
xcopy /Y %srcdir%\x86\Release_logged\loader-test.exe %outdir%\logged\Release.x86
xcopy /Y %srcdir%\x64\Release_logged\module.dll %outdir%\logged\Release.x64
xcopy /Y %srcdir%\x64\Release_logged\loader-test.exe %outdir%\logged\Release.x64

mkdir %outdir%\not_logged
mkdir %outdir%\not_logged\Release.x86
mkdir %outdir%\not_logged\Release.x64
xcopy /Y %srcdir%\x86\Release_nologs\module.dll %outdir%\not_logged\Release.x86
xcopy /Y %srcdir%\x86\Release_nologs\loader-test.exe %outdir%\not_logged\Release.x86
xcopy /Y %srcdir%\x64\Release_nologs\module.dll %outdir%\not_logged\Release.x64
xcopy /Y %srcdir%\x64\Release_nologs\loader-test.exe %outdir%\not_logged\Release.x64

xcopy /Y %srcdir%\...\RELEASE_NOTES.txt %outdir%
xcopy /Y %srcdir%\...\readme.user.txt %outdir%

EndLocal