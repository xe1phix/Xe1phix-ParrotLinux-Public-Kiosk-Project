CRYPTOLOCKER
TERMS OF REFERENCE

PURPOSE

Develop a simple and effective minimalist cryptolocker.

REQUIREMENTS

- Minimum binary size
- Compliance with the requirements in "code and assembly design"
This includes the appearance of the program as a dll, as well as the presence of the entry point for Cobalt Strike
- Availability of a builder (configurator) that flashes the settings and creates a "locker-anlocker" pair
- Using fast streaming cipher (ChaCha20 or similar), to achieve maximum speed and speed of covering the system.
The key management scheme can replicate the REvil/Sodinokibi https://blog.amossys.fr/sodinokibi-malware-analysis.html
(A symmetric key for covering Chacha20 files is generated at the start of the locker;
it is encrypted with RSA4096 public key embedded in the locker and stored on the disk of the covered machine;
RSA4096 private key is sewn into the locker, it allows to read and decrypt the ChaCha20 symmetric key used for the locker)
- The program should cover all the available network balls
- the streaming model of the program should maximize disk and network balls processing
- key quality of the program is its speed of disk processing.


PROTECTIVE MEASURES

- Obfuscation of strings and system calls
- Remove AB hooks on startup
- Mitigations for protection against injections
- Injection protection with BaseThreadInitThunk interception
- Protection against process halting (check with WOW64!)
- Protection against computer rebooting during execution of the program (check under WOW64!)
- remove shadow copies at startup (check with WOW64!)
- Disabling Windows recovery mode

IDENTIFICATION

The bot is identified by a pair of
1. dev-id, which is calculated as a hash function of the unique characteristics of the system - hardware and OS.
Purpose: to identify the computer.
2. encryption key, which is stitched at the build stage.
Purpose: to identify an attacked target, find an unlocker for a specific target based on this fingerprint.

Read more:

1. It is suggested to use md5/sha-hash from the string "date_creation%windir%.computer_name.date_creation%windir\system32%.domain_name_or_workgroup".
The name of the hard disk, MAC address of the network interfaces, and other hardware names can also be mixed in here.
The key properties of dev-id are
- the dev-id should be generated every time
- it must be the same every time it is run from different system users
- it must not be saved to disk
- it must be unique
- it is always generated the same way on the same computer.
2. the Bilder creates a pair of executable files "locker-anlocker", generating for them a pair of crypto-keys and flashing them into the files.
Wherever the key is used for identification purposes (not for disk encryption purposes), you should use a short key fingerprint.

BILDER

The builder is a console program that
- takes two files as input - a locker and an unlocker
- generates a pair of crypto-keys, exports them to files
- flashes these keys into the locker and the locker
- you must have a way to generate a key pair and use previously generated key pairs (from files)
- flashing other settings, set from the command line (see item 9 in the ALGORITHM section)
- Outputs a flashing locker and anlocker with changed names.
The name of the locker and the anchor must have the key fingerprint and creation date mixed in, e.g:
locker_aabbccddeeff_01012020.ex_
- the file extension on the output should be .ex_ to prevent accidental launch!!!


ALGORITHM

1. Check the keyboard layout, and if it corresponds to any country from the CIS + Ukraine zone, will terminate immediately.
This feature should be disabled through conditional compilation.
2. Generate your dev-id.
3. Generate key fingerprint
4. Generate a text for the in-memory banding file, substituting your identifiers in it.
(this is an intentional omission).
8.3 The program works in one of two modes: fast or full.
In the fast mode, only the first megabyte of the file is encrypted. This is needed to cover the system quickly.
In full mode, the entire file is encrypted.
There are some settings for the fast mode:
- file coverage percentage
- Maximum file size for full coverage (after this size the file is partially covered)
These settings are best configured on the command line.
When you cover a file partially, you should do it either in staggered order (first 1M covered, then 1M skipped, then 1M covered again, etc.)
or according to some predictable formula (a Golden Ratio type progression so that the maximum area to be covered is not concentrated
only in one place of the file).
8.3.1 After the processing of the directory, it creates a linking file with the text of the redemption.
8.4 If a Share violation type file access error occurs (the file is occupied by another process),
the program finds the blocking process and kills it or stops the corresponding service.
When errors occur, the program tries to repeat the action three times with an interval of 2 minutes and then skips the file.
Further work does not depend on the result of this step.
8.5 The program first processes the directories from a special "fast" list - the list of directories,
The program first processes the directories on a special "fast list" - a list of directories to be skipped.
8.6 The program DOES NOT TAKE files and directories from the special stop-list - the list of files which cannot be touched.

In this case the combinations of quick and stop lists are handled as follows: (*)
8.6.1 We cover all paths from the fast list that are not in the stop list
8.6.2. If the stop-list contains the whole disk, we cover only paths from the fast list on this disk, without touching the rest of the disk
8.6.3. If the stop-list is empty, cover the folders from the fast list first; the other files afterwards.
* see also item 12 about network modes

8.7. The program encrypts only files with extensions from the list of working extensions; the rest are ignored.
8.8. The program deletes files from the special list by overwriting their contents three times:
- first time with constant 0.
- second time with constant FF
- the third time by random garbage
- on the fourth time, the file is deleted.
8.9. The program handles all disks this way.
All errors are ignored.
8.9.1 The term "all disks" also includes all available network Shares as well as network disks.

9. List of changeable settings in the program:
9.1 Operating mode (fast/full)
9.2. encryption key
9.4. fast list
9.5. stop list
9.6. list of working extensions
9.7. delete list
9.8. lending file text
All lists can be directory paths or individual files.
All file-related settings must support:
- wildcards (* symbol)
- Environment variables.
There should be provision for handling files without an extension (by default they should be handled).
All lists must be validated for correctness (known incorrect paths must be ignored).


10. When the program finishes, it destroys itself.

11. There should be two counters in the test assembly:
11.1. how much data was encrypted, in bytes
11.2. the size of the processed files, including those partially encrypted, skipped, deleted, etc. - this is an indicator of the overall processing speed.
These counters should be periodically given out in log, together with current time stamp.
This is needed for speed measurements.

12. In addition, the following modes of scanning network resources/file balloons should be provided
12.1. local - Encrypts only local files + priority list
12.2. net - encrypts only network resources + priority list.
The list of network resources is specified in the file, in the format ip\host address, one line for each host.
12.3. all - Encrypts as net + local (set by default)
12.4. scan - encrypts as net + automatic scanning of the network by subnet mask
12.5. scanext - host list is set in file + as scan
The parameter can only be specified with -m net or without the -m parameter.
File with hosts must contain ip\host address one line per host.

Network scanning and balloon processing takes a long time, so the processing of local files
in network modes must start immediately.
Note that the same network disks can be mounted as local disks and be detected as a separate network ball.
In such a case, re-encryption of the disk should be prevented.
In general, great care should be taken to detect re-encryption of an already covered directory/resource,
because encryption can and will be run in parallel from multiple computers.


LENDING FILE

This is a text file with text about redemption.
The name is readme.<6 random letters and numbers>.txt.

Macros are used in the file:
%devid% - dev-id of the computer
%fingerprint% - key fingerprint
The values created in steps 2 and 3 are used instead.

The text of the file is set from the bilder.

KNOWN BUGS AND LIMITATIONS OF WINDOWS

- when trying to open a file with WOW64 process on 64-bit Windows 7/8/2009,
The CreateFile/OpenFile functions always return TRUE status and do not return an error code.
At the same time a crash is possible when trying to read/write.
The solution is to check the number of open process handles before and after trying to open the file.
- WOW64 process cannot get a valid list of all descriptors in the system on 64bit Windows XP/2003
- When opening file by WOW64 process with FILE_FLAG_OVERLAPPED flag,
file can be opened almost simultaneously by several read/write processes.
The file can be consecutively overwritten by all those processes.
Be careful when running multiple locks at the same time!
Named mutex will only help with local disks!
- Large buffer access delays when using virtual memory, especially noticeable on Windows 10.
Better to allocate memory from the heap.
- File system/file corruptions may cause freezes while processing such files
- Some encryption algorithms are slower on files with high entropy (media - .mp3, .mp4, .avi, archives, etc.)

SOURCES OF INFORMATION

https://www.mcafee.com/blogs/other-blogs/mcafee-labs/ransomware-maze/
https://habr.com/ru/company/acronis/blog/522022/
https://www.carbonblack.com/blog/tau-threat-discovery-conti-ransomware/
https://www.carbonblack.com/blog/tau-threat-analysis-medusa-locker-ransomware/
https://blog.amossys.fr/sodinokibi-malware-analysis.html
More alive than ever: analyzing the first sample of the new BlackMatter encryptor
https://habr.com/ru/company/group-ib/blog/571940/

TEST PLAN

1. Functionality
Testing is performed with AB disabled.
All encryption modes and variations of settings are tried.
Confirmed:
1.1. response of software to settings
1.2. correspondence to specified encryption mode
1.3. correct processing of network drives and balloons
1.4. Correct processing of several concurrently running instances of software on one computer
1.5. Same as 1.4, but same network ball is processed from different computers
1.6. Removing shadow copies of operating system volumes
1.7. Maintaining OS operability after operation completion
1.8. stopping the locker from a normal user
1.9. stopping the locker from an administrator
1.10. preventing rebooting/stopping the machine

2. Compatibility
The test is done on the following versions of Windows:
2.1 Windows 10.
2.2. Windows Server 2012-2018
2.3. Windows 8.1
2.4. Windows 7
2.5. Windows Server 2008 R2
Windows Server 2008 (no R2) 2.6.
2.7. Windows XP
2.8. Windows Server 2003

3. Speed
The work speed is measured.
To do this, the software must have built-in statistics metrics - you need a way to find out the speed
3.1. in megabytes per second
3.2. file descriptors per second (because files might be small).
Of course a correction is made for the fact that the test is conducted on virtual machines, but it is possible to compare the figures with competitors' software on the same VM.

4 Antiviruses
4.1 Windows Defender
4.2 ESET
4.3. Sophos
Avast.
BitDefender 4.5.
4.6. Norton
Kaspersky
Absence of detects 4.1-4.3 is mandatory.
It is acceptable when AV makes a behavioral detection, but cannot take down the process until it is complete.
