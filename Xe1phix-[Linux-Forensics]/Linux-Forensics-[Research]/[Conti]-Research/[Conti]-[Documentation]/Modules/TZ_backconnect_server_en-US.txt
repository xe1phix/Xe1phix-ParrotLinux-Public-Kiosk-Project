Backconnect server
1 The server application runs on a Windows or Linux (Debian or Ubuntu) server. It is assumed that ASIO (Asynchronous IO) model with a fixed number of threads will be used. The only prerequisite: c++ language (preferably c++11) and 64-bit version. There are no restrictions on the libraries used.
It is assumed that the server will run as a daemon on the server (it is not necessary to register as a service in the system) and it will have the following operations: start, stop, restart.
2 The server application tunnels inbound connections from the server port to SOCKS5 inside the tunnel connection that the bc-client makes. Incoming connections to the SOCKS5 port are called ClientConnection; connections created by bc-clients are called DataConnection.
3 DataConnection processing. All DataConnections connect to a special port that the server opens. We'll call this port a DataConnPort. Each connection has a "handshake" in which the bc-client checks the validity of the server, and the server checks to see if the connection has been duplicated twice from the same client.
After a successful handshake, the server opens a separate TCP port for SOCKS5 connections, assigned specifically to this DataConnection. All connections coming on that port will be tunneled to that DataConnection.
3.1 Handshaking in the DataConnection takes place immediately after the TCP connection and is initiated by the client.
Request bc-client:
ProtocolVersion: 4 bytes
RequestSize: 4 bytes
ClientID: 32 bytes
RandHash: 16 bytes
SelfAddressSize: 1 byte
SelfAddress: 16 bytes

RequestSize - response size in bytes. This size includes the size of all fields except ProtocolVersion
ClientID - client ID, 32-byte block of binary data.
RandHash - 16 bytes of random data for the server to duplicate them in the response
SelfAddressSize - the size of the address in the SelfAddress field, can be 4 or 16
SelfAddress is own external address of bc-client. For IPv4 4, for IPv6 16 bytes.

Server response:
ProtocolVersion: 4 bytes
ResponseSize: 4 bytes
ResponseCode: 4 bytes
RandHash: 16 bytes
AesKey: 32 bytes
Padding: 0-16 bytes

ResponseSize - response size in bytes. This size includes the size of all fields except ProtocolVersion
ResponseCode - the response code of the server. Possible values:
0 - successful, 1 - server overloaded, 2 - internal error on server, 3 - unsupported protocol version
RandHash - RandHash field copied from request.
AesKey - not used in current implementation, filled with random bytes.
Padding - random bytes from 0 to 16. In current implementation server itself chooses size of this field randomly and fills it with random bytes.
If the server accepts an invalid handshake request, it immediately closes the connection. If a handshake request from the same bc-client (bc-client is identified by the ClientID field) comes at a time when it already has an active DataConnection, the previous one should be closed immediately.
The only way to get the bc-client address is through the SelfAddress field in the handshake request. Getting the pyra address from the socket is not the right way because there may be a DNAT pad between the bc-client and the server.

3.2 Communication protocol. Both sides of the communication are exchanged using the following message format:
ConnectionID: 8 bytes
DataSize: 4 bytes
XorKey: 4 bytes
Data: x bytes
ConnectionID is an arbitrary unsigned 64-bit number that identifies the connection. The server and client maintain their own lists of current connections. If a message arrives with an unknown ConnectionID, it is assumed that a new connection has been created.
DataSize - The size of the data in the Data field. If the data size is zero, the connection is considered closed.
XorKey - 4 bytes key to encrypt Data field.
Only server can initiate a new connection. Receiving messages from bc-client with unknown ConnectionID is considered bc-client error, if this situation occurs DataConnection must be terminated by server. If a message with DataSize equal to zero is received, ConnectionID is removed from the internal table (both bc-client and server) and ClientConnection associated with this ConnectionID should be terminated by the server (before terminating connection, server should send all data which is probably contained in internal server buffer and waiting to be sent by SOCKS5-client to ClientConnection).
The choice of ConnectionID value when initiating a new connection is left to the developer, it may be random or sequential with increment.
3.2.1 Encryption of the Data field is done as follows: The Data field is divided into parts of 4 bytes, each part is xor-operated with the value of XorKey. If the last part is smaller than 4 bytes, an xor operation is performed on the remaining data bytes. Before each xor operation, the XorKey value is modified as follows: the fourth XorKey byte is incremented and moved to the first position, while the remaining bytes are shifted (from first to second, from second to third, from third to fourth).
Pseudocode encryption:

BYTE CurrentXorKey[4];
CopyMemory(CurrentXorKey, XorKey, 4);
int blocks = DataSize/4;
for (int i=0; i<blocks ; i++)
{
	ModifyXorKey(CurrentXorKey);
	for (int j=0; j<DataSize%4; j++)
	{
		Data[i*4 +j] ^= CurrentXorKey[j];
	}
}
if (DataSize%4)
{
	ModifyXorKey(CurrentXorKey);
	for (int j=0; j<DataSize%4; j++)
	{
		Data[blocks*4 +j] ^= CurrentXorKey[j];
	}
}

ModifyXorKey function:
void ModifyXorKey(unsigned char* pp)
{
	unsigned char temp = pp[3];
	++temp;
	pp[3]=pp[2];
	pp[2]=pp[1];
	pp[1]=pp[0];
	pp[0]=temp;
}

3.3 If a DataConnection has a broken connection, all ClientConnections associated with it must be terminated. If there is no data on the DataConnection for 200 seconds, it must be terminated.
In a DataConnection once every 180 seconds, the bc-client sends a test message with ConnectionID equal to 0xFFFFFFFFFFFFFFFF and zero DataSize. The server should respond to this message with ConnectionID equal to 0xFFFFFFFFFFFFFFFE. Otherwise, the bc-client will drop the connection.
If the DataConnection is not recreated by the bc-client within a certain period of time after the connection is broken (this period is specified in the server config), the SOCKS5 port associated with that DataConnection must be closed and made free for other DataConnections.  
4 ClientConnection processing on the server should be done by the following algorithm:
1 Receiving a connection.
2 If the DataConnection associated with a given port (a disconnect or something else has occurred) does not exist, it closes the connection.
3 Accept SOCKS5 request for authentication and tell the client that authentication is not required.
4 All other data is tunneled to DataConnection
5 If at some point DataConnection ceases to exist (there was a disconnect or something else), then closes the connection.

The server application has a config that specifies the number of worker threads, DataConnPort, and the SOCKS5 port relevance time in seconds after DataConnection is deactivated, which is assigned to it.
It is assumed that all SOCKS5 ports are opened in a fixed range of ports from 40000 to 65535.
6 Bc-client is implemented as a source code, which then will be implemented in another project under Windows. The choice of development tools is left to the developer, but it is assumed that the entire pure compiled binary client files without the above logic for both platforms (x86, x64) will not exceed 100 KB. Bc-client has a list of server addresses to connect to, it gets this list from the above logic. The list is pairs of ip:port values. The Bc-client has to shuffle them and start working with them in order before it starts.
If it fails to connect to the server because it is overloaded (the handshake response code is 1), it must try again after 45 seconds. If after 5 retries the same result is still obtained, the server must be changed to the next one. Any other handshake error code means an immediate server change. If connection is not established at all (no address or port available, server application is not running or just glitches) it means immediate server change. If the bc-client reaches the end of the list of servers, it has to start over. If it fails to start with all servers, ALWAYS continue to work indefinitely, until the higher logic changes the list of servers.
If the DataConnection is broken for any reason while working with the server, the bc-client must immediately create a new one.
6.1 Operations that the bc-client provides to the upstream logic:
SetServerList() - Set a new list of servers. If there was no list before, then bc-client should start working with them. If there was some list before, the bc-client should break the connection to the current server, overwrite the list of servers, and start over.
RestartCurrentDataConnection() - break the current DataConnection and start over with the current server
ChangeCurrentServer() - break the current DataConnection and start over but with the next server in the list
Stop() - break the current DataConnection and clear the list of servers.
6.2 In DataConnection every 180 seconds bc-client sends test messages with ConnectionID equal to 0xFFFFFFFFFFFFFFFF and zero DataSize. In response to this message server should reply with ConnectionID equal to 0xFFFFFFFFFFFF and zero DataSize. Otherwise, bc-client should terminate connection.
6.3 HTTP-interface must be implemented to get data about connected clients. Request format
http://ip:port/<key>/<keypass>/<function>/<param1>/<param2>/
where:
key, keypass are authentication data. Both parameters can contain numbers, capital and small letters, the characters "_", "-", "+" and "dot".
function - the name of call
param1, param2 - parameter, depends on the value of function.
All parameters are case sensitive. All answers are in text/plain format.
List of key pairs, keypass , also list of functions allowed for each of them should be defined in config. Also, the port for the HTTP-intention should be specified in the config.
6.3.1 Function GetAddress - getting SOCKS5-port for bc-client. Parameter is ID as HEX string. Response: string with the port value for SOCKS connections.  
Example, query:
http://ip:port/3f45td/F324tH3rty+FDyrfh327gter/GetAddress/AABBCCDDEEFF11223344556677889900/
Example response: "30127".
6.3.2 MapPort function - local bc-client port forwarding. Using the PortMapper program functionality, the server should map the local port of the target bc-client, to the server port.  The first parameter is the ID as a HEX string, the second parameter is the target local port. The answer is a string with the value of the created server port.  
Example, query for target local port 65521:
http://ip:port/3f45td/F324tH3rty+FDyrfh327gter/GetAddress/AABBCCDDEEFF11223344556677889900/65521/
Example response: "39017".
6.3.3 GetList function - get complete list of bc-clients. It does not take parameters. Response: list of bc-client data.
The format of the list:
<socks-port>|<ID>|<exit-ip>|<online>\r\n
socks-port - SOCKS5 port, number
ID - bc-client's identifier in the form of HEX-string
exit-ip - ip-address as a string
online - can have two values: "Y" - if DataConnection is now active and working, "N" - if DataConnection is not working now and the port is waiting for bc-client to reconnect.
There are no extra spaces or html in the list. There are "\r\n" characters even after the last line.

Example, query:
http://ip:port/3f45td/F324tH3rty+FDyrfh327gter/GetList/
Example response:
1123|11223344556677889900AABBCCDDEEFF|11.22.33.44|Y\r\n
29021|44556677889900AABBCCDDEEFF112233|90.12.34.56|N\r\n
15696|7889900AABBCCDDEEFF1122334455667|121.125.170.1|Y\r\n
....

Port Mapper
The application implements remote port forwarding to a local server port.
The application takes the following command line:
PortMapper <socks-ip>:<socks-port> <listen-port> <destination-ip>:<destination-port> <idletime>
For example, PortMapper 11.22.33.44:21345 45674 12.34.45.67:443
In this case, PortMapper opens port 45674 (<listen-port>) to accept connections. When it receives a connection to 45674, it immediately initiates a connection to 12.34.45.67:443 (<destination-ip>:<destination-port>) through the proxy 11.22.33.44:21345 (<socks-ip>:<socks-port>) and then passes the data from the client to 12.34.45.67:443 and from 12.34.45.67:443 to the client in normal relay mode.
So it turns out that the client connected to port 45674 is actually communicating with 12.34.45.67:443 through a proxy. In this case the address 12.34.45.67:443 is hidden from him, he can only see the server port. Recipient 12.34.45.67:443 sees only proxy and does not know about server and does not know about client connected to listen-port.
There can be a lot of connections on listen-port.
The <idletime> parameter defines the idle time in seconds after which PortMapper should automatically finish. Idle time means the period in seconds during which no bytes were transmitted in both directions and no connections were accepted. If at least one byte is transmitted to at least one of the connections, it is no longer idle.