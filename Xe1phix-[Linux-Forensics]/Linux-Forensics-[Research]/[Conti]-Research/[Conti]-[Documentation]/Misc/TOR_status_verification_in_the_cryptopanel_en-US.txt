Improvement for storing the status of sample checks in the cryptopanel

PURPOSE OF DREAMING

This is part of a set of measures to automate the testing of crypto samples.
The general sense of the improvement is as follows:
- The cryptopanel forms a queue of samples for testing (very similar to virustotal.com or dyncheck.com)
- we have a pool of virtual machines with testing scripts on them
- the scripts pull the cryptopanel saying for example "hello, I'm an IEWIN10 machine, give me the files to test on me"
- the cryptopanel gives back the file from the queue, making necessary notes in the database
- the scripts test something there, then give back an answer, for example, "hello, IEWIN10 machine, I tested file so-and-so, I answer, the file sucks! here is the log".


RETROFIT IMPLEMENTATION

Right now, the cryptopanel stores samples uploaded there by users.
We need to add statuses for CLOCKED samples:

- No need to check
- Must be checked
- Checked
- Checked

Based on these statuses:
- Automated testing scripts can select samples to test on our virtuals
- as well as give the result of the test.

All of this in combination will minimize manual labor when checking crypts.


DETAILS

The "do not need to check" status is for those that are known to be non-working or for some reason do not need to be checked.
The "don't need to check" status must have a reason - enum { "not known to work", "own reason" (and then a comment on it) }

You should also add the following attributes to the "Must check" status:
- simple number - check priority. For the user it is desirable to make control of this priority via drag-drop, but it's more convenient.
*RIGHT 18.09.2018* Priority as a separate property is not necessary. It is better to add a file to be checked at the beginning or the end of the queue.
- Virtualization rollback sign (boolean value). Default value = true.
If this flag = true, it means that it is allowed to rollback the virtual machine after the test.
If flag = false, it means not to roll back the virtual machine after the test, prohibit adding new tasks to this virtual machine. In the user interface
indicators/buttons of VM statuses are needed, with the help of which the operator can reactivate the VM.
Accordingly, the VM must have a status of "active"/"inactive", which status allows you to assign tasks to it.


The "Checked" status is accompanied by details:
* for each of the virtual machines:
- full check log (text field up to 64k in length)
- check status: success/failure
- start and end date and time of check

The system should have a virtual machine management section:
- create-edit-delete machine.
In the machine properties:
- name
- OS bitness
- OS version


The test is performed on SEVERAL MACHINES. The overall success of the test is determined by the success of the test ON ALL MACHINES.
Accordingly, there should be a section to manage the list of machines. The machine has properties - name, and IP address.
When the check script connects to the panel via API, it presents itself to the system - it gives the name of the machine on which it is running.


USER SCENARIO

The operator can:
- select files to check by marking them with a "need to check" status, and by selecting a list of machines to check
- Select the scan priority for the files
- mark the files which do not need to be checked
- see the check result (see the check log on each of the machines)
- reset the test result (e.g. if the test hangs, or if a file has to be re-tested)

*AMENDMENT 18.09.2018*.
When assigning a file to check on a specific virtualization, you should issue a command to start that virtualization.
The result of the command should be ignored - if the virtualization is already running, the VM manager will ignore this command.


API

We need to provide an API to automate the work of the script, with the following operations:
1. give me the next highest priority file in the queue to check on the machine named %MACHINE%

HTTP POST /some-random-and-long-api-prefix/getfile

parameters:

pass: hardcoded password - common for all API. String.
machine: computer name. String.

Answer: a json of the following form:
{
"file_id": 32, // file ID in the database
"file": "TVqQAAMAAAAAAAAAAA//8AA" // base64 encoded file body
}

From the moment the file is delivered, this machine is marked in the database as checking the file.
Repeated queries from the same machine for a file should be treated as valid -
this means a network failure when receiving the file on the previous request.


2. get the results of the file check on the %MACHINE% machine

HTTP POST /some-random-and-long-api-prefix/setresult

parameters:

pass: hardcoded password - common for all API. String.
machine: computer name. String.
status: 0|1. Only two values are possible - indicating "ok" and "failed" respectively. Means the overall test result.
log: test log. Long string (let's assume up to 64k, but in theory it can be more) in base64 encoding.
file_id: number. Identifier of file obtained in previous request.

The system looks to see which file has been checked on that machine and gives it the appropriate status.
IF a file has NOT been checked on that machine, or the start time of the check is too old (more than 24 hours), the request should be ignored
as invalid.

If the check succeeds, OR if rollback of the virtual machine is allowed for this check,
the virtual machine should be rolled back via the phpVirtualBox API (*IN DEVELOPMENT*)
Otherwise, the virtual machine is not rolled back, and all pending checking tasks on this machine
continue to wait until the operator manually clicks the "rollback this virtual machine" button.

To do this, the user interface should display a notification to the operator, with a "Rollback" button.


ACCESS

To minimize the risk of data leakage, it is necessary that access to the API does not overlap with regular system accounts.
To do this, it is suggested:
- That API functions be preceded by a long random prefix in the url (security by obscurity)
- API functions should check for hardcoded password sent in POST (so that password is not shown in logs along with GET)
- API functions should be checked especially carefully for injections.
